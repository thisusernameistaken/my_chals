loaded
0xb18d0: endbr64 ; push r13; mov  r13, rsi; mov  rsi, rdx; push r12; push rbp; mov  rbp, rdx; push rbx; mov  rbx, rdi; mov  rdi, r13; sub  rsp, 0x8; call jump_strnlen; 
0xb1880: endbr64 ; push r14; mov  r14, rdx; push r13; mov  r13, rsi; push r12; mov  r12, rdi; push rbp; sub  rsp, 0x8; call sub_28490; mov  rsi, r14; mov  rdi, r13; lea  rbp, [r12+rax]; call jump_strnlen; 
0xebe50: lea  rdi, [rel 0x1d82c9]  {"PATH"}; call getenv; mov  esi, 0xff; mov  rdi, r15; test rax, rax; mov  r14, rax; lea  rax, [rel 0x1d9cc3]  {"/bin:/usr/bin"}; cmove   r14, rax; call jump_strnlen; 
0xebe50: lea  rdi, [rel 0x1d82c9]  {"PATH"}; call getenv; mov  esi, 0xff; mov  rdi, r15; test rax, rax; mov  r14, rax; lea  rax, [rel 0x1d9cc3]  {"/bin:/usr/bin"}; cmove   r14, rax; call jump_strnlen; mov  esi, 0xfff; mov  rbx, rax; mov  rdi, r14; call jump_strnlen; 
0x2c57c: mov  r15, r8; mov  rdi, r12; mov  qword [rbp-0x80], r10; sub  r15, r12; mov  qword [rbp-0x78], r9; mov  rsi, r15; mov  qword [rbp-0x70], rcx; mov  qword [rbp-0x68], r11; mov  qword [rbp-0x60], r8; call jump_strnlen; 
0xb1940: endbr64 ; push r13; mov  r13, rdi; push r12; push rbp; mov  rbp, rsi; mov  rsi, rdx; push rbx; mov  rdi, rbp; mov  rbx, rdx; sub  rsp, 0x8; call jump_strnlen; 
0xd32ee: mov  rdi, r15; call jump_strnlen; 
0xf02b0: push r14; mov  r14, rdi; push r13; push r12; push rbp; mov  rbp, rsi; push rbx; mov  rbx, rdx; sub  rsp, 0x30; mov  r13, qword [rsi+0x8]; mov  qword [rsp+0x8], rdi; lea  r12, [rsp+0x20]; shr  r13, 0x2; lea  rsi, [r13-0x1]; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x28], rax; xor  eax, eax; mov  qword [rsp+0x20], 0x0; call jump_strnlen; 
0x10e8f0: mov  rsi, r12; sub  rsi, rdi; mov  rdi, r14; sub  rsi, 0x1; call jump_strnlen; 
0xa8daf: mov  rsi, qword [rsp+0x20]; lea  rdi, [r14+r13]; mov  qword [rsp+0x10], r8; mov  qword [rsp+0x8], rcx; mov  qword [rsp], rdx; call jump_strnlen; 
0xa8f4c: mov  rsi, qword [rsp+0x10]; lea  rdi, [r14+r13]; mov  qword [rsp+0x8], rcx; mov  qword [rsp], r8; call jump_strnlen; 
0xa90b1: mov  rdi, r13; call sub_28490; mov  rdi, r12; mov  rsi, rax; mov  qword [rsp+0x8], rax; mov  r14, rax; or   rsi, 0x200; call jump_strnlen; 
0xa9262: mov  rax, qword [rsp+0x8]; mov  esi, 0x800; lea  rdi, [r15+rax]; call jump_strnlen; 
0x7594b: movsxd  rsi, r14d; mov  rdi, r15; call jump_strnlen; 
0x73970: movsxd  rsi, r11d; mov  rdi, r12; call jump_strnlen; 
0xc67d8: mov  rbx, qword [rsi]; mov  r15, rdi; mov  r13, rsi; lea  rsi, [rdx-0x1]; mov  r14, rcx; mov  rdi, rbx; call jump_strnlen; 
0x171de3: mov  rax, qword [rsp+0x8]; mov  esi, 0x20; lea  r14, [rax+0x2c]; mov  rdi, r14; call jump_strnlen; 
0xa8630: endbr64 ; push r12; push rbp; mov  rbp, rdi; sub  rsp, 0x8; call jump_strnlen; 
0x44cb9: mov  rsi, r12; mov  rdi, r13; call jump_strnlen; 
0xaa0e7: mov  rsi, qword [rsp+0x30]; lea  rdi, [r8+r15]; mov  qword [rsp+0x20], rcx; mov  qword [rsp+0x18], r9; mov  qword [rsp+0x10], rdx; mov  qword [rsp+0x8], r8; call jump_strnlen; 
0xaa274: mov  rsi, qword [rsp+0x20]; lea  rdi, [r13+r15]; mov  qword [rsp+0x18], r8; mov  qword [rsp+0x10], r9; mov  qword [rsp+0x8], rdx; call jump_strnlen; 
0xaa38a: mov  rdi, rsi; mov  r13, rsi; call sub_28490; mov  rdi, r14; lea  rsi, [rax+0x100]; mov  r12, rax; call jump_strnlen; 
0xaa507: mov  rsi, qword [rsp+0x28]; lea  rdi, [r8+r14]; mov  qword [rsp+0x18], r10; mov  qword [rsp+0x10], rcx; mov  qword [rsp+0x8], r8; call jump_strnlen; 
0xaa6be: mov  rsi, qword [rsp+0x8]; lea  rdi, [r15+r14]; mov  qword [rsp+0x28], r9; mov  qword [rsp+0x20], r8; mov  qword [rsp+0x18], rdx; mov  qword [rsp+0x10], rcx; call jump_strnlen; 
0xeb910: lea  rdi, [rel 0x1d82c9]  {"PATH"}; call getenv; mov  esi, 0xff; mov  rdi, r13; test rax, rax; mov  r15, rax; lea  rax, [rel 0x1d9cc3]  {"/bin:/usr/bin"}; cmove   r15, rax; call jump_strnlen; 
0xeb910: lea  rdi, [rel 0x1d82c9]  {"PATH"}; call getenv; mov  esi, 0xff; mov  rdi, r13; test rax, rax; mov  r15, rax; lea  rax, [rel 0x1d9cc3]  {"/bin:/usr/bin"}; cmove   r15, rax; call jump_strnlen; mov  esi, 0xfff; mov  r14, rax; mov  rdi, r15; call jump_strnlen; 
0x14011b: mov  rsi, r15; mov  rdi, r13; mov  dword [rsp+0x670], r11d; call jump_strnlen; 
0xab657: mov  rsi, rbx; mov  rdi, rbp; call jump_strnlen; 
0x2cd50: mov  rdi, r15; xor  esi, esi; mov  rbx, r15; call jump_rawmemchr; 
0x2cd50: mov  rdi, r15; xor  esi, esi; mov  rbx, r15; call jump_rawmemchr; xor  esi, esi; lea  rbp, [rax+0x1]; mov  rdi, rbp; call jump_rawmemchr; 
0x13e6f4: xor  ebp, ebp; mov  dword [rbx], 0x0; cmp  byte [rdi], 0x0; mov  rax, rbp; cmovne  rax, rdi; xor  esi, esi; mov  qword [rbx+0x8], rax; call jump_rawmemchr; 
0x13e6f4: xor  ebp, ebp; mov  dword [rbx], 0x0; cmp  byte [rdi], 0x0; mov  rax, rbp; cmovne  rax, rdi; xor  esi, esi; mov  qword [rbx+0x8], rax; call jump_rawmemchr; lea  rdi, [rax+0x1]; mov  qword [rbx+0x30], rdi; cmp  byte [rax+0x1], 0x0; mov  rax, rbp; cmovne  rax, rdi; xor  esi, esi; mov  qword [rbx+0x10], rax; call jump_rawmemchr; 
0x13e6f4: xor  ebp, ebp; mov  dword [rbx], 0x0; cmp  byte [rdi], 0x0; mov  rax, rbp; cmovne  rax, rdi; xor  esi, esi; mov  qword [rbx+0x8], rax; call jump_rawmemchr; lea  rdi, [rax+0x1]; mov  qword [rbx+0x30], rdi; cmp  byte [rax+0x1], 0x0; mov  rax, rbp; cmovne  rax, rdi; xor  esi, esi; mov  qword [rbx+0x10], rax; call jump_rawmemchr; lea  rdi, [rax+0x1]; mov  qword [rbx+0x30], rdi; cmp  byte [rax+0x1], 0x0; cmovne  rbp, rdi; xor  esi, esi; mov  qword [rbx+0x18], rbp; call jump_rawmemchr; 
0x1167c0: add  dword [rbp+0x2c], 0x1; mov  r12, qword [rbp+0x18]; xor  esi, esi; mov  rdi, r12; call jump_rawmemchr; 
0x510d0: xor  esi, esi; mov  rdi, rbp; call jump_rawmemchr; 
0x8fa5e: xor  esi, esi; mov  rdi, rbx; call jump_rawmemchr; 
0x3bbaa: xor  esi, esi; call jump_rawmemchr; 
0x3bcaa: xor  esi, esi; call jump_rawmemchr; 
0x3bbaa: xor  esi, esi; call jump_rawmemchr; 
0x3bcaa: xor  esi, esi; call jump_rawmemchr; 
0x14aaca: mov  r13, r12; lea  rsi, [rel 0x1d6340]  {"order"}; mov  rdi, r15; sub  r13, r15; mov  rdx, r13; call jump_strncasecmp; 
0x14aafb: lea  rbp, [rel 0x1d6350]  {"trim"}; mov  rdx, r13; mov  rdi, r15; mov  rsi, rbp; call jump_strncasecmp; 
0x14ab1e: lea  rbp, [rel 0x1d6360]  {"multi"}; mov  rdx, r13; mov  rdi, r15; mov  rsi, rbp; call jump_strncasecmp; 
0x14ab41: lea  rbp, [rel 0x1d6370]  {"reorder"}; mov  rdx, r13; mov  rdi, r15; mov  rsi, rbp; call jump_strncasecmp; 
0x155f19: mov  edx, 0x8; lea  rsi, [rel 0x1dc188]  {"NOTFOUND"}; mov  rdi, r15; call jump_strncasecmp; 
0x155f35: mov  edx, 0x8; lea  rsi, [rel 0x1dc191]  {"TRYAGAIN"}; mov  rdi, r15; call jump_strncasecmp; 
0x156024: mov  edx, 0x5; lea  rsi, [rel 0x1dc1aa]  {"MERGE"}; call jump_strncasecmp; 
0x1560b0: mov  edx, 0x7; lea  rsi, [rel 0x1dc178]  {"SUCCESS"}; mov  rdi, r15; call jump_strncasecmp; 
0x1560cc: mov  edx, 0x7; lea  rsi, [rel 0x1dc180]  {"UNAVAIL"}; mov  rdi, r15; call jump_strncasecmp; 
0x156100: mov  edx, 0x6; lea  rsi, [rel 0x1dc19a]  {"RETURN"}; call jump_strncasecmp; 
0x156198: mov  edx, 0x8; lea  rsi, [rel 0x1dc1a1]  {"CONTINUE"}; call jump_strncasecmp; 
0x14a870: push r13; mov  r13d, esi; lea  rsi, [rel 0x1d835f]; push r12; mov  r12, rdi; push rbp; mov  ebp, ecx; push rbx; mov  rbx, rdx; mov  edx, 0x2; mov  rdi, rbx; sub  rsp, 0x18; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x8], rax; xor  eax, eax; call jump_strncasecmp; 
0x14a8e0: mov  edx, 0x3; lea  rsi, [rel 0x1dbec7]; mov  rdi, rbx; call jump_strncasecmp; 
0xaa04b: mov  rax, qword [rsp+0x58]; mov  rdx, qword [rsp]; mov  rdi, rbp; mov  qword [rsp+0x10], r9; mov  qword [rsp+0x8], r8; lea  rsi, [rbp+rax]; mov  qword [rsp+0x28], rax; call jump_strncasecmp; 
0xaa416: lea  rdx, [rsp+0x50]; mov  rsi, r12; mov  rdi, r13; mov  qword [rsp+0x8], rax; call sub_a9e20; mov  rdi, r13; mov  rcx, rax; mov  rax, qword [rsp+0x50]; mov  rdx, rcx; mov  qword [rsp], rcx; lea  rsi, [r13+rax]; mov  qword [rsp+0x30], rax; call jump_strncasecmp; 
0x13dcb9: mov  rdi, qword [rbp-0x4e8]; mov  rsi, r12; sub  rdx, rdi; mov  qword [rbp-0x4f8], rdx; call jump_strncasecmp; 
0x1100b4: mov  rdx, r12; mov  rsi, rbp; mov  rdi, rax; mov  qword [rsp+0x20], r11; mov  qword [rsp+0x18], r10; call jump_mempcpy; 
0x110d3b: mov  rdx, rbx; mov  rsi, rbp; mov  rdi, rax; mov  qword [rsp+0x20], r11; mov  qword [rsp+0x18], r10; call jump_mempcpy; 
0x2cb99: mov  rdx, r13; mov  rsi, rbx; mov  rdi, rax; call jump_mempcpy; 
0x88630: mov  rdx, r12; call jump_mempcpy; 
0x2bf27: lea  rdi, [rsp+0xf]; mov  rsi, r13; and  rdi, 0xfffffffffffffff0; mov  qword [rbp-0x40], rdi; call jump_mempcpy; 
0x2c062: mov  rdx, qword [rbp-0x58]; mov  rdi, r15; mov  rsi, r13; mov  qword [rbp-0x48], r8; call jump_mempcpy; 
0xebf88: mov  rdi, qword [rbp-0x50]; mov  rsi, r14; mov  qword [rbp-0x60], rax; call jump_mempcpy; 
0x8b186: cmp  r15, rbx; mov  rsi, r13; mov  rdi, r12; cmovbe  rbx, r15; mov  rdx, rbx; add  r13, rbx; call jump_mempcpy; 
0x8b1d8: mov  rdx, rbx; mov  rsi, r13; mov  rdi, r14; sub  r15, rbx; call jump_mempcpy; 
0x2c67b: lea  rdi, [rax+0x38]; mov  rdx, r15; mov  rsi, r12; mov  qword [rax], rdi; call jump_mempcpy; 
0x2c67b: lea  rdi, [rax+0x38]; mov  rdx, r15; mov  rsi, r12; mov  qword [rax], rdi; call jump_mempcpy; mov  rdx, qword [rbp-0x68]; mov  rsi, qword [rbp-0x78]; mov  qword [rbx+0x8], rax; mov  rdi, rax; sub  rdx, r13; call jump_mempcpy; 
0x2c6c3: mov  rdx, qword [rbp-0x90]; mov  rsi, r9; call jump_mempcpy; 
0x2c728: mov  rsi, qword [rbp-0x58]; mov  rdx, r10; mov  qword [rbp-0x60], r9; call jump_mempcpy; 
0x2df96: mov  rcx, qword [rsp]; mov  rax, qword [rsp+0x10]; mov  rsi, r13; mov  rdi, rbp; mov  r12d, 0x4; sub  rcx, r13; sub  rax, rbp; cmp  rax, rcx; mov  qword [rsp+0x30], rcx; cmovg   rax, rcx; test rax, rax; lea  rdx, [rax+0x3]; cmovns  rdx, rax; and  rdx, 0xfffffffffffffffc; lea  rax, [r13+rdx]; mov  qword [r15], rax; call jump_mempcpy; 
0x2e1c2: mov  rdi, qword [rsp+0x30]; mov  rax, r12; mov  rsi, r13; mov  dword [rsp+0x20], r8d; sub  rax, rbp; cmp  rax, rdi; cmovg   rax, rdi; mov  rdi, rbp; test rax, rax; lea  rdx, [rax+0x3]; cmovns  rdx, rax; and  rdx, 0xfffffffffffffffc; lea  rax, [r13+rdx]; mov  qword [r15], rax; call jump_mempcpy; 
0x8b458: mov  rdi, r13; mov  rdx, rbp; sub  r12, rbp; call jump_mempcpy; 
0x72454: mov  rcx, qword [rsp+0x20]; mov  rdx, r13; mov  rsi, r14; mov  rdi, rcx; mov  qword [rsp+0x8], rcx; call jump_mempcpy; 
0x77ae2: mov  rbx, qword [rsp+0x10]; mov  rdx, r14; mov  rsi, rbp; mov  rdi, rbx; call jump_mempcpy; 
0xf240c: mov  rsi, r12; mov  rdi, rax; mov  qword [rsp], r9; call jump_mempcpy; 
0x16fc9c: add  rbx, 0x1; lea  rax, [rel data_1d846f]; test r15, r15; mov  rdx, r13; mov  rsi, r14; cmove   r15, rax; call jump_mempcpy; 
0x35501: mov  rdx, r14; mov  rsi, r13; mov  rdi, rsp; call jump_mempcpy; 
0x3d659: lea  r12, [rsp+0xf]; mov  rsi, rdi; and  r12, 0xfffffffffffffff0; mov  rdi, r12; call jump_mempcpy; 
0x10d644: add  rdi, r14; mov  rdx, rbp; mov  rsi, r12; call jump_mempcpy; 
0x11635e: add  rdi, rdx; mov  rsi, rbp; mov  rdx, r12; call jump_mempcpy; 
0xdc5e6: mov  rcx, qword [rsp+0x20]; mov  rsi, r14; mov  rdx, rbp; movsxd  r14, r12d; mov  rdi, rcx; mov  qword [rsp+0x18], rcx; call jump_mempcpy; 
0x10704c: mov  rdx, qword [rbp-0x2e8]; mov  rsi, r13; add  rbx, 0x1; call jump_mempcpy; 
0x1072e3: mov  rsi, r15; mov  rdi, r14; call jump_mempcpy; 
0x106b26: mov  rsi, qword [rsp+0x10]; mov  rdx, rbp; mov  rdi, rax; call jump_mempcpy; 
0x10e1ee: lea  rdi, [rcx+rax]; mov  rdx, rbx; mov  rsi, r12; mov  qword [rsp+0x28], rcx; add  qword [rsp+0x20], rbx; call jump_mempcpy; 
0x11e3bb: mov  rdx, rbx; lea  rdi, [rsp+0xbf]; xor  r12d, r12d; sub  rdx, rsi; call jump_mempcpy; 
0x12f04c: lea  rax, [rdx+rdx*2]; mov  r10, qword [rbp]; mov  rsi, qword [r15]; mov  rdi, r12; shl  rax, 0x4; mov  qword [rsp+0x58], r8; mov  rdx, rax; mov  qword [rsp+0x40], r10; mov  dword [rsp+0x48], ecx; mov  qword [rsp+0x28], rsi; mov  qword [rsp+0x50], rax; call jump_mempcpy; 
0x896c0: mov  rdx, qword [rbx+0x8]; mov  rsi, qword [rbx]; add  rbx, 0x10; call jump_mempcpy; 
0x13c12f: lea  r8, [rsp+0xf]; and  r8, 0xfffffffffffffff0; mov  rdi, r8; mov  qword [rbp-0x98], r8; call jump_mempcpy; 
0x1416b6: mov  rax, qword [rbp-0xb0]; mov  rsi, r11; mov  qword [r12+0x8], rax; mov  rdi, rax; call jump_mempcpy; 
0x1419be: mov  qword [r12+0x8], r15; mov  rdi, r15; call jump_mempcpy; 
0x14580f: mov  rsi, qword [rsp+0x68]; mov  rdx, r8; mov  qword [rsp+0x68], r8; mov  qword [rsp+0x10], r9; mov  qword [rsi], rdi; lea  rcx, [rsi+0x8]; mov  rsi, r9; mov  qword [rsp+0x30], rcx; call jump_mempcpy; 
0xee0dc: mov  rdx, qword [rbp-0x2e8]; mov  rsi, r13; add  rbx, 0x1; call jump_mempcpy; 
0xee373: mov  rsi, r15; mov  rdi, r14; call jump_mempcpy; 
0xedbb6: mov  rsi, qword [rsp+0x10]; mov  rdx, rbp; mov  rdi, rax; call jump_mempcpy; 
0x1166c1: lea  rdi, [r14+rbx]; mov  rsi, r15; lea  rbx, [r12+0x1]; call jump_mempcpy; 
0x680ec: lea  rcx, [rsp+0xf]; mov  rsi, r14; and  rcx, 0xfffffffffffffff0; mov  rdi, rcx; mov  qword [rbp-0x6f0], rcx; call jump_mempcpy; 
0x680ec: lea  rcx, [rsp+0xf]; mov  rsi, r14; and  rcx, 0xfffffffffffffff0; mov  rdi, rcx; mov  qword [rbp-0x6f0], rcx; call jump_mempcpy; mov  rdx, qword [rbp-0x620]; mov  rsi, r12; mov  rdi, rax; call jump_mempcpy; 
0x6ca62: mov  rdi, qword [rbp-0x598]; mov  rsi, r8; mov  rdx, r15; call jump_mempcpy; 
0x6e38c: mov  rdi, qword [rbp-0x598]; mov  rsi, r8; mov  rdx, r15; call jump_mempcpy; 
0x70212: mov  rdi, qword [rbp-0x598]; mov  rsi, r8; mov  rdx, r15; call jump_mempcpy; 
0x8942b: mov  rdx, qword [rbx+0x8]; mov  rsi, qword [rbx]; mov  dword [rax], r12d; lea  rdi, [rax+0x4]; call jump_mempcpy; 
0x8d6d0: mov  rsi, qword [rsp+0x28]; mov  rdx, rbp; mov  rdi, r15; mov  qword [rsp+0x18], r8; neg  rdx; mov  qword [rsp+0x10], r10; add  rsi, rbp; call jump_mempcpy; 
0x51060: mov  rdx, qword [rsp+0x28]; mov  rsi, qword [rsp+0x20]; mov  rdi, r12; call jump_mempcpy; 
0x3b090: lea  r11, [rsp+0xf]; mov  rsi, r8; and  r11, 0xfffffffffffffff0; mov  rdi, r11; mov  qword [rbp-0x78], r11; call jump_mempcpy; 
0x44580: mov  rsi, r13; mov  rdi, r15; add  r13, r14; sub  rbx, 0x1; call jump_mempcpy; 
0x445bf: mov  rsi, r12; mov  rdi, r15; add  r12, r14; sub  rbp, 0x1; call jump_mempcpy; 
0x44fd5: lea  rax, [rsp+0xf]; mov  rsi, r12; mov  rdx, rbx; and  rax, 0xfffffffffffffff0; lea  r12, [rel 0x21aec0]; mov  rdi, rax; mov  r14, rax; call jump_mempcpy; 
0x450b5: mov  rdx, rbx; mov  rbx, qword [rbp-0x48]; mov  rsi, r12; lea  r12, [rel 0x21aec0]; mov  rdi, rbx; call jump_mempcpy; 
0x5bf67: mov  rsi, qword [rbp-0x108]; mov  rdx, r14; add  r15, 0x4; call jump_mempcpy; 
0x5c1d0: mov  rdx, qword [rbp-0xe8]; mov  rsi, qword [rbp-0x110]; call jump_mempcpy; 
0x92280: cmp  r12, rdx; cmovbe  rdx, r12; call jump_mempcpy; 
0x8e288: mov  rdi, r12; mov  rsi, r8; mov  qword [rsp+0x8], rdx; call jump_mempcpy; 
0x8b6ca: cmp  r12, rbx; mov  rsi, r13; mov  r15, rbx; cmova   r12, rbx; mov  rdx, r12; add  r13, r12; sub  r15, r12; call jump_mempcpy; 
0xc5ca0: endbr64 ; shl  rdx, 0x2; jmp  jump_mempcpy; 
0x8c4e6: mov  rdx, r14; mov  rsi, r15; mov  rdi, rax; call jump_mempcpy; 
0xa9c54: sub  rax, rbp; mov  rsi, rbp; mov  rdi, r13; pop  rbp; lea  rdx, [rax+0x1]; pop  r12; pop  r13; jmp  jump_mempcpy; 
0x135909: shl  rdx, 0x2; jmp  jump_mempcpy; 
0x106875: mov  rsi, qword [rsp]; movsxd  rdx, ebp; mov  rdi, rax; call jump_mempcpy; 
0x3b74e: lea  rax, [rsp+0xf]; mov  rsi, r15; and  rax, 0xfffffffffffffff0; mov  rdi, rax; mov  qword [rbp-0xc0], rax; call sub_28450; mov  rdx, qword [rbp-0xe0]; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_mempcpy; 
0x3bd16: mov  rsi, r14; lea  rdi, [rax+0x38]; mov  rdx, r15; add  rbx, 0x1; mov  qword [rbp-0xc0], r10; call jump_mempcpy; 
0x106965: mov  rsi, qword [rsp]; movsxd  rdx, ebp; mov  rdi, rax; call jump_mempcpy; 
0x2a61a: lea  r13, [rsp+0xf]; and  r13, 0xfffffffffffffff0; mov  rdi, r13; call jump_mempcpy; 
0x2a6cb: lea  r14, [rsp+0xf]; and  r14, 0xfffffffffffffff0; mov  rdi, r14; call jump_mempcpy; 
0x17636f: lea  r13, [rsp+0xf]; mov  rdi, r13; and  rdi, 0xfffffffffffffff0; mov  qword [rbp-0x4c0], rdi; sub  rdx, rsp; mov  qword [rbp-0x4d0], rdx; mov  rdx, r15; mov  rsi, r12; sub  rdx, r12; call jump_mempcpy; 
0x1768be: mov  r14, qword [rbp-0x4e0]; mov  rsi, r12; mov  rdi, r13; mov  rdx, r14; call jump_mempcpy; 
0x176ba0: mov  rdx, r13; mov  rdi, qword [rbp-0x500]; sub  rdx, rax; sub  rdx, 0x1; call jump_mempcpy; 
0x176df0: mov  rdi, qword [rbp-0x4e8]; mov  rdx, r12; sub  rdx, rsi; call jump_mempcpy; 
0x1771f6: mov  rdx, r15; mov  rsi, r12; mov  rdi, rax; sub  rdx, r12; call jump_mempcpy; 
0x1772f5: mov  rdi, qword [rbp-0x500]; lea  rdx, [r14-0x1]; call jump_mempcpy; 
0x177540: mov  rsi, qword [rbp-0x4c0]; mov  rdx, r15; call jump_mempcpy; 
0x177884: mov  rsi, qword [rbp-0x508]; mov  rdx, r14; call jump_mempcpy; 
0x1778a2: mov  rdx, r13; mov  rsi, rax; call jump_mempcpy; 
0x177bca: mov  rdi, r8; mov  rsi, r13; mov  qword [rbp-0x508], r8; call jump_mempcpy; 
0xee6ff: lea  r13, [rsp+0xf]; mov  rdi, r13; and  rdi, 0xfffffffffffffff0; mov  qword [rbp-0x4c0], rdi; sub  rdx, rsp; mov  qword [rbp-0x4d0], rdx; mov  rdx, r15; mov  rsi, r12; sub  rdx, r12; call jump_mempcpy; 
0xeec4e: mov  r14, qword [rbp-0x4e0]; mov  rsi, r12; mov  rdi, r13; mov  rdx, r14; call jump_mempcpy; 
0xeef30: mov  rdx, r13; mov  rdi, qword [rbp-0x500]; sub  rdx, rax; sub  rdx, 0x1; call jump_mempcpy; 
0xef180: mov  rdi, qword [rbp-0x4f0]; mov  rdx, r14; sub  rdx, rsi; call jump_mempcpy; 
0xef586: mov  rdx, r15; mov  rsi, r12; mov  rdi, rax; sub  rdx, r12; call jump_mempcpy; 
0xef685: mov  rdi, qword [rbp-0x500]; lea  rdx, [r14-0x1]; call jump_mempcpy; 
0xef8d0: mov  rsi, qword [rbp-0x4c0]; mov  rdx, r15; call jump_mempcpy; 
0xefc14: mov  rsi, qword [rbp-0x508]; mov  rdx, r14; call jump_mempcpy; 
0xefc32: mov  rdx, r13; mov  rsi, rax; call jump_mempcpy; 
0xeff5a: mov  rdi, r8; mov  rsi, r13; mov  qword [rbp-0x508], r8; call jump_mempcpy; 
0xed265: mov  rdx, rbx; mov  rsi, r12; mov  rdi, rsp; call jump_mempcpy; 
0x11cc7f: mov  rsi, r12; mov  rdi, rsp; call jump_mempcpy; 
0xebb20: mov  rsi, r14; mov  rdi, r12; call jump_mempcpy; 
0x2b68a: lea  rdi, [rax+0x20]; mov  rsi, qword [rbp-0xc0]; mov  rdx, rbx; mov  qword [rax], rdi; call jump_mempcpy; 
0x384c5: lea  r10, [rsp+0xf]; mov  rdx, rcx; mov  rsi, r13; mov  qword [rbp-0x118], r9; mov  r15, r10; and  r15, 0xfffffffffffffff0; mov  rdi, r15; mov  r13, r15; call jump_mempcpy; 
0x384c5: lea  r10, [rsp+0xf]; mov  rdx, rcx; mov  rsi, r13; mov  qword [rbp-0x118], r9; mov  r15, r10; and  r15, 0xfffffffffffffff0; mov  rdi, r15; mov  r13, r15; call jump_mempcpy; mov  rdx, rbx; mov  rsi, r14; mov  rdi, rax; call jump_mempcpy; 
0x37d8b: lea  rax, [rel 0x1bd440]; lea  r15, [rsp+0xf]; add  r14d, 0x1; movzx   ecx, byte [rax+rdi]; and  r15, 0xfffffffffffffff0; lea  rax, [rel 0x1bd460]  {"LC_COLLATE"}; mov  rdi, r15; add  rcx, rax; mov  qword [rbp-0xd8], rcx; call jump_mempcpy; 
0x5a704: mov  rcx, qword [rsp+0x20]; mov  rdx, r13; mov  rsi, r14; mov  rdi, rcx; mov  qword [rsp+0x8], rcx; call jump_mempcpy; 
0xb16b8: lea  rdx, [rbx-0x1]; mov  rsi, r12; mov  rdi, rbp; cmp  rdx, rax; cmova   rdx, rax; call jump_mempcpy; 
0x8dedd: mov  rsi, rcx; mov  rdx, rbx; mov  qword [rsp], rcx; call jump_mempcpy; 
0x85428: mov  edx, 0x10; lea  r11, [rsp+0x40]; mov  qword [rsp+0x28], r10; sub  rdx, rbp; mov  qword [rsp+0x20], rcx; cmp  rdx, rax; mov  qword [rsp+0x18], r8; cmova   rdx, rax; lea  rax, [r11+rbp]; mov  qword [rsp+0x10], r11; mov  rdi, rax; mov  qword [rsp], rax; mov  qword [rsp+0x8], rdx; call jump_mempcpy; 
0x3b74e: lea  rax, [rsp+0xf]; mov  rsi, r15; and  rax, 0xfffffffffffffff0; mov  rdi, rax; mov  qword [rbp-0xc0], rax; call sub_28450; mov  rdx, qword [rbp-0xe0]; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_mempcpy; 
0x3bd16: mov  rsi, r14; lea  rdi, [rax+0x38]; mov  rdx, r15; add  rbx, 0x1; mov  qword [rbp-0xc0], r10; call jump_mempcpy; 
0xab9ab: mov  rsi, qword [rsp+0x8]; lea  rdi, [rax+rbx]; mov  rdx, r13; call jump_mempcpy; 
0xaba06: mov  rdx, qword [rsp+0x68]; lea  rdi, [rax+r14]; mov  rsi, r15; call jump_mempcpy; 
0xabb2d: mov  rdx, qword [rsp+0x60]; mov  rsi, r15; lea  rdi, [rax+r14]; xor  r15d, r15d; call jump_mempcpy; 
0x84b41: mov  rdx, r13; lea  rdi, [r9+r14]; xor  esi, esi; sub  rdx, r12; call jump_wmemset; 
0x84bc1: mov  rdx, r13; lea  rdi, [r9+r14]; xor  esi, esi; xor  r15d, r15d; sub  rdx, r12; call jump_wmemset; 
0x8491d: mov  rdx, rcx; lea  rdi, [r13+r12]; xor  esi, esi; sub  rdx, r8; call jump_wmemset; 
0x5d579: mov  rdx, r15; lea  rdi, [r14+0x18]; mov  esi, 0x30; add  r15, 0x10; sub  rdx, rax; sar  rdx, 0x2; call jump_wmemset; 
0xc574a: sub  rbx, rax; lea  rdi, [r13+rax*4]; xor  esi, esi; mov  rdx, rbx; call jump_wmemset; 
0x1102f0: mov  rsi, r14; mov  rdi, rbx; call jump_strspn; 
0x11030e: mov  rsi, qword [rsp+0x38]; mov  rdi, rbp; call sub_28570; mov  rsi, r14; lea  r12, [rbp+rax]; mov  rdi, r12; call jump_strspn; 
0x11c8d2: mov  rsi, r12; mov  rdi, rbx; call jump_strspn; 
0x11c921: mov  rdi, rbx; mov  rsi, r12; call jump_strspn; 
0x11c961: mov  rdi, rbx; mov  rsi, r12; call jump_strspn; 
0x11c9a1: mov  rdi, rbx; mov  rsi, r12; call jump_strspn; 
0x616b6: sub  rax, rbx; lea  rsi, [rel data_1d886f]; sub  rax, 0x6; mov  qword [rsp], rax; add  rax, r13; mov  rdi, rax; mov  qword [rsp+0x20], rax; call jump_strspn; 
0xa93f1: mov  rsi, rbp; mov  rdi, rbx; call jump_strspn; 
0xf2dc7: mov  r14, qword [rsp+0x8]; mov  esi, dword [rsp+0x3c]; mov  rdi, r10; mov  qword [rsp+0x20], r10; mov  qword [rsp+0xb0], 0x0; mov  rdx, r14; sub  rdx, r10; call jump_memchr; 
0xf3d1f: mov  rdx, qword [rsp+0x8]; mov  esi, 0x2f; mov  rdi, r10; sub  rdx, r10; call jump_memchr; 
0x10ef57: mov  edx, 0x3; lea  rdi, [rel data_1d9fb7]; mov  qword [rsp+0x20], r9; mov  qword [rsp+0x18], rcx; mov  byte [rsp+0x60], r8b; call jump_memchr; 
0x10fd6e: lea  rbp, [r14+0x1]; mov  edx, 0x4; mov  qword [rsp+0x48], r10; lea  rdi, [rel data_1d9fbb]  {"-=?+"}; lea  r15, [r12+rbp]; mov  qword [rsp+0x20], r9; mov  r13d, 0x5; movsx   esi, byte [r15]; mov  qword [rsp+0x18], rcx; call jump_memchr; 
0x173c98: xor  esi, esi; mov  rdx, rbx; mov  rdi, r13; call jump_memchr; 
0x174218: xor  esi, esi; mov  rdx, rbx; mov  rdi, r13; call jump_memchr; 
0x12188f: mov  esi, 0xa; mov  rdi, rbx; lea  rbp, [rbx+rax]; call jump_memchr; 
0x1218c0: mov  rdx, rax; mov  esi, 0xa; mov  rdi, r14; add  rbp, r14; call jump_memchr; 
0x121a50: mov  rbx, r15; mov  esi, 0xa; mov  rdi, rbp; sub  rbx, rbp; mov  rdx, rbx; call jump_memchr; 
0x121b24: lea  r15, [rbp+rax]; mov  esi, 0xa; mov  rdi, r14; mov  rdx, r15; sub  rdx, r14; call jump_memchr; 
0x121b7b: mov  rdx, rax; mov  esi, 0xa; mov  rdi, rbp; add  r15, rbp; call jump_memchr; 
0x12da44: mov  r8, r14; mov  esi, 0xa; mov  rdi, rbp; sub  r8, rbp; mov  rdx, r8; mov  qword [rsp], r8; call jump_memchr; 
0x12dcd8: mov  r8, r14; mov  esi, 0xa; mov  rdi, rbp; sub  r8, rbp; mov  rdx, r8; mov  qword [rsp], r8; call jump_memchr; 
0x370ac: mov  rdx, r14; mov  esi, 0x2f; mov  rdi, r15; call jump_memchr; 
0x37125: mov  edx, 0x2; mov  esi, 0x2f; mov  rdi, r15; call jump_memchr; 
0xa9c30: endbr64 ; push r13; mov  r13, rdi; push r12; mov  r12, rcx; push rbp; mov  rbp, rsi; mov  esi, edx; mov  rdx, rcx; mov  rdi, rbp; call jump_memchr; 
0x52e19: mov  rbx, rsi; mov  rdi, r15; mov  esi, 0x2c; call sub_284d0; mov  esi, 0x3d; mov  rdi, r15; mov  rdx, rax; mov  r14, rax; mov  qword [rsp], rax; sub  rdx, r15; call jump_memchr; 
0x113bbd: mov  rdx, r13; mov  esi, 0x2f; mov  rdi, rbp; call jump_memchr; 
0x80448: cmp  rbx, r15; mov  esi, ebp; mov  rdi, r13; cmova   rbx, r15; mov  rdx, rbx; call jump_memchr; 
0x176acb: mov  rdi, qword [rbp-0x4c0]; mov  r14, rax; mov  esi, 0x5c; sub  r14, rdi; mov  rdx, r14; call jump_memchr; 
0xeee5b: mov  rdi, qword [rbp-0x4c0]; mov  r14, rax; mov  esi, 0x5c; sub  r14, rdi; mov  rdx, r14; call jump_memchr; 
0x80259: mov  esi, dword [rsp+0x1c]; mov  rdx, r14; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_memchr; 
0xaaf44: movzx   r8d, byte [rdx]; add  rsp, 0x128; mov  rdx, rsi; pop  rbx; pop  rbp; mov  esi, r8d; pop  r12; pop  r13; pop  r14; pop  r15; jmp  jump_memchr; 
0x72346: mov  rdi, qword [rbp+0x20]; mov  rdx, r12; sub  rdx, r13; lea  rsi, [rdi+r13]; call jump_memmove; 
0x721f0: mov  r15, rdi; mov  rbp, rdx; mov  r13, rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call sub_28490; lea  rcx, [r13+0x1]; mov  r13, rbp; mov  rsi, r12; sub  r13, r12; mov  rdi, r15; mov  qword [rsp], rcx; mov  r14, rax; mov  rdx, r13; call jump_memmove; 
0x722b6: sub  rdx, r15; mov  rsi, r15; sub  r12, rdx; mov  rdi, r12; call jump_memmove; 
0x77998: mov  rbx, rdx; mov  r12, rdx; lea  r13, [rcx+0x1]; mov  r14d, r8d; sub  rbx, rsi; mov  rdx, rbx; call jump_memmove; 
0x77a20: sub  rdx, rdi; mov  rsi, rdi; sub  r9, rdx; mov  rdi, r9; call jump_memmove; 
0x54957: mov  rdx, qword [rsp+0x50]; mov  rsi, qword [rsp+0x48]; mov  qword [rsp+0x28], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xf71b0: mov  edx, dword [rbx+0x2c]; mov  rdi, qword [rbx+0x10]; movsxd  rax, ebp; sub  edx, ebp; lea  rsi, [rdi+rax*4]; movsxd  rdx, edx; shl  rdx, 0x2; call jump_memmove; 
0xf72d0: mov  edx, dword [rbx+0x2c]; mov  rdi, qword [rbx+0x8]; movsxd  rsi, ebp; sub  edx, ebp; add  rsi, rdi; movsxd  rdx, edx; call jump_memmove; 
0xf732c: mov  edx, r15d; mov  rdi, qword [rbx+0x10]; movsxd  r14, ebp; sub  edx, ebp; lea  r13, [r14*4]; movsxd  rdx, edx; lea  rsi, [rdi+r13]; shl  rdx, 0x2; call jump_memmove; 
0xf732c: mov  edx, r15d; mov  rdi, qword [rbx+0x10]; movsxd  r14, ebp; sub  edx, ebp; lea  r13, [r14*4]; movsxd  rdx, edx; lea  rsi, [rdi+r13]; shl  rdx, 0x2; call jump_memmove; mov  edx, dword [rbx+0x2c]; mov  rdi, qword [rbx+0x8]; sub  edx, ebp; lea  rsi, [rdi+r14]; movsxd  rdx, edx; call jump_memmove; 
0xf4819: sub  eax, 0x1; cdqe ; neg  rax; shl  rax, 0x2; lea  rsi, [rdx+rax-0x4]; add  rax, rdx; add  rsi, r12; lea  rdi, [r12+rax]; call jump_memmove; 
0x121af8: mov  rsi, rbp; mov  rdx, rbx; lea  rbp, [r14+rbx]; mov  rdi, r14; call jump_memmove; 
0x12d9a8: mov  rdi, r12; mov  rdx, r14; mov  rsi, r13; sub  rdi, r15; sub  rdx, r13; xor  r15d, r15d; add  rdi, rbp; call jump_memmove; 
0x12da0f: lea  r13, [rbp+r12]; mov  rdx, r14; mov  rsi, rbp; sub  rdx, rbp; mov  rdi, r13; call jump_memmove; 
0x12db60: sub  r14, r12; lea  rdi, [r15+rsi]; mov  rsi, r12; mov  r13, rbp; mov  rdx, r14; call jump_memmove; 
0x12ddf0: lea  rdx, [r13+r8]; mov  rsi, r12; mov  rdi, rbp; mov  qword [rsp], r8; sub  rdx, r12; call jump_memmove; 
0x117680: lea  r13, [rax+0x70]; mov  rdx, r14; mov  rsi, r12; mov  rdi, r13; call jump_memmove; 
0x11780c: lea  r13, [rax+0x70]; mov  rdx, r14; mov  rsi, r12; mov  rdi, r13; call jump_memmove; 
0x117970: mov  rax, qword [r15+0x30]; mov  rdi, qword [rsp+0x50]; mov  rsi, r13; mov  qword [r15+0x28], rax; movzx   eax, word [r15+0x42]; lea  rdx, [rax+0x1]; call jump_memmove; 
0x8d690: mov  rdx, rbp; add  rsi, rbp; mov  rdi, r15; neg  rdx; call jump_memmove; 
0x5139f: mov  rdx, qword [rsp+0x50]; lea  rdi, [r8+r9]; mov  rsi, r15; mov  qword [rsp+0x40], rcx; mov  qword [rsp+0x20], r9; add  rdx, 0x1; mov  qword [rsp+0x28], r8; call jump_memmove; 
0x115a10: mov  rsi, qword [rsp+0x50]; mov  rbx, qword [rsp+0x10]; sub  rbp, rsi; mov  rdi, rbx; mov  rdx, rbp; call jump_memmove; 
0x4edce: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x18], rcx; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4ffa7: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  dword [rsp+0x28], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, r12; lea  rdi, [r12+rax]; call jump_memmove; 
0xac01d: mov  rdx, rbp; mov  rdi, r14; call jump_memmove; 
0xd4d84: mov  rdx, qword [rsp+0x48]; mov  rsi, qword [rsp+0x38]; mov  qword [rsp+0x10], rcx; mov  rdi, qword [rsp+0x40]; call jump_memmove; 
0xd60f8: lea  eax, [rbp-0x1]; movsxd  rcx, ebp; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  rdx, [rcx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rcx*8-0x8]; add  rax, rdx; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0x57ef2: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], rcx; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x591c6: lea  eax, [r15-0x1]; movsxd  rdx, r15d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0xab459: push r12; mov  r12, rdi; mov  rdi, rdx; push rbp; mov  rbp, rdx; push rbx; mov  rbx, rsi; call sub_28490; mov  rdx, qword [rbx]; mov  rcx, rbp; sub  rcx, qword [r12]; add  rax, 0x1; mov  rdi, rbp; sub  rdx, rax; lea  rsi, [rbp+rax]; mov  qword [rbx], rdx; sub  rdx, rcx; call jump_memmove; 
0x11f5dd: mov  rdx, rbx; mov  rsi, r8; mov  dword [rsp+0xc], ecx; sub  rdx, r12; call jump_memmove; 
0x115f7b: sub  r12, 0xd; lea  rsi, [rbp+0xd]; mov  rdi, rbp; mov  rdx, r12; call jump_memmove; 
0x57ef2: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], rcx; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x591c6: lea  eax, [r15-0x1]; movsxd  rdx, r15d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0x11f07b: mov  rdx, rbx; mov  rsi, r8; mov  dword [rsp+0x8], ecx; sub  rdx, r12; call jump_memmove; 
0xcafe4: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xcc29a: lea  eax, [rbx-0x1]; movsxd  rcx, ebx; mov  dword [rsp+0x8], r9d; mov  dword [rsp+0x18], eax; cdqe ; lea  rdx, [rcx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rcx*8-0x8]; add  rax, rdx; add  rsi, rbp; lea  rdi, [rbp+rax]; call jump_memmove; 
0x4923a: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], r11; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4a64d: lea  eax, [r13-0x1]; movsxd  rdx, r13d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0x118098: lea  rdi, [rax+0x70]; mov  rdx, r15; mov  rsi, r12; call jump_memmove; 
0x11818e: lea  rdi, [r14+0x70]; mov  rdx, r15; mov  rsi, r12; call jump_memmove; 
0xc5b70: endbr64 ; shl  rdx, 0x2; jmp  jump_memmove; 
0xd4d84: mov  rdx, qword [rsp+0x48]; mov  rsi, qword [rsp+0x38]; mov  qword [rsp+0x10], rcx; mov  rdi, qword [rsp+0x40]; call jump_memmove; 
0xd60f8: lea  eax, [rbp-0x1]; movsxd  rcx, ebp; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  rdx, [rcx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rcx*8-0x8]; add  rax, rdx; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0x4c14a: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], r11; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4d48e: lea  eax, [r13-0x1]; movsxd  rdx, r13d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0x129988: lea  rdx, [rdx+rdx*2]; mov  rsi, r11; lea  rdi, [r8+rax+0x30]; mov  qword [rbp-0x118], r8; shl  rdx, 0x4; mov  qword [rbp-0x110], r11; movaps  xmmword [rbp-0x130], xmm0; call jump_memmove; 
0x129c10: lea  rdx, [rdx+rdx*2]; lea  rdi, [r8+rax+0x30]; mov  rsi, r12; mov  qword [rbp-0xf8], r8; shl  rdx, 0x4; movaps  xmmword [rbp-0x110], xmm0; call jump_memmove; 
0x4923a: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], r11; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4a64d: lea  eax, [r13-0x1]; movsxd  rdx, r13d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0x154f23: mov  rdi, rbp; call sub_28490; mov  rsi, rbp; mov  rdi, r14; mov  rdx, rax; call jump_memmove; 
0x57ef2: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], rcx; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x591c6: lea  eax, [r15-0x1]; movsxd  rdx, r15d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0xab5a7: mov  r8, qword [rsp+0x8]; sub  rbx, qword [r12]; mov  qword [rsp+0x18], rax; lea  rbp, [rax+rbx]; mov  rdx, qword [rsp+0x10]; lea  rdi, [rbp+r8]; mov  rsi, rbp; call jump_memmove; 
0xab5a7: mov  r8, qword [rsp+0x8]; sub  rbx, qword [r12]; mov  qword [rsp+0x18], rax; lea  rbp, [rax+rbx]; mov  rdx, qword [rsp+0x10]; lea  rdi, [rbp+r8]; mov  rsi, rbp; call jump_memmove; mov  rdx, qword [rsp+0x8]; mov  rsi, r15; mov  rdi, rbp; call jump_memmove; 
0x4edce: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x18], rcx; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4ffa7: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  dword [rsp+0x28], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, r12; lea  rdi, [r12+rax]; call jump_memmove; 
0xcd82a: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xcec56: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  rdi, qword [rsp+0x8]; mov  dword [rsp+0x18], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, rdi; add  rdi, rax; call jump_memmove; 
0x148a46: mov  rdx, r12; mov  rsi, rbp; sub  rdx, rbp; sub  rbx, rdx; mov  rdi, rbx; sub  rbx, rbp; call jump_memmove; 
0x4c14a: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], r11; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4d48e: lea  eax, [r13-0x1]; movsxd  rdx, r13d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0xcafe4: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xcc29a: lea  eax, [rbx-0x1]; movsxd  rcx, ebx; mov  dword [rsp+0x8], r9d; mov  dword [rsp+0x18], eax; cdqe ; lea  rdx, [rcx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rcx*8-0x8]; add  rax, rdx; add  rsi, rbp; lea  rdi, [rbp+rax]; call jump_memmove; 
0x4edce: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x18], rcx; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4ffa7: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  dword [rsp+0x28], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, r12; lea  rdi, [r12+rax]; call jump_memmove; 
0x148cd7: mov  rdx, rbp; mov  rsi, r13; sub  rdx, r13; sub  rbx, rdx; mov  rdi, rbx; sub  rbx, r13; call jump_memmove; 
0x1187d6: movzx   eax, word [r12+0x42]; mov  rdi, qword [rbx+0x20]; lea  r13, [r12+0x70]; mov  rsi, r13; mov  word [r12+0x40], ax; lea  rdx, [rax+0x1]; call jump_memmove; 
0x118812: lea  rbp, [rax+0x1]; mov  rdi, rbp; call sub_28490; mov  rsi, rbp; mov  rdi, r13; lea  edx, [rax+0x1]; mov  r14, rax; movsxd  rdx, edx; call jump_memmove; 
0x118883: add  rdi, rdx; lea  rsi, [r12+0x70]; mov  byte [rdi], 0x2f; movzx   eax, word [r12+0x42]; add  rdi, 0x1; lea  rdx, [rax+0x1]; call jump_memmove; 
0xc868a: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xc9a16: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  dword [rsp+0x8], r9d; mov  dword [rsp+0x18], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, rbp; lea  rdi, [rbp+rax]; call jump_memmove; 
0xc868a: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xc9a16: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  dword [rsp+0x8], r9d; mov  dword [rsp+0x18], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, rbp; lea  rdi, [rbp+rax]; call jump_memmove; 
0xc868a: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xc9a16: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  dword [rsp+0x8], r9d; mov  dword [rsp+0x18], eax; cdqe ; lea  r11, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r11; mov  rdx, r11; add  rsi, rbp; lea  rdi, [rbp+rax]; call jump_memmove; 
0x4c14a: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], r11; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4d48e: lea  eax, [r13-0x1]; movsxd  rdx, r13d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0xcd82a: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xcec56: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  rdi, qword [rsp+0x8]; mov  dword [rsp+0x18], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, rdi; add  rdi, rax; call jump_memmove; 
0x4923a: mov  rdx, qword [rsp+0x40]; mov  rsi, qword [rsp+0x30]; mov  qword [rsp+0x10], r11; mov  rdi, qword [rsp+0x38]; call jump_memmove; 
0x4a64d: lea  eax, [r13-0x1]; movsxd  rdx, r13d; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0xcd82a: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xcec56: lea  eax, [rbx-0x1]; movsxd  rdx, ebx; mov  rdi, qword [rsp+0x8]; mov  dword [rsp+0x18], eax; cdqe ; lea  r10, [rdx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rdx*8-0x8]; add  rax, r10; mov  rdx, r10; add  rsi, rdi; add  rdi, rax; call jump_memmove; 
0x85400: sub  rbp, rax; mov  rsi, r8; mov  rdx, rbp; call jump_memmove; 
0x854c8: mov  rdi, r8; mov  qword [rsp], rdx; call jump_memmove; 
0x85563: mov  rdx, qword [rbx+0x10]; mov  rdi, qword [rbx+0x38]; sub  rdx, rsi; call jump_memmove; 
0x1358d9: shl  rdx, 0x2; jmp  jump_memmove; 
0xd4d84: mov  rdx, qword [rsp+0x48]; mov  rsi, qword [rsp+0x38]; mov  qword [rsp+0x10], rcx; mov  rdi, qword [rsp+0x40]; call jump_memmove; 
0xd60f8: lea  eax, [rbp-0x1]; movsxd  rcx, ebp; mov  qword [rsp+0x10], r9; mov  dword [rsp+0x20], eax; cdqe ; lea  rdx, [rcx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rcx*8-0x8]; add  rax, rdx; add  rsi, r14; lea  rdi, [r14+rax]; call jump_memmove; 
0xcafe4: mov  rdx, qword [rsp+0x38]; mov  rsi, qword [rsp+0x28]; mov  qword [rsp+0x8], rcx; mov  rdi, qword [rsp+0x30]; call jump_memmove; 
0xcc29a: lea  eax, [rbx-0x1]; movsxd  rcx, ebx; mov  dword [rsp+0x8], r9d; mov  dword [rsp+0x18], eax; cdqe ; lea  rdx, [rcx*8]; neg  rax; shl  rax, 0x3; lea  rsi, [rax+rcx*8-0x8]; add  rax, rdx; add  rsi, rbp; lea  rdi, [rbp+rax]; call jump_memmove; 
0x823c8: sar  rbx, 0x2; mov  esi, ebp; mov  rdi, r13; cmp  rbx, r15; cmova   rbx, r15; mov  rdx, rbx; call jump_wmemchr; 
0x110637: mov  rsi, qword [rbx]; add  rbx, 0x8; call jump___stpcpy; 
0x2c080: mov  rsi, r8; mov  rdi, r15; call jump___stpcpy; 
0x155545: mov  dword [rsp], 0x73736e5f; lea  rdi, [rsp+0x5]; mov  rsi, r13; mov  byte [rsp+0x4], 0x5f; call jump___stpcpy; 
0x1709bd: mov  rsi, rbx; mov  rdi, r12; call jump___stpcpy; 
0x1709d1: mov  byte [rax+0x1], 0x1; lea  rdi, [rax+0x2]; mov  rsi, r15; call jump___stpcpy; 
0x1709f2: mov  byte [rdx], 0x1; mov  rsi, r14; call jump___stpcpy; 
0x170a0e: mov  byte [rdi], 0x1; mov  rsi, r13; mov  rdi, rbx; call jump___stpcpy; 
0x14d8c7: lea  rcx, [rsp+0x40]; mov  rsi, r15; mov  qword [rsp+0x38], rdx; mov  rdi, rcx; mov  qword [rsp+0x30], rcx; call jump___stpcpy; 
0x36643: movzx   esi, byte [rbp+r15]; add  rsi, rbx; call jump___stpcpy; 
0x36643: movzx   esi, byte [rbp+r15]; add  rsi, rbx; call jump___stpcpy; mov  rsi, r14; mov  byte [rax], 0x3d; lea  rdi, [rax+0x1]; call jump___stpcpy; 
0x366aa: movzx   esi, byte [rbp+r14]; mov  r15, qword [r12+r14*8]; add  rsi, rbx; call jump___stpcpy; 
0x366aa: movzx   esi, byte [rbp+r14]; mov  r15, qword [r12+r14*8]; add  rsi, rbx; call jump___stpcpy; mov  rsi, r15; mov  byte [rax], 0x3d; lea  rdi, [rax+0x1]; call jump___stpcpy; 
0x3b74e: lea  rax, [rsp+0xf]; mov  rsi, r15; and  rax, 0xfffffffffffffff0; mov  rdi, rax; mov  qword [rbp-0xc0], rax; call jump___stpcpy; 
0x39830: mov  qword [r14+rbx*8+0x80], r15; mov  rdi, r15; call jump___stpcpy; 
0x405e7: mov  rsi, r12; mov  rdi, rax; mov  rbp, r15; call jump___stpcpy; 
0x116d00: mov  rdx, r15; mov  qword [rsp+0x30], r14; xor  esi, esi; lea  r14, [rax+r15]; mov  qword [rsp+0x10], rax; mov  qword [rsp+0x28], r14; call sub_28670; mov  rsi, r13; mov  rdi, r14; call jump___stpcpy; 
0x13db3b: lea  r13, [rsp+0xf]; mov  rsi, r12; and  r13, 0xfffffffffffffff0; mov  rdi, r13; call jump___stpcpy; 
0xab2f4: call jump___stpcpy; 
0x391a5: mov  qword [rbx], r15; mov  rdi, r15; call jump___stpcpy; 
0x3948e: mov  qword [rbx+r13*8+0x80], rdi; call jump___stpcpy; 
0x3de98: mov  byte [rbp+r12-0x1], 0x2f; lea  rdi, [rbp+r12]; mov  rsi, r14; call jump___stpcpy; 
0x3e250: mov  byte [rax], 0x40; mov  rsi, qword [rsp+0x90]; lea  rdi, [rax+0x1]; call jump___stpcpy; 
0x3e270: mov  byte [rax], 0x2e; mov  rsi, qword [rsp+0x88]; lea  rdi, [rax+0x1]; call jump___stpcpy; 
0x3e290: mov  byte [rax], 0x2e; mov  rsi, qword [rsp+0x80]; lea  rdi, [rax+0x1]; call jump___stpcpy; 
0x3e2b0: mov  byte [rax], 0x5f; mov  rsi, qword [rsp+0x18]; lea  rdi, [rax+0x1]; call jump___stpcpy; 
0x116d00: mov  rdx, r15; mov  qword [rsp+0x30], r14; xor  esi, esi; lea  r14, [rax+r15]; mov  qword [rsp+0x10], rax; mov  qword [rsp+0x28], r14; call sub_28670; mov  rsi, r13; mov  rdi, r14; call jump___stpcpy; 
0x116d00: mov  rdx, r15; mov  qword [rsp+0x30], r14; xor  esi, esi; lea  r14, [rax+r15]; mov  qword [rsp+0x10], rax; mov  qword [rsp+0x28], r14; call sub_28670; mov  rsi, r13; mov  rdi, r14; call jump___stpcpy; 
0x14869f: mov  rsi, r12; mov  rdi, r10; call jump___stpcpy; 
0x159d9c: lea  rdx, [rsp+0xf]; mov  rsi, r12; mov  dword [rbp-0x60], ecx; and  rdx, 0xfffffffffffffff0; mov  rdi, rdx; mov  qword [rbp-0x58], rdx; call jump___stpcpy; 
0x159e2f: lea  rdx, [rsp+0xf]; mov  rsi, r12; and  rdx, 0xfffffffffffffff0; mov  rdi, rdx; mov  qword [rbp-0x58], rdx; call jump___stpcpy; 
0x3b74e: lea  rax, [rsp+0xf]; mov  rsi, r15; and  rax, 0xfffffffffffffff0; mov  rdi, rax; mov  qword [rbp-0xc0], rax; call jump___stpcpy; 
0xf1f18: lea  rsi, [r11+0x4]; mov  rdx, rbx; mov  rdi, r13; mov  qword [rsp+0x40], r11; mov  qword [rsp+0x38], rsi; call jump_wmemcmp; 
0xf1f78: mov  rdi, qword [rsp+0x60]; mov  qword [rsp+0x88], r11; mov  qword [rsp+0x40], rcx; mov  qword [rsp+0x38], rdx; call jump_wmemcmp; 
0xf2165: lea  rsi, [r12+0x4]; mov  dword [rsp+0xb0], r8d; mov  dword [rsp+0xa8], r10d; mov  qword [rsp+0xa0], rdx; mov  qword [rsp+0x98], rdi; call jump_wmemcmp; 
0x15c1ab: mov  rdi, r12; mov  qword [rsp+0x8], rcx; call fclose; mov  rcx, qword [rsp+0x8]; mov  rdx, r14; mov  rdi, rbp; mov  r12, qword [rsp+0x10]; mov  byte [rcx], 0x0; mov  rsi, r12; call jump_strncpy; 
0x5209d: mov  rsi, qword [r11+0x40]; mov  edx, 0x3; mov  qword [rsp+0x60], r9; lea  rdi, [rsp+0x1f4]; mov  dword [rsp+0x58], ecx; mov  qword [rsp+0x30], r11; mov  qword [rsp+0x10], rsi; call jump_strncpy; 
0x171d60: lea  rsi, [rsp+0x315]; lea  rdi, [rsp+0x18]; mov  edx, 0x20; call jump_strncpy; 
0x12c3d0: endbr64 ; mov  r9, rdi; mov  rdi, rdx; push r12; mov  rdx, rcx; lea  r12, [rdi+rcx-0x1]; push rbp; mov  rbp, r8; push rbx; mov  rbx, rsi; mov  rsi, r9; mov  byte [r12], 0x0; call jump_strncpy; 
0x173f50: push r12; push rbp; mov  rbp, rdi; sub  rsp, 0x338; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x328], rax; xor  eax, eax; lea  r12, [rsp+0x20]; call setutent; mov  edx, 0x7; lea  rdi, [rsp+0x28]; mov  rsi, rbp; mov  word [rsp+0x20], dx; mov  edx, 0x20; call jump_strncpy; 
0x14a4f4: mov  byte [rdx], 0x0; mov  rsi, r15; lea  rdx, [r14-0x1]; mov  rdi, r13; call jump_strncpy; 
0x134af9: jmp  jump_strncpy; 
0x15d91b: movdqa  xmm1, xmmword [rsp+0x20]; mov  qword [rbx+0x20], 0x1; mov  edx, 0xff; mov  rsi, r12; mov  rdi, qword [rbx+0x28]; movups  xmmword [rbx+0x10], xmm1; call jump_strncpy; 
0x5a220: lea  rdx, [rel 0x21b9b8]; test rbp, rbp; cmove   rbp, rdx; mov  edx, 0x8; mov  byte [rbp+0x8], 0x0; mov  rsi, qword [rax]; mov  rdi, rbp; call jump_strncpy; 
0x173dae: lea  rdi, [rsp+0x18]; mov  edx, 0x20; call jump_strncpy; 
0x1683f8: mov  rdx, rbx; mov  rsi, rbp; mov  rdi, r12; call jump_strncpy; 
0x171be8: call setutent; lea  r12, [rsp+0x10]; lea  rdi, [rsp+0x18]; mov  edx, 0x20; lea  rsi, [rsp+0x315]; call jump_strncpy; 
0x171c40: mov  rax, qword [rsp+0x8]; lea  r12, [rel 0x227c60]; mov  edx, 0x20; mov  rdi, r12; lea  rsi, [rax+0x2c]; call jump_strncpy; 
0x12d828: lea  r13, [r9+r12-0x1]; mov  rsi, rdi; mov  rdx, r12; mov  rdi, r9; mov  byte [r13], 0x0; call jump_strncpy; 
0x140840: mov  r12, rsp; mov  rsi, rbp; mov  edx, 0x10; mov  rdi, r12; call jump_strncpy; 
0x167fa1: mov  rbp, rsp; mov  rsi, rdx; mov  edx, 0xff; mov  rdi, rbp; call jump_strncpy; 
0x140bf3: mov  edx, 0x10; mov  rsi, r13; mov  rdi, r12; call jump_strncpy; 
0x1740b0: endbr64 ; push r14; mov  ecx, 0x30; mov  r14, rdi; push r13; mov  r13, rdx; push r12; push rbp; mov  rbp, rsi; sub  rsp, 0x1a8; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x198], rax; xor  eax, eax; lea  r12, [rsp+0x10]; mov  rdi, r12; rep stosq qword [rdi]; call __getpid; cmp  byte [rbp], 0x1; lea  rdi, [rsp+0x18]; mov  rsi, r14; mov  dword [rsp+0x14], eax; mov  eax, 0x7; mov  edx, 0x20; adc  ax, 0x0; mov  word [rsp+0x10], ax; call jump_strncpy; 
0x1740b0: endbr64 ; push r14; mov  ecx, 0x30; mov  r14, rdi; push r13; mov  r13, rdx; push r12; push rbp; mov  rbp, rsi; sub  rsp, 0x1a8; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x198], rax; xor  eax, eax; lea  r12, [rsp+0x10]; mov  rdi, r12; rep stosq qword [rdi]; call __getpid; cmp  byte [rbp], 0x1; lea  rdi, [rsp+0x18]; mov  rsi, r14; mov  dword [rsp+0x14], eax; mov  eax, 0x7; mov  edx, 0x20; adc  ax, 0x0; mov  word [rsp+0x10], ax; call jump_strncpy; lea  rdi, [rsp+0x3c]; mov  edx, 0x20; mov  rsi, rbp; call jump_strncpy; 
0x1740b0: endbr64 ; push r14; mov  ecx, 0x30; mov  r14, rdi; push r13; mov  r13, rdx; push r12; push rbp; mov  rbp, rsi; sub  rsp, 0x1a8; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x198], rax; xor  eax, eax; lea  r12, [rsp+0x10]; mov  rdi, r12; rep stosq qword [rdi]; call __getpid; cmp  byte [rbp], 0x1; lea  rdi, [rsp+0x18]; mov  rsi, r14; mov  dword [rsp+0x14], eax; mov  eax, 0x7; mov  edx, 0x20; adc  ax, 0x0; mov  word [rsp+0x10], ax; call jump_strncpy; lea  rdi, [rsp+0x3c]; mov  edx, 0x20; mov  rsi, rbp; call jump_strncpy; mov  edx, 0x100; lea  rdi, [rsp+0x5c]; mov  rsi, r13; call jump_strncpy; 
0x16809b: mov  edx, 0x40; mov  rdi, r12; call jump_strncpy; 
0x1680c6: lea  r14, [rsp+0x50]; mov  edx, 0x40; mov  rsi, r13; mov  rdi, r14; call jump_strncpy; 
0x168165: lea  r14, [rsp+0x50]; lea  rsi, [rax+0x1]; mov  edx, 0x40; mov  rdi, r14; call jump_strncpy; 
0x10f735: mov  rdi, rbp; call jump_strlen; 
0x11000c: mov  rdi, rbp; mov  qword [rsp+0x40], r11; mov  qword [rsp+0x20], r10; call jump_strlen; 
0x11020b: mov  rdi, rbp; mov  byte [rsp+0xe4], 0x0; call jump_strlen; 
0x1105d0: call jump_strlen; 
0x198840: jmp  jump_strlen; 
0x2cc23: lea  r15, [r14+0x13]; mov  rdi, r15; call jump_strlen; 
0x14aae6: lea  rdi, [rel 0x1d6340]  {"order"}; call jump_strlen; 
0x2bed1: mov  rdi, r13; call jump_strlen; 
0x2bf6c: mov  rdi, rax; call jump_strlen; 
0xb1880: endbr64 ; push r14; mov  r14, rdx; push r13; mov  r13, rsi; push r12; mov  r12, rdi; push rbp; sub  rsp, 0x8; call jump_strlen; 
0x12e210: endbr64 ; push r12; mov  r12, rsi; push rbp; mov  rbp, rdi; mov  rdi, rsi; push rbx; call jump_strlen; 
0x724c7: mov  rdx, qword [rel data_218f70]; sub  eax, 0x7; movsx   rax, al; mov  rdx, qword [fs:rdx]; mov  rdx, qword [rdx]; mov  r14, qword [rdx+rax*8+0x40]; mov  rdi, r14; call jump_strlen; 
0x7255e: cmp  al, 0x2e; mov  rdi, qword [rsp+0x8]; cmove   rdi, qword [rsp+0x10]; mov  qword [rsp+0x18], rdi; call jump_strlen; 
0x721f0: mov  r15, rdi; mov  rbp, rdx; mov  r13, rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0xd3430: mov  rdi, r15; lea  r14, [rsp+0x28]; lea  r13, [rsp+0x30]; call jump_strlen; 
0xf2290: push r15; mov  r15d, edi; push r14; push r13; mov  r13, 0xffffffff3ffff9fe; push r12; push rbp; push rbx; mov  rbx, rsi; lea  r12, [rbx+0x1]; mov  r14, r12; sub  rsp, 0xa8; mov  dword [rsp+0x34], edi; mov  rdi, rsi; mov  qword [rsp+0x18], rdx; mov  qword [rsp+0x20], rcx; mov  dword [rsp+0x38], r8d; mov  dword [rsp+0x28], r9d; mov  byte [rsp+0x3f], r8b; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x98], rax; xor  eax, eax; call jump_strlen; 
0x107ea5: mov  rdi, r12; call jump_strlen; 
0x108253: mov  r15, qword [rbp-0x50]; mov  rbx, qword [r15+0x20]; mov  rdi, rbx; call jump_strlen; 
0x1713a0: endbr64 ; push rbp; mov  rbp, rsp; push r15; push r14; mov  r14, rsi; push r13; push r12; mov  r12d, edi; mov  rdi, rsi; push rbx; sub  rsp, 0x178; mov  qword [rbp-0x188], rdx; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strlen; 
0x102778: mov  r12, qword [rsp+0xf8]; mov  rdi, r12; call jump_strlen; 
0x1032cf: mov  rdi, qword [rsp+0x108]; mov  qword [rsp+0x90], rdi; call jump_strlen; 
0x103728: mov  rdi, r13; call jump_strlen; 
0x103c1c: mov  rdi, qword [rsp+0xf8]; mov  qword [rsp+0x90], rdi; call jump_strlen; 
0x14b080: endbr64 ; push r15; push r14; push r13; push r12; mov  r12, rdi; push rbp; push rbx; sub  rsp, 0x8; call jump_strlen; 
0x14b0aa: mov  r15, qword [r13+0x20]; mov  rbx, rax; mov  rdi, r15; call jump_strlen; 
0x14b0c4: mov  r15, qword [r13+0x28]; mov  rdi, r15; call jump_strlen; 
0x14b0df: mov  r15, qword [r13+0x30]; mov  rdi, r15; call jump_strlen; 
0x14b0fa: mov  r13, qword [r13+0x38]; mov  rdi, r13; call jump_strlen; 
0x150e00: mov  rdi, qword [rbp]; add  rbp, 0x8; call jump_strlen; 
0x15054a: mov  r14, qword [rbp+0x18]; mov  qword [rsp+0x8], rdi; call jump_strlen; 
0x15058c: mov  qword [rsp+0x8], rdi; call jump_strlen; 
0x1505cc: mov  rdi, r15; call jump_strlen; 
0x150604: mov  rdi, r15; call jump_strlen; 
0x150638: mov  rdi, r15; call jump_strlen; 
0x16fbf4: mov  rdi, r15; call jump_strlen; 
0x35f78: mov  r14, qword [rsp+0x8]; mov  rdi, r14; call jump_strlen; 
0x35480: push rbp; mov  rbp, rsp; push r15; push r14; push r13; mov  r13, rdi; push r12; mov  r12, rsi; push rbx; mov  rbx, rdx; sub  rsp, 0x18; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strlen; 
0x35480: push rbp; mov  rbp, rsp; push r15; push r14; push r13; mov  r13, rdi; push r12; mov  r12, rsi; push rbx; mov  rbx, rdx; sub  rsp, 0x18; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strlen; mov  rdi, r12; mov  r14, rax; call jump_strlen; 
0x3d884: mov  rdi, r12; mov  qword [rbp-0x1f8], rcx; call jump_strlen; 
0x3d884: mov  rdi, r12; mov  qword [rbp-0x1f8], rcx; call jump_strlen; mov  rdi, r13; lea  rdx, [rax+0x1]; mov  qword [rbp-0x1e8], rdx; call jump_strlen; 
0x16f2eb: mov  rdi, r12; xor  ebx, ebx; call jump_strlen; 
0x10d5e1: mov  rbx, rsi; mov  r13, rdi; mov  rdi, rcx; mov  r14, rdx; mov  r12, rcx; call jump_strlen; 
0xdc560: endbr64 ; push r15; movq xmm1, rsi; movq xmm0, rdi; push r14; punpcklqdq xmm0, xmm1; mov  r14, rdi; push r13; mov  r13, rsi; push r12; mov  r12d, ecx; push rbp; push rbx; mov  ebx, edx; sub  rsp, 0x38; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x28], rax; xor  eax, eax; movaps  xmmword [rsp], xmm0; call jump_strlen; 
0xdc560: endbr64 ; push r15; movq xmm1, rsi; movq xmm0, rdi; push r14; punpcklqdq xmm0, xmm1; mov  r14, rdi; push r13; mov  r13, rsi; push r12; mov  r12d, ecx; push rbp; push rbx; mov  ebx, edx; sub  rsp, 0x38; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x28], rax; xor  eax, eax; movaps  xmmword [rsp], xmm0; call jump_strlen; mov  rdi, r13; lea  rbp, [rax+0x1]; call jump_strlen; 
0xe5a62: lea  r14, [rbp+0x20]; mov  dword [rbx+0x40], eax; add  rbx, 0x48; mov  qword [rbx-0x28], r14; mov  rdi, r14; call jump_strlen; 
0xe5a62: lea  r14, [rbp+0x20]; mov  dword [rbx+0x40], eax; add  rbx, 0x48; mov  qword [rbx-0x28], r14; mov  rdi, r14; call jump_strlen; lea  r14, [r14+rax+0x1]; mov  qword [rbx-0x20], r14; mov  rdi, r14; call jump_strlen; 
0x1554f5: mov  rdi, r13; mov  rbx, rsp; call jump_strlen; 
0x15858d: mov  rdi, r13; call jump_strlen; 
0x15c174: mov  rdi, rbp; add  rbx, 0x8; call jump_strlen; 
0x15cd70: push r15; mov  r15, rdx; push r14; mov  r14d, ecx; push r13; push r12; mov  r12d, esi; push rbp; push rbx; sub  rsp, 0x18; mov  qword [rsp], rdi; mov  rdi, rdx; call jump_strlen; 
0x1280a0: endbr64 ; push rbp; mov  rbp, rsi; push rbx; mov  rbx, rdi; mov  rdi, rsi; sub  rsp, 0x8; call jump_strlen; 
0x1645ff: mov  rax, qword [rbp+0x30]; lea  rdi, [rbx+0x84]; mov  qword [rbx+0x7c], rax; mov  qword [rsp+0x18], rdi; call jump_strlen; 
0x171ff4: mov  rbp, qword [rsp+0x20]; mov  rdi, rbp; call jump_strlen; 
0x106bd0: push rbp; mov  rbp, rsp; push r15; mov  r15, rsi; push r14; mov  r14, r9; push r13; mov  r13, rdi; mov  rdi, rsi; push r12; mov  r12, r8; push rbx; mov  rbx, rcx; sub  rsp, 0x318; mov  dword [rbp-0x300], edx; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strlen; 
0x106f55: mov  rdi, r13; mov  qword [rbp-0x2e8], rdx; call jump_strlen; 
0x107023: mov  rdi, r13; call jump_strlen; 
0x106ab0: push r15; push r14; push r13; push r12; push rbp; push rbx; mov  rbx, rsi; sub  rsp, 0x28; mov  qword [rsp+0x10], rdi; mov  qword [rsp+0x8], rdx; call jump_strlen; 
0x106b00: mov  r13, qword [rbx+r14*8]; mov  rdi, r13; call jump_strlen; 
0xe5d80: mov  qword [rbx], rbp; mov  rdi, rbp; add  rbx, 0x8; call jump_strlen; 
0x128bb4: mov  rdi, r12; mov  rbx, rsp; call jump_strlen; 
0x12efda: lea  eax, [rcx+rdx]; mov  dword [rsp+0x48], edx; lea  rdi, [rax+rax*2]; mov  dword [rsp+0x40], ecx; shl  rdi, 0x4; mov  dword [rsp+0x20], eax; call malloc; mov  r8, qword [r15+0x10]; mov  r12, rax; mov  rdi, r8; mov  qword [rsp+0x28], r8; call jump_strlen; 
0x12efda: lea  eax, [rcx+rdx]; mov  dword [rsp+0x48], edx; lea  rdi, [rax+rax*2]; mov  dword [rsp+0x40], ecx; shl  rdi, 0x4; mov  dword [rsp+0x20], eax; call malloc; mov  r8, qword [r15+0x10]; mov  r12, rax; mov  rdi, r8; mov  qword [rsp+0x28], r8; call jump_strlen; mov  r13, qword [rbp+0x10]; mov  eax, eax; mov  rdi, r13; mov  r14, rax; mov  qword [rsp+0x30], rax; call jump_strlen; 
0x12e63c: mov  rdi, rbp; call jump_strlen; 
0x12e790: mov  rdi, r15; call jump_strlen; 
0x12f2d1: mov  r11, rdi; mov  rdi, qword [rdi+0x10]; mov  qword [rbp-0x48], r11; call jump_strlen; 
0x12f6aa: mov  rdi, rax; mov  qword [rbp-0x68], r11; mov  qword [rbp-0x60], r9; mov  qword [rbp-0x58], r10; mov  qword [rbp-0x48], rax; call jump_strlen; 
0x12f869: mov  qword [rbp+0x18], rcx; mov  rdi, r14; call jump_strlen; 
0x130e0a: mov  rsi, qword [rbp-0xd0]; mov  edi, dword [rel 0x2194d0]; call sub_12f9f0; mov  rax, qword [rbp-0x80]; mov  rsi, qword [r14]; mov  edx, 0x5; mov  rax, qword [rax]; mov  rdi, qword [rax+0x30]; call dcgettext; mov  rdi, rax; mov  r15, rax; call jump_strlen; 
0x130fdf: mov  rdi, r13; call jump_strlen; 
0x1319f4: mov  rdi, r13; call jump_strlen; 
0x131ce1: mov  rdi, qword [r14+0x30]; mov  edx, 0x5; lea  rsi, [rel 0x1db7cd]  {" [OPTION...]"}; call dcgettext; mov  rdi, rax; mov  qword [rbp-0xc0], rax; call jump_strlen; 
0x131e0e: mov  rsi, qword [rbp-0xd0]; mov  edi, dword [rel 0x2194d0]; call sub_12f9f0; mov  rsi, qword [r14]; mov  edx, 0x5; xor  edi, edi; call dcgettext; mov  rdi, rax; mov  r15, rax; call jump_strlen; 
0x89586: mov  rcx, qword [rdx]; add  rbx, 0x2; mov  rdi, rcx; mov  qword [rbp-0x88], rcx; call jump_strlen; 
0x1541e9: mov  rdi, rbp; call jump_strlen; 
0x16f0e0: endbr64 ; push r15; mov  r15, r9; push r14; mov  r14, r8; push r13; mov  r13, rdx; push r12; xor  r12d, r12d; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rcx; sub  rsp, 0x8; cmp  esi, 0xa; sete r12b; call jump_strlen; 
0x16f080: endbr64 ; push r15; mov  r15, r9; push r14; mov  r14, r8; push r13; mov  r13, rcx; push r12; mov  r12, rsi; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rdx; sub  rsp, 0x8; call jump_strlen; 
0x1704f0: endbr64 ; push r15; mov  r15, r9; push r14; mov  r14, r8; push r13; mov  r13, rcx; push r12; mov  r12, rsi; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rdx; sub  rsp, 0x8; call jump_strlen; 
0x13c0cf: mov  rsi, qword [rax+0x20]; mov  rdi, rsi; mov  qword [rbp-0x90], rsi; call jump_strlen; 
0x1705f0: endbr64 ; push r15; push r14; xor  r14d, r14d; push r13; push r12; mov  r12, rsi; push rbp; push rbx; mov  rbx, rdi; sub  rsp, 0x58; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x48], rax; xor  eax, eax; call jump_strlen; 
0x13e5f8: mov  rdi, rbp; call jump_strlen; 
0x1708c0: endbr64 ; push rbp; mov  rbp, rsp; push r15; mov  r15, rsi; push r14; mov  r14, rdx; push r13; mov  r13, rcx; push r12; xor  r12d, r12d; push rbx; mov  rbx, rdi; sub  rsp, 0x38; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strlen; 
0x170900: mov  rdi, r15; mov  qword [rbp-0x58], rax; call jump_strlen; 
0x17091e: mov  rdi, r14; mov  qword [rbp-0x58], rdx; call jump_strlen; 
0x17093b: mov  rdi, r13; mov  qword [rbp-0x58], rcx; call jump_strlen; 
0x13fbf3: mov  rdi, r10; mov  qword [rbp-0x490], r10; call jump_strlen; 
0x143700: endbr64 ; push r15; mov  r15d, 0x1; push r14; mov  r14, rdi; push r13; push r12; push rbp; push rbx; xor  ebx, ebx; sub  rsp, 0x38; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x28], rax; xor  eax, eax; lea  r12, [rsp+0x20]; lea  rbp, [rsp+0x1c]; mov  qword [rsp+0x20], 0x0; call jump_strlen; 
0x144f7b: mov  rdi, rcx; mov  qword [rsp+0x18], rcx; call jump_strlen; 
0x14543d: mov  rdi, r15; call jump_strlen; 
0x1457b4: mov  rax, qword [rsp+0x20]; mov  rdi, r15; mov  qword [rsp+0x30], r8; mov  qword [rsp+0x80], r9; mov  qword [rax], r15; call jump_strlen; 
0x1458f3: mov  r9, qword [rsp+0x30]; mov  rdi, r14; add  rbx, r9; call jump_strlen; 
0x145a36: mov  rax, qword [rsp+0x58]; mov  qword [rax], r15; lea  rdi, [rax+0x8]; mov  qword [rsp+0x58], rdi; mov  rdi, r15; call jump_strlen; 
0x145a5d: movsxd  rdx, eax; mov  rdi, r14; sub  dword [rsp+0x10], eax; add  r15, rdx; call jump_strlen; 
0x145e2a: mov  rdi, qword [rsp+0xa0]; call jump_strlen; 
0x14761a: mov  qword [rcx], r13; mov  rdi, r13; lea  r12, [rcx+0x8]; call jump_strlen; 
0x14d810: push r15; mov  r15, rsi; push r14; mov  r14d, r8d; push r13; mov  r13d, ecx; push r12; mov  r12, rdi; push rbp; mov  rbp, rdx; push rbx; mov  rbx, r9; sub  rsp, 0x458; mov  rax, qword [rsp+0x498]; mov  qword [rsp+0x8], rax; mov  rax, qword [rsp+0x4a0]; mov  qword [rsp+0x10], rax; mov  rax, qword [rsp+0x4a8]; mov  qword [rsp+0x18], rax; mov  rax, qword [rsp+0x4b0]; mov  qword [rsp+0x20], rax; mov  rax, qword [rsp+0x4b8]; mov  qword [rsp+0x28], rax; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x448], rax; mov  rax, qword [rdi]; mov  rdi, rsi; mov  qword [rsp+0x38], rax; call jump_strlen; 
0x14d8a1: mov  rdi, rbp; mov  qword [rsp+0x30], rax; call jump_strlen; 
0xdccfb: call sub_da8c0; mov  r13, qword [rel 0x220798]; mov  qword [r12], rax; mov  rdi, r13; call jump_strlen; 
0xda8c0: endbr64 ; push r14; mov  r14, rdi; push r13; push r12; push rbp; push rbx; call jump_strlen; 
0xde400: mov  rdi, qword [r12+0x60]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde487: mov  rdi, qword [r13+0x60]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde4f2: mov  rdi, qword [r13]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde561: mov  rdi, qword [r13+0x308]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde5da: mov  rdi, qword [r13+0x3c8]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde6bc: mov  rdi, qword [r13+0x38]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde73a: mov  rax, qword [rsp+0x8]; mov  rdi, qword [rax+rbp*8+0x78]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde7b0: mov  rax, qword [rsp+0x8]; mov  r14, qword [rsp+0x48]; mov  rdi, qword [rax+rbp*8+0x40]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xde8e6: mov  rdi, qword [rax+0x20]; mov  qword [rsp+0x20], rdi; call jump_strlen; 
0xdec25: mov  r14, qword [rsp+0x8]; mov  r13, qword [r14+0x170]; mov  rdi, r13; call jump_strlen; 
0xdec57: mov  rax, qword [rsp+0x8]; mov  r13, qword [rax+0x178]; mov  rdi, r13; call jump_strlen; 
0xdf380: mov  rdi, qword [r12]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xdf3c2: mov  rdi, qword [r12+0x308]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xdf404: mov  rdi, qword [r12+0x3c8]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xdf4a9: mov  rdi, qword [r13]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; 
0xdf950: mov  r13, qword [rel data_216f50]; mov  rdi, r13; call jump_strlen; 
0xdf97b: mov  r13, qword [rel data_216f58]; mov  rdi, r13; call jump_strlen; 
0xe02d7: mov  r14, qword [rax+0x20]; mov  rdi, r14; call jump_strlen; 
0xe11f2: mov  rdi, rax; mov  qword [rsp+0x50], rax; call jump_strlen; 
0xe12ef: lea  eax, [rdx+0x2000e]; mov  rdi, qword [rsp+0x18]; mov  dword [rsp+0x48], r11d; movzx   eax, ax; mov  dword [rsp+0x30], edx; mov  rdi, qword [rdi+rax*8+0x40]; call jump_strlen; 
0xe14bf: lea  eax, [rdx+0x2001a]; mov  rdi, qword [rsp+0x18]; mov  dword [rsp+0x48], r11d; movzx   eax, ax; mov  dword [rsp+0x30], edx; mov  rdi, qword [rdi+rax*8+0x40]; call jump_strlen; 
0xe15ac: lea  eax, [rdx+0x20007]; mov  rdi, qword [rsp+0x18]; mov  dword [rsp+0x48], r11d; movzx   eax, ax; mov  dword [rsp+0x30], edx; mov  rdi, qword [rdi+rax*8+0x40]; call jump_strlen; 
0xe17a1: mov  rdi, qword [rsp+0x18]; movsxd  rax, edx; mov  dword [rsp+0x48], r11d; mov  dword [rsp+0x30], edx; mov  rdi, qword [rdi+rax*8+0x40]; call jump_strlen; 
0xe1cda: test r8d, r8d; mov  eax, 0x0; cmove   eax, dword [rsp+0x8]; mov  rdi, qword [rsp+0x18]; cmovne  ecx, r8d; mov  dword [rsp+0x50], r11d; mov  dword [rsp+0x8], eax; mov  rax, qword [rsp+0x10]; mov  dword [rsp+0x48], ecx; mov  edx, dword [rax+0x8]; cmp  edx, 0xb; mov  dword [rsp+0x30], edx; setg al; movzx   eax, al; mov  rdi, qword [rdi+rax*8+0x170]; call jump_strlen; 
0xe2417: mov  rsi, qword [rax+0x20]; mov  dword [rsp+0x58], r11d; mov  rdi, rsi; mov  qword [rsp+0x50], rsi; call jump_strlen; 
0xe2730: call jump_strlen; 
0xe2856: lea  eax, [rdx+0x20087]; mov  rdi, qword [rsp+0x18]; mov  dword [rsp+0x48], r11d; movzx   eax, ax; mov  dword [rsp+0x30], edx; mov  rdi, qword [rdi+rax*8+0x40]; call jump_strlen; 
0xe2930: lea  eax, [rdx+0x2006f]; mov  rdi, qword [rsp+0x18]; mov  dword [rsp+0x48], r11d; movzx   eax, ax; mov  dword [rsp+0x30], edx; mov  rdi, qword [rdi+rax*8+0x40]; call jump_strlen; 
0x16f7b0: endbr64 ; push r15; push r14; push r13; push r12; mov  r12, rdi; push rbp; xor  ebp, ebp; push rbx; mov  ebx, esi; sub  rsp, 0x48; mov  qword [rsp], rdx; mov  qword [rsp+0x8], rcx; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x38], rax; xor  eax, eax; call jump_strlen; 
0x16e680: endbr64 ; push r14; mov  r14, r8; push r13; mov  r13, rcx; push r12; mov  r12, rsi; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rdx; call jump_strlen; 
0x16df19: push r14; mov  r14, r8; push r13; mov  r13, rcx; push r12; mov  r12, rsi; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rdx; call jump_strlen; 
0xec7d8: mov  rdi, r13; mov  byte [rbp+rax-0x1040], 0x0; call basename; mov  rdi, rax; mov  r12, rax; call jump_strlen; 
0xedc60: push rbp; mov  rbp, rsp; push r15; mov  r15, rsi; push r14; mov  r14, r9; push r13; mov  r13, rdi; mov  rdi, rsi; push r12; mov  r12, r8; push rbx; mov  rbx, rcx; sub  rsp, 0x318; mov  dword [rbp-0x300], edx; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strlen; 
0xedfe5: mov  rdi, r13; mov  qword [rbp-0x2e8], rdx; call jump_strlen; 
0xee0b3: mov  rdi, r13; call jump_strlen; 
0xedb40: push r15; push r14; push r13; push r12; push rbp; push rbx; mov  rbx, rsi; sub  rsp, 0x28; mov  qword [rsp+0x10], rdi; mov  qword [rsp+0x8], rdx; call jump_strlen; 
0xedb90: mov  r13, qword [rbx+r14*8]; mov  rdi, r13; call jump_strlen; 
0x177fd0: push r15; lea  r15, [rel 0x1da07e]  {"stdout"}; push r14; mov  r14, rdi; push r13; lea  r13, [rel 0x1da078]  {"stdin"}; push r12; mov  r12, r8; push rbp; push rbx; mov  rbx, rdx; sub  rsp, 0xc8; mov  qword [rsp+0x8], rdi; mov  qword [rsp], rsi; mov  dword [rsp+0x1c], ecx; mov  rax, qword [fs:0x28]; mov  qword [rsp+0xb8], rax; xor  eax, eax; call jump_strlen; 
0x17809f: mov  rdi, r14; call jump_strlen; 
0x116670: lea  r15, [rax+0x13]; mov  rdi, r15; call jump_strlen; 
0x116806: lea  r12, [rax+0x13]; mov  rdi, r12; call jump_strlen; 
0x116840: mov  rdi, r13; call jump_strlen; 
0x1176a5: mov  rax, qword [rsp]; mov  word [r15+0x42], r14w; mov  rdi, r12; mov  dword [r15+0x38], 0x0; mov  qword [r15+0x30], rax; mov  dword [r15+0x64], 0x30000; mov  qword [r15+0x18], 0x0; mov  qword [r15+0x20], 0x0; call jump_strlen; 
0x1176fa: movzx   eax, word [rsp+0x3e]; mov  rdi, r12; add  eax, 0x1; mov  word [r15+0x60], ax; mov  rax, qword [rbp]; mov  qword [r15+0x8], rax; call jump_strlen; 
0x1177d6: lea  r12, [rbx+0x13]; mov  rdi, r12; call jump_strlen; 
0x1178a4: mov  eax, dword [rbp+0x2c]; sub  eax, dword [rsp+0x18]; mov  rdi, r12; cdqe ; mov  qword [rsp+0x30], rax; call jump_strlen; 
0x9c5b0: endbr64 ; push r15; push r14; xor  r14d, r14d; push r13; mov  r13d, esi; push r12; mov  r12, rdi; push rbp; mov  rbp, rdx; push rbx; sub  rsp, 0x1c8; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x1b8], rax; xor  eax, eax; call jump_strlen; 
0xe5ff0: mov  r13, qword [rbp+r14*8]; mov  rdi, r13; call jump_strlen; 
0x62d40: mov  rbx, qword [rbp-0x618]; mov  rdi, rbx; call jump_strlen; 
0x64b08: mov  rdi, r13; add  r14d, 0x1; call jump_strlen; 
0x64bf3: mov  rdi, r13; call jump_strlen; 
0x64d3d: mov  rbx, qword [rbp-0x630]; mov  rdi, rbx; call jump_strlen; 
0x6807f: mov  rdi, r13; add  r15d, 0x1; call jump_strlen; 
0x69b5f: mov  rdi, qword [rbp-0x6d8]; mov  byte [rbp+rax-0x485], 0x0; call jump_strlen; 
0x69ea1: mov  rdi, qword [rbp-0x680]; mov  qword [rbp-0x6a0], r10; call jump_strlen; 
0x6a258: mov  rdi, qword [rbp-0x6d8]; call jump_strlen; 
0x61499: mov  rdi, r13; call jump_strlen; 
0x61520: mov  rdi, rcx; call jump_strlen; 
0x615fa: mov  rdi, r15; mov  r13, r15; call jump_strlen; 
0x61630: endbr64 ; push r15; movsxd  rcx, ecx; push r14; push r13; mov  r13, rdi; push r12; push rbp; push rbx; movsxd  rbx, esi; sub  rsp, 0x78; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x68], rax; xor  eax, eax; lea  rax, [rel data_217800]; mov  dword [rsp+0x3c], edx; lea  rdx, [rsp+0x40]; mov  rdi, qword [rax+rcx*8]; mov  rax, qword [rel data_218e10]; shr  rdx, 0x4; mov  r15, rdx; mov  qword [rsp+0x10], rdi; mov  eax, dword [fs:rax]; mov  qword [rsp+0x40], rdx; mov  dword [rsp+0x2c], eax; lea  rax, [rel sub_61380]; cmp  rdi, rax; mov  rdi, r13; sete r9b; mov  byte [rsp+0x8], r9b; call jump_strlen; 
0x89300: push rbp; mov  rdi, rdx; mov  rbp, rsp; push r13; push r12; mov  r12, rdx; push rbx; sub  rsp, 0x58; mov  qword [rbp-0x30], r8; mov  qword [rbp-0x40], rdx; mov  qword [rbp-0x38], rcx; mov  qword [rbp-0x28], r9; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x58], rax; xor  eax, eax; lea  rax, [rbp+0x10]; mov  dword [rbp-0x70], 0x18; mov  qword [rbp-0x68], rax; lea  rax, [rbp-0x50]; mov  qword [rbp-0x60], rax; call jump_strlen; 
0xa90b1: mov  rdi, r13; call jump_strlen; 
0x76da9: mov  rdi, r15; call jump_strlen; 
0x76f6a: mov  r14, qword [rsp+0x8]; mov  dword [rsp+0x28], r10d; mov  dword [rsp+0x10], r11d; mov  rdi, r14; call jump_strlen; 
0x74646: mov  rdi, r12; call jump_strlen; 
0x747d0: mov  rbx, qword [rbp-0x948]; mov  dword [rbp-0x8a0], r10d; mov  rdi, rbx; call jump_strlen; 
0x47e40: mov  rdi, r12; call jump_strlen; 
0x5122c: mov  rax, r15; mov  rdi, r15; mov  qword [rsp+0x58], r9; sub  rax, r8; mov  qword [rsp+0x28], rcx; mov  qword [rsp+0x20], r8; mov  qword [rsp+0x40], rax; call jump_strlen; 
0x5135c: mov  rdi, r15; mov  qword [rsp+0x40], r9; mov  qword [rsp+0x28], rcx; mov  qword [rsp+0x20], r8; call jump_strlen; 
0x51be0: mov  rax, qword [r11+0x48]; mov  qword [rsp+0x58], r9; mov  dword [rsp+0x30], ecx; mov  rdi, rax; mov  qword [rsp+0x10], r11; mov  qword [rsp+0x88], rax; call jump_strlen; 
0x523c7: mov  rdi, qword [rsp+0x78]; mov  qword [rsp+0xb8], r9; mov  qword [rsp+0xb0], r11; mov  dword [rsp+0xac], edx; mov  dword [rsp+0xa0], esi; mov  dword [rsp+0x98], r10d; mov  dword [rsp+0x90], ecx; call jump_strlen; 
0x52795: mov  rdi, qword [rsp+0x68]; mov  qword [rsp+0xa0], r9; mov  qword [rsp+0x98], r11; mov  dword [rsp+0x90], edx; mov  dword [rsp+0x80], esi; call jump_strlen; 
0x527e2: mov  rdi, qword [rsp+0x78]; mov  qword [rsp+0xb8], r9; mov  qword [rsp+0xb0], r11; mov  dword [rsp+0xac], edx; mov  dword [rsp+0xa0], esi; mov  dword [rsp+0x98], r10d; mov  dword [rsp+0x90], ecx; call jump_strlen; 
0x52859: mov  rdi, qword [rsp+0x68]; mov  qword [rsp+0xa0], r9; mov  qword [rsp+0x98], r11; mov  dword [rsp+0x90], edx; mov  dword [rsp+0x80], esi; call jump_strlen; 
0x36083: mov  r12, qword [rbx]; mov  rdi, r12; call jump_strlen; 
0x37053: mov  rdi, r15; call jump_strlen; 
0x3721d: mov  rdi, r14; call jump_strlen; 
0x37364: mov  rdi, r14; call jump_strlen; 
0x375e6: mov  byte [rdi], 0x0; mov  rdi, r15; call jump_strlen; 
0x36503: mov  rdi, r13; call jump_strlen; 
0x3656a: mov  rdi, qword [r12+r15*8]; mov  qword [rsp+0x18], rdi; call jump_strlen; 
0x3a5c6: mov  rdi, rbx; call jump_strlen; 
0x3a742: mov  rdi, rbx; call jump_strlen; 
0x3a826: mov  rdi, rbx; call jump_strlen; 
0x3be90: endbr64 ; push r15; lea  r15, [rel 0x21ad98]; push r14; lea  r14, [rel 0x21ad60]; push r13; push r12; mov  r12, rsi; push rbp; mov  rbp, rdi; mov  rdi, r14; push rbx; mov  rbx, rdx; sub  rsp, 0x58; mov  qword [rsp+0x8], rcx; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x48], rax; xor  eax, eax; call pthread_rwlock_rdlock; mov  rdi, rbp; call jump_strlen; 
0x3bfb2: mov  rdi, rax; call jump_strlen; 
0x3c017: mov  rdi, r14; call pthread_rwlock_wrlock; mov  rdi, rbp; call jump_strlen; 
0x3ac28: mov  rdi, r13; call jump_strlen; 
0x3b3b0: mov  rdi, rax; call jump_strlen; 
0x44db0: endbr64 ; push rbp; mov  rbp, rsp; push r15; mov  r15, rdx; push r14; push r13; push r12; mov  r12, rdi; push rbx; sub  rsp, 0x38; mov  qword [rbp-0x58], rsi; mov  qword [rbp-0x48], rdx; mov  dword [rbp-0x50], ecx; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strlen; 
0x44f50: mov  rdi, qword [rbp-0x58]; call jump_strlen; 
0x5de10: mov  rdi, r14; mov  qword [rsp+0x50], r10; mov  dword [rsp+0x48], r9d; mov  dword [rsp+0x34], edx; call jump_strlen; 
0x5e788: mov  rdi, r14; mov  qword [rsp+0x38], r10; mov  rbx, r14; mov  dword [rsp+0x8], edx; call jump_strlen; 
0x5be46: mov  rdi, qword [rbp-0x108]; mov  dword [rbp-0xe0], r9d; call jump_strlen; 
0x5be73: call jump_strlen; 
0x59c35: mov  r14, rdi; mov  r15, rsi; mov  rdi, rdx; mov  rbx, rdx; call jump_strlen; 
0x147ca5: mov  qword [rbx], rdi; call jump_strlen; 
0x147d00: mov  qword [rsp], rdi; lea  rbx, [rsp+0x20]; mov  rbp, rsp; call jump_strlen; 
0xf3f65: mov  rdi, rbp; call jump_strlen; 
0x16c43b: mov  rdi, r12; call jump_strlen; 
0x16c4b5: mov  rdi, r12; call jump_strlen; 
0x16af50: endbr64 ; push r14; push r13; mov  r13, rsi; push r12; push rbp; push rbx; mov  rbx, rdi; sub  rsp, 0x20; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x18], rax; xor  eax, eax; call jump_strlen; 
0x13f109: mov  rdi, r14; call jump_strlen; 
0x115610: mov  r9, qword [rsp+0x50]; mov  rdi, r15; sub  r9, qword [rsp+0x10]; mov  qword [rsp+0x28], r9; call jump_strlen; 
0x15c8c7: call jump_strlen; 
0x15c92d: mov  rdi, r12; mov  qword [rsp+0x8], rsi; call jump_strlen; 
0x4e3b5: mov  r14, qword [rax+0x40]; mov  qword [rsp+0x10], r8; mov  qword [rsp+0x8], rcx; mov  rdi, r14; call jump_strlen; 
0xabff8: mov  rdi, r14; call jump_strlen; 
0x148df0: endbr64 ; push r13; mov  r13, rdx; push r12; mov  r12, rdi; push rbp; mov  rbp, rsi; push rbx; sub  rsp, 0x8; call jump_strlen; 
0x533a8: lea  rdi, [rax+0x1]; call jump_strlen; 
0x13d4ea: lea  r13, [rsp+0x1a0]; mov  edx, r12d; lea  rsi, [rel 0x1db649]; xor  eax, eax; mov  rdi, r13; lea  r12, [rsp+0x44]; call sprintf; mov  rdi, r13; call jump_strlen; 
0x13d57b: mov  rdi, qword [rsp+0x38]; mov  qword [rsp+0x100], rdi; call jump_strlen; 
0x13d57b: mov  rdi, qword [rsp+0x38]; mov  qword [rsp+0x100], rdi; call jump_strlen; mov  rdi, qword [rsp+0x30]; add  rax, 0x1; mov  qword [rsp+0x110], rdi; mov  qword [rsp+0x108], rax; call jump_strlen; 
0x13d57b: mov  rdi, qword [rsp+0x38]; mov  qword [rsp+0x100], rdi; call jump_strlen; mov  rdi, qword [rsp+0x30]; add  rax, 0x1; mov  qword [rsp+0x110], rdi; mov  qword [rsp+0x108], rax; call jump_strlen; add  rax, 0x1; mov  qword [rsp+0x118], rax; mov  rax, qword [rsp+0x10]; mov  rdi, rax; mov  qword [rsp+0x120], rax; call jump_strlen; 
0x13ec8e: mov  rdi, r13; call jump_strlen; 
0x163720: xor  edx, edx; mov  esi, 0x1; mov  edi, 0x1; call socket; lea  rdi, [rbp+0x2]; mov  dword [rbx], eax; mov  dword [rsp+0x1c], eax; call jump_strlen; 
0x574c5: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r10; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0xabda5: mov  rdi, r15; call jump_strlen; 
0xabda5: mov  rdi, r15; call jump_strlen; mov  rdi, r13; mov  qword [rsp+0x8], rax; call jump_strlen; 
0x1578d7: call jump_strlen; 
0x15793d: mov  rdi, r12; mov  qword [rsp+0x8], rsi; call jump_strlen; 
0x625c8: mov  rdi, rbp; call fclose; mov  rdi, r13; call jump_strlen; 
0x153d24: mov  rdi, rbp; call jump_strlen; 
0x13e3d0: mov  rdi, r14; call jump_strlen; 
0xab459: push r12; mov  r12, rdi; mov  rdi, rdx; push rbp; mov  rbp, rdx; push rbx; mov  rbx, rsi; call jump_strlen; 
0x574c5: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r10; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0x113b6a: mov  rdi, rbp; mov  r14, r12; call jump_strlen; 
0xab310: endbr64 ; push r14; push r13; mov  r13d, esi; push r12; mov  r12, rcx; push rbp; mov  rbp, rdx; push rbx; mov  rbx, rdi; call jump_strlen; 
0x3b6ec: mov  rdi, r13; call jump_strlen; 
0x3b6ec: mov  rdi, r13; call jump_strlen; mov  rdi, r15; mov  qword [rbp-0xe0], rax; call jump_strlen; 
0x3b74e: lea  rax, [rsp+0xf]; mov  rsi, r15; and  rax, 0xfffffffffffffff0; mov  rdi, rax; mov  qword [rbp-0xc0], rax; call jump___stpcpy; mov  rdx, qword [rbp-0xe0]; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_mempcpy; mov  rdi, rbx; mov  dword [rax], 0x6f6d2e; call jump_strlen; 
0x3bcc2: mov  rdi, r14; mov  qword [rbp-0xa8], r10; mov  qword [rbp-0x98], r9; call jump_strlen; 
0x3bcc2: mov  rdi, r14; mov  qword [rbp-0xa8], r10; mov  qword [rbp-0x98], r9; call jump_strlen; mov  rdi, qword [rbp-0xf0]; lea  r15, [rax+0x1]; call jump_strlen; 
0xe89fb: call jump_strlen; 
0xe8af5: mov  rdi, rbx; call jump_strlen; 
0x15b62b: mov  rdi, qword [rsp+0x18]; lea  r14, [rsp+0x30]; lea  r13, [rsp+0x28]; mov  qword [rsp+0x28], 0x0; mov  qword [rsp+0x30], 0x0; call jump_strlen; 
0x106007: movsxd  rdi, edi; lea  rax, [rel 0x1d51c0]; mov  r13, rdx; mov  rbx, rcx; mov  edx, 0x5; lea  rsi, [rel 0x1d5260]  {"Success"}; add  rsi, qword [rax+rdi*8]; lea  rdi, [rel _libc_intl_domainname]  {"libc"}; call dcgettext; mov  rdi, rax; mov  rbp, rax; call jump_strlen; 
0x106a00: endbr64 ; push r13; push r12; push rbp; mov  rbp, rdi; push rbx; sub  rsp, 0x18; call jump_strlen; 
0x396fb: call jump_strlen; 
0x39710: call jump_strlen; 
0x39726: call jump_strlen; 
0x3973c: call jump_strlen; 
0x39752: call jump_strlen; 
0x39768: call jump_strlen; 
0x3977e: call jump_strlen; 
0x39794: call jump_strlen; 
0x397aa: call jump_strlen; 
0x397c0: call jump_strlen; 
0x397d6: call jump_strlen; 
0x397ec: call jump_strlen; 
0x12d623: mov  rdi, rbx; call jump_strlen; 
0x12d712: call jump_strlen; 
0x16824a: mov  rdi, rbx; call jump_strlen; 
0x168288: mov  r8, rbx; mov  ecx, r12d; lea  rdx, [rel 0x1dc445]  {"unix"}; mov  rdi, rbp; lea  rsi, [rel 0x1dc4d9]  {"%s.%d@%s"}; xor  eax, eax; mov  r13d, 0x1; call sprintf; mov  rdi, rbp; call jump_strlen; 
0xa85f0: endbr64 ; push r12; push rbp; mov  rbp, rdi; sub  rsp, 0x8; call jump_strlen; 
0x405ca: mov  rdi, rax; call jump_strlen; 
0x116cb6: test r15d, r15d; mov  eax, 0x1; mov  rdi, r13; mov  ebp, esi; cmovle  r15, rax; mov  r12, rdx; mov  ebx, r8d; mov  qword [rsp+0x20], r15; call jump_strlen; 
0x106236: mov  rdi, rsi; mov  dword [rsp+0x8], ecx; call jump_strlen; 
0x176140: endbr64 ; push r15; mov  r15, rsi; push r14; mov  r14, rcx; push r13; mov  r13, rdx; push r12; mov  r12, rdi; mov  rdi, rsi; push rbp; push rbx; mov  ebx, r8d; and  ebx, 0x3; sub  rsp, 0x18; call jump_strlen; 
0x16c294: mov  rdi, r14; call jump_strlen; 
0x16c31d: mov  rdi, r14; call jump_strlen; 
0xab4e0: mov  rdi, rbp; add  r12, 0x8; call jump_strlen; 
0x13c890: mov  esi, 0x1; mov  edi, r14d; lea  rbp, [rsp+0x290]; call listen; mov  ecx, dword [rsp+0x48]; mov  esi, 0x8; xor  eax, eax; lea  rdx, [rel 0x1d99c5]; mov  rdi, rbp; call __snprintf; mov  rdi, rbp; call jump_strlen; 
0x13c890: mov  esi, 0x1; mov  edi, r14d; lea  rbp, [rsp+0x290]; call listen; mov  ecx, dword [rsp+0x48]; mov  esi, 0x8; xor  eax, eax; lea  rdx, [rel 0x1d99c5]; mov  rdi, rbp; call __snprintf; mov  rdi, rbp; call jump_strlen; mov  rsi, rbp; mov  edi, r13d; lea  rdx, [rax+0x1]; call __write; mov  rdi, rbp; mov  rbx, rax; call jump_strlen; 
0x13cae9: mov  rax, qword [rsp+0x28]; lea  rbp, [rsp+0xa0]; mov  rdi, rax; mov  qword [rsp+0xa0], rax; call jump_strlen; 
0x13cae9: mov  rax, qword [rsp+0x28]; lea  rbp, [rsp+0xa0]; mov  rdi, rax; mov  qword [rsp+0xa0], rax; call jump_strlen; add  rax, 0x1; mov  qword [rsp+0xa8], rax; mov  rax, qword [rsp+0x30]; mov  rdi, rax; mov  qword [rsp+0xb0], rax; call jump_strlen; 
0x13cae9: mov  rax, qword [rsp+0x28]; lea  rbp, [rsp+0xa0]; mov  rdi, rax; mov  qword [rsp+0xa0], rax; call jump_strlen; add  rax, 0x1; mov  qword [rsp+0xa8], rax; mov  rax, qword [rsp+0x30]; mov  rdi, rax; mov  qword [rsp+0xb0], rax; call jump_strlen; add  rax, 0x1; mov  qword [rsp+0xb8], rax; mov  rax, qword [rsp+0x38]; mov  rdi, rax; mov  qword [rsp+0xc0], rax; call jump_strlen; 
0xe8b40: endbr64 ; push r15; push r14; push r13; mov  r13, rdx; push r12; push rbp; push rbx; mov  rbx, rdi; sub  rsp, 0x38; mov  eax, dword [rsp+0x80]; mov  r14, qword [rsp+0x70]; mov  qword [rsp+0x8], rdi; mov  qword [rsp+0x18], rsi; mov  rbp, qword [rsp+0x78]; mov  dword [rsi+0x10], eax; mov  rdi, r14; mov  r15, qword [rsp+0x88]; mov  qword [rsp+0x20], rcx; call jump_strlen; 
0xe8b98: mov  rdx, r12; mov  rsi, r14; mov  rdi, r13; call sub_28620; mov  r14, qword [rsp+0x18]; mov  rdi, rbp; mov  qword [r14], r13; call jump_strlen; 
0xe8c4f: mov  rdi, r14; call jump_strlen; 
0x48801: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r9; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0x47970: mov  rdi, r12; call jump_strlen; 
0x16adc0: endbr64 ; push r14; push r13; mov  r13, rsi; push r12; push rbp; push rbx; mov  rbx, rdi; sub  rsp, 0x20; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x18], rax; xor  eax, eax; call jump_strlen; 
0xaa38a: mov  rdi, rsi; mov  r13, rsi; call jump_strlen; 
0x47970: mov  rdi, r12; call jump_strlen; 
0x8a410: endbr64 ; push r13; push r12; mov  r12, rdi; push rbp; mov  rbp, rsi; push rbx; sub  rsp, 0x8; call jump_strlen; 
0x117fc0: call jump_strlen; 
0x11814e: mov  rdi, r12; call jump_strlen; 
0x1348c0: endbr64 ; push r13; mov  r13, rdi; mov  rdi, rsi; push r12; mov  r12, rdx; push rbp; mov  rbp, rsi; push rbx; sub  rsp, 0x8; call jump_strlen; 
0x2a5af: mov  rax, qword [rel data_218f70]; mov  rax, qword [fs:rax]; mov  rax, qword [rax]; mov  rsi, qword [rax+0xb0]; mov  rdi, rsi; mov  qword [rbp-0x58], rsi; call jump_strlen; 
0x2a660: mov  rax, qword [rel data_218f70]; mov  rax, qword [fs:rax]; mov  rax, qword [rax]; mov  rsi, qword [rax+0xb0]; mov  rdi, rsi; mov  qword [rbp-0x58], rsi; call jump_strlen; 
0x14dd76: mov  rdi, r12; mov  qword [rsp+0x38], r10; mov  r14, qword [r15]; call jump_strlen; 
0x14de0a: mov  rdi, r12; call jump_strlen; 
0x80ed0: endbr64 ; push r14; push r13; push r12; mov  r12, rdi; push rbp; push rbx; sub  rsp, 0x10; call jump_strlen; 
0x11b43a: lea  r13, [rsp+0x41]; mov  r12d, eax; mov  rdi, r13; call jump_strlen; 
0x134990: endbr64 ; push r12; mov  r12, rdi; mov  rdi, rsi; push rbp; mov  rbp, rsi; push rbx; mov  rbx, rdx; call jump_strlen; 
0x4b721: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r9; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0xe8e4d: mov  rdi, r15; call jump_strlen; 
0x176283: call jump_strlen; 
0x176303: mov  rdi, r12; call jump_strlen; 
0x176860: mov  rdi, r12; call jump_strlen; 
0x176d9d: mov  rdi, r13; mov  qword [rbp-0x508], rsi; call jump_strlen; 
0x176fe3: mov  rax, qword [rbx+0x8]; mov  rdi, qword [rax+r12]; mov  qword [rbp-0x4d8], rdi; call jump_strlen; 
0x1773f9: mov  rdi, r13; call jump_strlen; 
0x1776a2: mov  rdi, qword [rbp-0x450]; mov  qword [rbp-0x500], rdi; call jump_strlen; 
0x177770: mov  rax, qword [rax+0x20]; mov  rdi, rax; mov  qword [rbp-0x508], rax; call jump_strlen; 
0x177796: call jump_strlen; 
0x177a0a: mov  rdi, rax; call jump_strlen; 
0x177ace: mov  rdi, r13; call jump_strlen; 
0xee613: call jump_strlen; 
0xee693: mov  rdi, r12; call jump_strlen; 
0xeebf0: mov  rdi, r12; call jump_strlen; 
0xef12d: mov  rdi, r13; mov  qword [rbp-0x508], rsi; call jump_strlen; 
0xef373: mov  rax, qword [rbx+0x8]; mov  rdi, qword [rax+r12]; mov  qword [rbp-0x4d8], rdi; call jump_strlen; 
0xef789: mov  rdi, r13; call jump_strlen; 
0xefa32: mov  rdi, qword [rbp-0x450]; mov  qword [rbp-0x500], rdi; call jump_strlen; 
0xefb00: mov  rax, qword [rax+0x20]; mov  rdi, rax; mov  qword [rbp-0x508], rax; call jump_strlen; 
0xefb26: call jump_strlen; 
0xefd9a: mov  rdi, rax; call jump_strlen; 
0xefe5e: mov  rdi, r13; call jump_strlen; 
0x48801: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r9; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0xed20c: mov  rdi, rax; mov  r12, rax; call jump_strlen; 
0xed21a: mov  rdi, r13; call jump_strlen; 
0xa8170: endbr64 ; push r13; mov  r13, rdi; mov  rdi, rdx; push r12; mov  r12, rdx; push rbp; mov  rbp, rsi; call jump_strlen; 
0x11cc10: endbr64 ; push rbp; mov  rbp, rsp; push r13; mov  r13, rdi; mov  rdi, rsi; push r12; mov  r12, rsi; sub  rsp, 0x10; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x18], rax; xor  eax, eax; call jump_strlen; 
0x1649f9: mov  rdi, r14; mov  qword [rsp+0x8], r14; call jump_strlen; 
0x154f23: mov  rdi, rbp; call jump_strlen; 
0xab690: endbr64 ; push r14; push r13; mov  r13, rdi; mov  rdi, rdx; push r12; mov  r12d, ecx; push rbp; mov  rbp, rsi; push rbx; mov  rbx, rdx; call jump_strlen; 
0x47970: mov  rdi, r12; call jump_strlen; 
0xaa7e3: mov  rdi, r13; call jump_strlen; 
0x44bf0: call jump_strlen; 
0x451e6: mov  rdi, r12; call jump_strlen; 
0x13daed: mov  rdi, rax; mov  r12, rax; call jump_strlen; 
0x13de2f: mov  rdi, r12; call jump_strlen; 
0x13ded0: mov  rdi, r12; call jump_strlen; 
0xab40d: mov  rdi, rdx; call jump_strlen; 
0xab290: call jump_strlen; 
0x38cc3: mov  rdi, r12; call jump_strlen; 
0x3909a: call jump_strlen; 
0x574c5: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r10; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0x12a600: endbr64 ; push r15; push r14; push r13; mov  r13, rdi; push r12; push rbp; xor  ebp, ebp; push rbx; sub  rsp, 0x8; call jump_strlen; 
0x12a64e: mov  rdi, r15; call jump_strlen; 
0xab572: mov  rax, rbx; mov  rdx, r14; mov  rdi, r15; sub  rax, rbp; sub  rdx, rax; mov  qword [rsp+0x10], rdx; call jump_strlen; 
0x11fab0: endbr64 ; push r15; mov  r15, rdi; push r14; push r13; push r12; push rbp; push rbx; sub  rsp, 0x48; mov  qword [rsp+0x38], rsi; mov  dword [rsp+0x28], edx; mov  qword [rsp+0x20], rcx; mov  qword [rsp+0x18], r8; call jump_strlen; 
0x11b588: lea  r12, [rsp+0x145]; mov  rdi, r12; call jump_strlen; 
0x1622f5: lea  r9, [r14+0x10]; mov  rdi, rbx; mov  qword [rsp+0x58], rbx; mov  qword [rsp+0x10], r9; call jump_strlen; 
0x162561: mov  rdi, r12; call jump_strlen; 
0x1626e9: mov  r13, qword [r14+0x8]; mov  dword [rsp+0x10], r8d; mov  qword [rsp+0x8], r9; mov  rdi, r13; call jump_strlen; 
0x12a740: mov  rdi, rbx; add  rbp, 0x1; call jump_strlen; 
0x2ae32: sub  rsp, 0x40; or   qword [rsp+0x38], 0x0; mov  rax, qword [rbp-0xc0]; mov  rdi, rax; lea  rbx, [rsp+0xf]; and  rbx, 0xfffffffffffffff0; mov  qword [rbx], rax; mov  qword [rbp-0xc8], rbx; call jump_strlen; 
0x2ae8f: sub  rsp, 0x40; or   qword [rsp+0x38], 0x0; lea  r13, [rsp+0xf]; mov  rdi, r12; and  r13, 0xfffffffffffffff0; mov  qword [r13], r12; call jump_strlen; 
0x2af44: sub  rsp, 0x40; or   qword [rsp+0x38], 0x0; lea  rax, [rsp+0xf]; mov  rdi, r12; and  rax, 0xfffffffffffffff0; mov  qword [rax], r12; mov  rbx, rax; mov  qword [rbp-0xc8], rax; call jump_strlen; 
0x2b379: sub  rsp, 0x40; or   qword [rsp+0x38], 0x0; lea  r14, [rsp+0xf]; mov  rdi, r13; and  r14, 0xfffffffffffffff0; mov  qword [r14], r13; call jump_strlen; 
0x2b545: sub  rsp, 0x40; or   qword [rsp+0x38], 0x0; lea  rdx, [rsp+0xf]; mov  rdi, r13; and  rdx, 0xfffffffffffffff0; mov  qword [rdx], r13; mov  r15, rdx; call jump_strlen; 
0x2b64c: mov  rdi, qword [rbp-0xc0]; mov  dword [rbp-0x68], r8d; call jump_strlen; 
0x2b64c: mov  rdi, qword [rbp-0xc0]; mov  dword [rbp-0x68], r8d; call jump_strlen; mov  rdi, qword [rbp-0xa8]; lea  rbx, [rax+0x1]; call jump_strlen; 
0x3803c: mov  rdi, r13; call jump_strlen; 
0x3845a: mov  rdi, r14; call jump_strlen; 
0x3845a: mov  rdi, r14; call jump_strlen; mov  rdi, r12; mov  rbx, rax; call jump_strlen; 
0x3dd70: endbr64 ; push r15; push r14; mov  r14, r8; push r13; mov  r13d, ecx; push r12; mov  r12, rdx; push rbp; lea  rbp, [r12+0x2]; push rbx; sub  rsp, 0x48; mov  qword [rsp+0x10], rdi; mov  rdi, r8; mov  qword [rsp+0x8], rsi; mov  dword [rsp], ecx; mov  qword [rsp+0x18], r9; call jump_strlen; 
0x3ddb7: mov  rdi, qword [rsp+0x18]; call jump_strlen; 
0x3ddd6: mov  rdi, qword [rsp+0x80]; call jump_strlen; 
0x3ddf8: mov  rdi, qword [rsp+0x88]; call jump_strlen; 
0x3de1b: mov  rdi, qword [rsp+0x90]; call jump_strlen; 
0x3de2c: mov  rdi, qword [rsp+0x98]; call jump_strlen; 
0x3de78: mov  rdi, r15; call jump_strlen; 
0x3dfb0: mov  rdi, r15; add  r13, 0x1; call jump_strlen; 
0x3dff8: mov  rdi, r15; add  rbx, 0x1; call jump_strlen; 
0x3e060: mov  rdi, r15; add  rbp, 0x1; call jump_strlen; 
0x3e1c8: mov  rdi, r14; add  rbx, 0x1; call jump_strlen; 
0x3e220: mov  rdi, r14; call jump_strlen; 
0x37d10: mov  edi, r14d; call __close_nocancel; mov  rsi, qword [rbx]; mov  rdi, rsi; mov  qword [rbp-0xd8], rsi; call jump_strlen; 
0x3c8e6: call jump_strlen; 
0x3c978: call jump_strlen; 
0x3d039: mov  rax, qword [rsp+0x10]; mov  ebp, ebp; add  r13, 0x8; mov  r14, qword [rax+rbp*8]; mov  rdi, r14; call jump_strlen; 
0x5a777: mov  rdx, qword [rel data_218f70]; sub  eax, 0x7; movsx   rax, al; mov  rdx, qword [fs:rdx]; mov  rdx, qword [rdx]; mov  r14, qword [rdx+rax*8+0x40]; mov  rdi, r14; call jump_strlen; 
0x5a80e: cmp  al, 0x2e; mov  rdi, qword [rsp+0x8]; cmove   rdi, qword [rsp+0x10]; mov  qword [rsp+0x18], rdi; call jump_strlen; 
0x7e61f: call jump_strlen; 
0x4e3b5: mov  r14, qword [rax+0x40]; mov  qword [rsp+0x10], r8; mov  qword [rsp+0x8], rcx; mov  rdi, r14; call jump_strlen; 
0x134197: mov  qword [rsp+0x70], rdi; call jump_strlen; 
0x1341b4: mov  r15d, 0x9; mov  ebp, 0x8; mov  ebx, 0x7; mov  qword [rsp+0x88], 0x1; lea  rax, [rel data_1d87e9[9]]  {"("}; mov  qword [rsp+0x90], rdi; mov  qword [rsp+0x80], rax; call jump_strlen; 
0x13ff7d: lea  r13, [rbx+0x2]; mov  rdi, r13; call jump_strlen; 
0x140337: mov  r13, qword [rax]; mov  rdi, r13; call jump_strlen; 
0x140470: lea  rsi, [rsp+0xb1]; mov  rdi, rsi; mov  qword [rsp], rsi; call jump_strlen; 
0x14057c: mov  dword [rsp+0x670], r11d; mov  qword [rsp+0x48], rdi; mov  qword [rsp], rdi; call jump_strlen; 
0x140656: mov  r8, qword [rsp+0x48]; mov  dword [rsp+0x670], r11d; mov  rdi, r8; mov  qword [rsp], r8; call jump_strlen; 
0xb168e: mov  rdi, rax; mov  r12, rax; call jump_strlen; 
0xabeb8: mov  rsi, qword [r15]; mov  rdi, qword [r14]; mov  rdx, rbx; call envz_entry; mov  rdi, rbx; mov  r13, rax; call jump_strlen; 
0xabf28: mov  rsi, qword [r15]; mov  rdi, qword [r14]; mov  rdx, rbx; call envz_entry; mov  rdi, rbx; mov  r13, rax; call jump_strlen; 
0x116cb6: test r15d, r15d; mov  eax, 0x1; mov  rdi, r13; mov  ebp, esi; cmovle  r15, rax; mov  r12, rdx; mov  ebx, r8d; mov  qword [rsp+0x20], r15; call jump_strlen; 
0x116cb6: test r15d, r15d; mov  eax, 0x1; mov  rdi, r13; mov  ebp, esi; cmovle  r15, rax; mov  r12, rdx; mov  ebx, r8d; mov  qword [rsp+0x20], r15; call jump_strlen; 
0x7fa80: endbr64 ; push r13; push r12; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rsi; sub  rsp, 0x8; call jump_strlen; 
0x4b721: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r9; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0x1407e0: endbr64 ; push r12; push rbp; mov  rbp, rdi; push rbx; sub  rsp, 0x30; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x28], rax; xor  eax, eax; call jump_strlen; 
0xad14d: mov  rdi, rsi; call jump_strlen; 
0x167fbc: mov  rdi, rbp; call jump_strlen; 
0x167ff8: lea  rdx, [rel 0x1dc445]  {"unix"}; mov  r8, rbp; mov  ecx, r12d; mov  rdi, rbx; lea  rsi, [rel 0x1dc4d9]  {"%s.%d@%s"}; xor  eax, eax; call sprintf; mov  rdi, rbx; call jump_strlen; 
0x4e3b5: mov  r14, qword [rax+0x40]; mov  qword [rsp+0x10], r8; mov  qword [rsp+0x8], rcx; mov  rdi, r14; call jump_strlen; 
0x148b80: endbr64 ; push r13; push r12; mov  r12, rdx; push rbp; mov  rbp, rsi; push rbx; mov  ebx, edi; mov  rdi, rsi; sub  rsp, 0x28; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x18], rax; xor  eax, eax; call jump_strlen; 
0x133eb6: call jump_strlen; 
0x133eca: mov  qword [rbp-0x58], rdx; call jump_strlen; 
0x118812: lea  rbp, [rax+0x1]; mov  rdi, rbp; call jump_strlen; 
0x12aeb0: endbr64 ; push r15; push r14; push r13; mov  r13, rdi; push r12; push rbp; xor  ebp, ebp; push rbx; mov  rbx, rsi; sub  rsp, 0x8; call jump_strlen; 
0x12aeee: mov  rdi, r15; call jump_strlen; 
0x12afd8: mov  rdi, rbx; add  rbp, 0x1; call jump_strlen; 
0x4b721: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r9; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0x48801: mov  r8, qword [rax+0x40]; mov  qword [rsp+0x18], r9; mov  qword [rsp+0x10], rcx; mov  rdi, r8; mov  qword [rsp+0x8], r8; call jump_strlen; 
0x11ce90: endbr64 ; push r13; push r12; mov  r12, rdi; mov  rdi, rsi; push rbp; push rbx; mov  rbx, rsi; sub  rsp, 0x8; call jump_strlen; 
0xe6876: lea  rdi, [r14+0x13]; call jump_strlen; 
0x159cbe: call jump_strlen; 
0x159d17: mov  rdi, r13; call jump_strlen; 
0x159d40: mov  rdi, r12; mov  qword [rbp-0x60], rdx; mov  dword [rbp-0x58], ecx; call jump_strlen; 
0x159de6: mov  rdi, r12; call jump_strlen; 
0x157fce: call jump_strlen; 
0x158053: mov  rdi, r12; mov  byte [rsp+0xf], dl; call jump_strlen; 
0x164800: mov  rdi, r15; call jump_strlen; 
0x164800: mov  rdi, r15; call jump_strlen; lea  ecx, [rax+0x3]; and  ecx, 0xfffffffc; lea  r11d, [rcx+0x1]; mov  dword [rbp+0x8], ecx; mov  rdi, r11; mov  dword [rsp+0x2c], ecx; mov  dword [rsp+0x28], r11d; mov  qword [rsp+0x20], r11; call malloc; mov  rdi, r13; mov  qword [rbp], rax; mov  qword [rsp+0x18], rax; call jump_strlen; 
0x106151: mov  rdi, rbp; or   byte [rel 0x221158], 0x80; call jump_strlen; 
0xab220: mov  rdi, rbp; add  r12, 0x1; call jump_strlen; 
0xdd012: mov  rdi, r12; call jump_strlen; 
0x3b6ec: mov  rdi, r13; call jump_strlen; 
0x3b6ec: mov  rdi, r13; call jump_strlen; mov  rdi, r15; mov  qword [rbp-0xe0], rax; call jump_strlen; 
0x3b74e: lea  rax, [rsp+0xf]; mov  rsi, r15; and  rax, 0xfffffffffffffff0; mov  rdi, rax; mov  qword [rbp-0xc0], rax; call jump___stpcpy; mov  rdx, qword [rbp-0xe0]; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_mempcpy; mov  rdi, rbx; mov  dword [rax], 0x6f6d2e; call jump_strlen; 
0x3bcc2: mov  rdi, r14; mov  qword [rbp-0xa8], r10; mov  qword [rbp-0x98], r9; call jump_strlen; 
0x3bcc2: mov  rdi, r14; mov  qword [rbp-0xa8], r10; mov  qword [rbp-0x98], r9; call jump_strlen; mov  rdi, qword [rbp-0xf0]; lea  r15, [rax+0x1]; call jump_strlen; 
0x1680e3: mov  rdi, r14; call jump_strlen; 
0xab180: endbr64 ; push r15; push r14; push r13; mov  r13, rdx; push r12; mov  r12, rdi; mov  rdi, rdx; push rbp; push rbx; mov  rbx, rsi; sub  rsp, 0x8; call jump_strlen; 
0x4090b: mov  rdi, qword [rsp]; call jump_strlen; 
0x40ad1: mov  rdi, qword [rsp]; mov  qword [rsp+0x8], r9; call jump_strlen; 
0x40c28: mov  rdi, r12; mov  qword [rsp+0x8], r9; call jump_strlen; 
0xab7af: mov  r14, qword [rsi]; mov  rbx, qword [rdi]; mov  r12, rcx; mov  rdi, rdx; mov  qword [rsp+0x78], 0x0; mov  r15d, 0x1; mov  qword [rsp+0x18], rbx; add  rbx, r14; mov  qword [rsp+0x48], r14; mov  qword [rsp+0x80], 0x0; call jump_strlen; 
0xab7af: mov  r14, qword [rsi]; mov  rbx, qword [rdi]; mov  r12, rcx; mov  rdi, rdx; mov  qword [rsp+0x78], 0x0; mov  r15d, 0x1; mov  qword [rsp+0x18], rbx; add  rbx, r14; mov  qword [rsp+0x48], r14; mov  qword [rsp+0x80], 0x0; call jump_strlen; mov  rdi, r12; mov  qword [rsp+0x58], rax; call jump_strlen; 
0xab844: mov  rdi, r12; call jump_strlen; 
0xab8f8: mov  rdi, r12; call jump_strlen; 
0xabac8: mov  rdi, r12; call jump_strlen; 
0xabb08: mov  rdi, r15; call jump_strlen; 
0x3620c: mov  rdi, rsp; call sub_36050; lea  rdi, [rsp+0x10]; call sub_36050; movzx   eax, word [rsp+0x18]; mov  rdi, r14; mov  word [rbx+0x10], ax; call jump_strlen; 
0x36247: mov  rdi, rbp; call jump_strlen; 
0x105f3b: shr  ebx, 0x3; shl  eax, 0x7; mov  qword [rbp+0x28], 0x0; mov  rdi, r14; and  ebx, 0x1; shl  ebx, 0x4; or   ebx, eax; movzx   eax, byte [rbp+0x38]; and  eax, 0x6f; or   ebx, eax; mov  byte [rbp+0x38], bl; call jump_strlen; 
0x9b800: endbr64 ; push r13; mov  r13, rdi; mov  rdi, rsi; push r12; mov  r12d, 0x22; push rbp; mov  rbp, rsi; push rbx; sub  rsp, 0x38; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x28], rax; xor  eax, eax; call jump_strlen; 
0x3d5d0: endbr64 ; mov  rsi, qword [rsi]; mov  rdi, qword [rdi]; lea  rdx, [rel data_2189a0]; jmp  jump___strcasecmp_l; 
0x36133: mov  rdx, rbp; mov  rsi, r14; mov  rdi, r12; call jump___strcasecmp_l; 
0x36149: mov  rdx, rbp; mov  rsi, r13; mov  rdi, r12; call jump___strcasecmp_l; 
0x36170: mov  rdx, rbp; lea  rsi, [rel 0x1d82be]  {",IGNORE"}; mov  rdi, r12; call jump___strcasecmp_l; 
0x36190: mov  rdx, rbp; mov  rsi, r15; mov  rdi, r12; call jump___strcasecmp_l; 
0x37573: lea  rdx, [rel data_2189a0]; lea  rsi, [rel 0x1d82ad]  {"TRANSLIT"}; call jump___strcasecmp_l; 
0x2a8a8: mov  qword [r15-0x8], r15; mov  rdi, qword [r8+r14+0x18]; mov  rdx, r12; lea  rsi, [rel 0x1d8130]  {"INTERNAL"}; call jump___strcasecmp_l; 
0x3dbf4: lea  r12, [r14+r15]; mov  rdx, rbp; mov  rdi, rbx; shr  r12, 0x1; mov  r13, r12; shl  r13, 0x4; add  r13, qword [rsp+0x8]; mov  rsi, qword [r13]; call jump___strcasecmp_l; 
0x903c0: mov  rsi, qword [rdi+0x350 {link_map::l_map_start}]; mov  rdi, qword [rbx+0x10]; pop  rbx; jmp  jump_strcpy; 
0x15433d: mov  rdi, r15; mov  rsi, rbp; call jump_strcpy; 
0x154455: mov  rdi, r15; mov  rsi, rbp; call jump_strcpy; 
0x512ba: mov  rbx, qword [rsp+0x8]; mov  rsi, rbp; mov  r12, r15; mov  rdi, rbx; mov  rbp, rbx; call jump_strcpy; 
0x39dea: mov  eax, dword [rsp+0xc]; mov  rsi, qword [rsp+0x10]; lea  rdi, [rbx+0x4]; mov  dword [rbx], eax; call jump_strcpy; 
0x153f31: mov  rdi, qword [rsp+0x18]; mov  rsi, rbp; call jump_strcpy; 
0x154078: mov  rdi, qword [rsp+0x18]; mov  rsi, rbp; call jump_strcpy; 
0x1743f7: mov  rsi, r10; mov  rdi, rbp; mov  qword [rsp], r10; call jump_strcpy; 
0x13b918: mov  rsi, qword [rsp+0x30]; mov  rdi, qword [rsp+0x18]; call jump_strcpy; 
0x3bd16: mov  rsi, r14; lea  rdi, [rax+0x38]; mov  rdx, r15; add  rbx, 0x1; mov  qword [rbp-0xc0], r10; call jump_mempcpy; mov  rdx, rbx; mov  rsi, r13; mov  r14, rax; mov  rdi, rax; call sub_28620; add  rbx, r14; mov  rsi, qword [rbp-0xf0]; mov  rdi, rbx; call jump_strcpy; 
0x1480f6: mov  rdi, qword [rsp+0x8]; mov  rsi, r12; call jump_strcpy; 
0x1484d3: mov  rsi, qword [rsp+0x20]; mov  rdi, qword [rsp+0x8]; call jump_strcpy; 
0x115aec: mov  rsi, r13; mov  rdi, rbp; mov  r12, rbp; call jump_strcpy; 
0x3bd16: mov  rsi, r14; lea  rdi, [rax+0x38]; mov  rdx, r15; add  rbx, 0x1; mov  qword [rbp-0xc0], r10; call jump_mempcpy; mov  rdx, rbx; mov  rsi, r13; mov  r14, rax; mov  rdi, rax; call sub_28620; add  rbx, r14; mov  rsi, qword [rbp-0xf0]; mov  rdi, rbx; call jump_strcpy; 
0xc554c: mov  rdi, rbp; call jump_wcschr; 
0xc57ab: mov  rdi, rbp; call jump_wcschr; 
0x530e8: mov  esi, 0x3a; mov  rdi, rbx; call jump_strchrnul; 
0x14aa3b: mov  esi, 0xa; mov  rdi, rbx; add  dword [rsp+0xc], 0x1; mov  r15, rbx; call jump_strchrnul; 
0xebf10: mov  esi, 0x3a; mov  rdi, r14; call jump_strchrnul; 
0x12ea8f: mov  esi, 0xa; mov  rdi, rax; call jump_strchrnul; 
0x12ebb0: lea  r15, [rbx+0x1]; mov  esi, 0xa; mov  dword [rsp+0x4], edx; mov  rdi, r15; call jump_strchrnul; 
0x894e0: lea  rdi, [rax+0x1]; mov  esi, 0x25; call jump_strchrnul; 
0x75131: mov  rax, qword [rsp+0x20]; mov  rdi, qword [rsp+0x8]; mov  esi, 0x25; movdqu  xmm1, xmmword [rax]; movups  xmmword [rsp+0x118], xmm1; mov  rax, qword [rax+0x10]; movaps  xmmword [rsp+0x10], xmm1; mov  qword [rsp+0x128], rax; call jump_strchrnul; 
0x76000: lea  r15, [rbx+0x1]; mov  esi, 0x25; add  dword [rsp+0x78], 0x1; mov  rdi, r15; call jump_strchrnul; 
0x7d917: mov  qword [rbx+0x18], rdi; mov  esi, 0x25; call jump_strchrnul; 
0x5d7f0: endbr64 ; push r15; push r14; push r13; push r12; push rbp; mov  rbp, rdx; push rbx; mov  rbx, rsi; mov  esi, 0x25; sub  rsp, 0x68; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x58], rax; xor  eax, eax; mov  qword [rsp+0x8], 0x0; call jump_strchrnul; 
0x8c4ba: lea  r15, [rax+0x5]; mov  esi, 0x2c; mov  rdi, r15; call jump_strchrnul; 
0x52e19: mov  rbx, rsi; mov  rdi, r15; mov  esi, 0x2c; call jump_strchrnul; 
0xeb9d4: mov  esi, 0x3a; mov  rdi, r14; call jump_strchrnul; 
0x13dba0: mov  rdi, r12; mov  esi, 0x2e; xor  r15d, r15d; call jump_strchrnul; 
0x38410: lea  r15, [rax+0x1]; mov  esi, 0x40; mov  rdi, r15; call jump_strchrnul; 
0x121f0f: sub  rdx, rbx; mov  esi, 0x2f; mov  rdi, rbx; call jump_memrchr; 
0xe3217: mov  rdi, r13; mov  esi, 0x20; mov  r13, r15; call jump_wmemset; 
0xe3478: mov  rdi, r13; mov  esi, 0x20; mov  r13, r15; call jump_wmemset; 
0xe3592: mov  rdi, r13; mov  r13, r15; call jump_wmemset; 
0xe36cc: mov  esi, 0x20; mov  rdi, r13; call jump_wmemset; 
0xe377b: mov  rdi, r13; mov  esi, 0x20; mov  r13, r12; call jump_wmemset; 
0xe38c7: mov  rdi, r13; mov  rdx, r15; mov  esi, 0x30; mov  qword [rbp-0x120], r8; mov  dword [rbp-0x130], r11d; lea  r13, [r13+r15*4]; call jump_wmemset; 
0xe395a: mov  rdi, r13; mov  esi, 0x20; mov  r13, r15; call jump_wmemset; 
0xe3ab0: mov  esi, 0x20; mov  rdi, r13; call jump_wmemset; 
0xe3b5a: mov  rdi, r13; mov  esi, 0x20; mov  r13, r12; call jump_wmemset; 
0xe3d37: mov  rdi, r13; mov  esi, 0x20; mov  dword [rbp-0x130], r9d; mov  r13, r15; call jump_wmemset; 
0xe3e69: mov  rdi, r13; mov  r13, r15; call jump_wmemset; 
0xe3f17: mov  rdi, r13; mov  esi, 0x20; mov  r13, r12; call jump_wmemset; 
0xe3fe6: mov  rdi, r13; mov  r13, r15; call jump_wmemset; 
0xe413f: mov  rdi, r13; mov  r13, r15; call jump_wmemset; 
0xe437f: mov  rdi, r13; mov  r13, r15; call jump_wmemset; 
0xe4822: mov  rdi, r13; mov  esi, 0x20; mov  r13, r12; call jump_wmemset; 
0xe4a41: mov  rdi, r13; call jump_wmemset; 
0xe4c32: mov  esi, 0x20; mov  rdi, r13; call jump_wmemset; 
0xe4d1d: mov  rdi, r13; mov  esi, 0x30; mov  r13, r15; call jump_wmemset; 
0xe4d51: mov  rdi, r13; mov  esi, 0x20; mov  dword [rbp-0x140], r9d; mov  qword [rbp-0x138], r8; mov  dword [rbp-0x120], r11d; mov  qword [rbp-0x130], rdx; call jump_wmemset; 
0xe4df6: mov  esi, 0x30; mov  rdi, r13; call jump_wmemset; 
0xe4e0f: mov  rdi, r13; mov  esi, 0x30; mov  r13, r15; call jump_wmemset; 
0xe4e3f: mov  rdi, r13; mov  esi, 0x30; mov  r13, r15; call jump_wmemset; 
0xe5098: mov  esi, 0x20; mov  rdi, r13; call jump_wmemset; 
0xe5293: mov  rdi, r13; mov  esi, 0x30; mov  r13, r15; call jump_wmemset; 
0xe52b6: mov  rdi, r13; mov  esi, 0x30; mov  r13, r12; call jump_wmemset; 
0xe52cb: mov  rdi, r13; mov  esi, 0x30; mov  r13, r12; call jump_wmemset; 
0xe52e0: mov  rdi, r13; mov  esi, 0x30; mov  r13, r12; call jump_wmemset; 
0xe54c1: mov  esi, 0x30; mov  rdi, r13; call jump_wmemset; 
0xe54dd: mov  rdi, r13; mov  esi, 0x30; mov  r13, r12; call jump_wmemset; 
0xe5506: mov  esi, 0x30; mov  rdi, r13; call jump_wmemset; 
0xe5523: mov  esi, 0x30; mov  rdi, r13; call jump_wmemset; 
0xc5c6c: add  rsp, 0x8; sub  rbx, rbp; xor  esi, esi; mov  rdx, rbx; pop  rbx; pop  rbp; pop  r12; pop  r13; jmp  jump_wmemset; 
0xf3b5e: lea  rsi, [r15+rax+0x1]; mov  rdx, rbx; mov  rdi, r12; mov  dword [rsp+0x68], r9d; mov  qword [rsp+0x60], rsi; call jump_memcmp; 
0xf3bca: mov  rdi, r11; mov  byte [rsp+0x88], r9b; mov  byte [rsp+0x80], r8b; mov  qword [rsp+0x78], r10; mov  byte [rsp+0x70], cl; mov  qword [rsp+0x68], rdx; mov  qword [rsp+0x60], r11; call jump_memcmp; 
0xf3dd3: mov  byte [rsp+0xa6], sil; lea  rsi, [rbp+rax+0x1]; mov  dword [rsp+0x98], r9d; mov  qword [rsp+0x90], r11; mov  qword [rsp+0x88], rcx; mov  qword [rsp+0x80], rdx; mov  qword [rsp+0x78], rdi; call jump_memcmp; 
0x166a26: mov  rsi, qword [rbx+0x90]; mov  rdi, qword [rsp+0x20]; movsxd  rdx, eax; call jump_memcmp; 
0x108e40: endbr64 ; add  rsi, 0x8; add  rdi, 0x8; mov  edx, 0x10; jmp  jump_memcmp; 
0x1027fd: mov  rdi, rcx; lea  rsi, [rbp+rax+0x1]; mov  rdx, r13; mov  qword [rsp+0x98], rcx; call jump_memcmp; 
0x102ccc: mov  rdi, r11; lea  rsi, [r12+rax+0x1]; mov  rdx, r15; mov  dword [rsp+0xdc], r10d; mov  qword [rsp+0xd0], r9; mov  qword [rsp+0xc8], r8; mov  qword [rsp+0xc0], r11; call jump_memcmp; 
0x10336b: lea  rsi, [rbp+rax+0x1]; mov  rdx, r13; mov  qword [rsp+0xb8], rdi; call jump_memcmp; 
0x103cbb: lea  rsi, [rbp+rax+0x1]; mov  rdx, r12; mov  qword [rsp+0xb8], rdi; call jump_memcmp; 
0x171a5f: add  rsi, rcx; mov  rdx, r9; mov  qword [rsp+0x20], r10; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r9; mov  qword [rsp+0x8], rdi; call jump_memcmp; 
0xfd21e: movsxd  rdi, dword [rsp+0x8]; movsxd  rsi, ecx; movsxd  rdx, ebx; mov  qword [rsp+0x30], r9; add  rsi, r8; mov  dword [rsp+0x28], ecx; add  rdi, r8; mov  qword [rsp+0x20], r8; call jump_memcmp; 
0xda24c: add  rax, r14; mov  rdx, rbx; mov  rdi, r13; lea  r15, [rbp+rax]; mov  rsi, r15; call jump_memcmp; 
0xf8d26: lea  rsi, [r13+rdx+0x1]; mov  rdx, r12; mov  dword [rsp+0x18], ecx; mov  qword [rsp+0x10], rdi; call jump_memcmp; 
0x13bf0b: mov  edx, dword [rbx+0x10]; mov  rdi, qword [rbx+0x18]; mov  rsi, r13; call jump_memcmp; 
0xda904: add  rax, rbp; mov  rdx, r13; mov  rdi, r14; lea  r12, [rbx+rax]; mov  rsi, r12; call jump_memcmp; 
0x1009f3: movsxd  r9, r15d; movsxd  rsi, ecx; lea  rdi, [rdx+rax]; mov  dword [rsp+0x58], ecx; add  r9, rdx; mov  rdx, rsi; mov  rsi, r9; call jump_memcmp; 
0xa8d1f: mov  rax, qword [rsp+0x18]; mov  rdx, r13; mov  rdi, rbx; lea  rsi, [rbx+rax]; call jump_memcmp; 
0xa90df: mov  rdx, r14; mov  rsi, r13; mov  rdi, r12; call jump_memcmp; 
0xa9238: mov  rdx, r14; mov  rsi, r13; mov  rdi, r12; call jump_memcmp; 
0x10cbd8: mov  rsi, qword [rbx+0x18]; mov  rdi, qword [rax+0x18]; call jump_memcmp; 
0x10cda5: lea  rax, [rbx+r12]; mov  rdi, qword [rbp-0x568]; mov  edx, 0x10; mov  r14, rax; and  rax, 0xfffffffffffffffe; shr  r14, 0x1; add  rax, r14; lea  r13, [rdi+rax*8]; mov  rdi, qword [rbp-0x570]; lea  rsi, [r13+0x8]; call jump_memcmp; 
0x38f6b: mov  rdx, qword [rbp-0x208]; mov  rsi, qword [rbp-0x268]; mov  rdi, r15; call jump_memcmp; 
0x39200: mov  rsi, qword [rbp-0x210]; mov  rdx, r13; mov  rdi, r15; call jump_memcmp; 
0x39228: mov  rdx, qword [rbp-0x1c0]; mov  rsi, qword [rbp-0x218]; mov  rdi, r15; call jump_memcmp; 
0x39258: mov  rdx, qword [rbp-0x1b0]; mov  rsi, qword [rbp-0x220]; mov  rdi, r15; call jump_memcmp; 
0x39288: mov  rdx, qword [rbp-0x1c8]; mov  rsi, qword [rbp-0x228]; mov  rdi, r15; call jump_memcmp; 
0x392e0: mov  rdx, qword [rbp-0x1d0]; mov  rsi, qword [rbp-0x230]; mov  rdi, r15; call jump_memcmp; 
0x39310: mov  rdx, qword [rbp-0x1d8]; mov  rsi, qword [rbp-0x238]; mov  rdi, r15; call jump_memcmp; 
0x39340: mov  rdx, qword [rbp-0x1e0]; mov  rsi, qword [rbp-0x240]; mov  rdi, r15; call jump_memcmp; 
0x39370: mov  rdx, qword [rbp-0x1e8]; mov  rsi, qword [rbp-0x248]; mov  rdi, r15; call jump_memcmp; 
0x393a0: mov  rdx, qword [rbp-0x1f0]; mov  rsi, qword [rbp-0x250]; mov  rdi, r15; call jump_memcmp; 
0x393d0: mov  rdx, qword [rbp-0x1f8]; mov  rsi, qword [rbp-0x258]; mov  rdi, r15; call jump_memcmp; 
0x39400: mov  rdx, qword [rbp-0x200]; mov  rsi, qword [rbp-0x260]; mov  rdi, r15; call jump_memcmp; 
0x12a65e: mov  rdx, r12; mov  rsi, r15; mov  rdi, r13; call jump_memcmp; 
0x1594dc: mov  rax, qword [r12+0x18]; mov  rdx, qword [rsp+0x18]; mov  dword [rsp+0xc], ecx; mov  rdi, qword [rsp+0x10]; mov  rsi, qword [rax]; call jump_memcmp; 
0x162561: mov  rdi, r12; call jump_strlen; mov  rsi, r12; mov  rdi, r15; lea  rdx, [rax+0x1]; call jump_memcmp; 
0x12aefe: mov  rdx, r12; mov  rsi, r15; mov  rdi, r13; call jump_memcmp; 
0xaab27: lea  rsi, [rbx+rcx]; mov  rdx, r15; mov  rdi, rbx; mov  qword [rsp+0x8], r8; mov  qword [rsp], rcx; call jump_memcmp; 
0xaaecd: mov  rdx, r13; mov  rsi, r15; mov  rdi, rbp; call jump_memcmp; 
0xde400: mov  rdi, qword [r12+0x60]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde487: mov  rdi, qword [r13+0x60]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde4f2: mov  rdi, qword [r13]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde561: mov  rdi, qword [r13+0x308]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde5da: mov  rdi, qword [r13+0x3c8]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde6bc: mov  rdi, qword [r13+0x38]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde73a: mov  rax, qword [rsp+0x8]; mov  rdi, qword [rax+rbp*8+0x78]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde7b0: mov  rax, qword [rsp+0x8]; mov  r14, qword [rsp+0x48]; mov  rdi, qword [rax+rbp*8+0x40]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xde8e6: mov  rdi, qword [rax+0x20]; mov  qword [rsp+0x20], rdi; call jump_strlen; mov  rsi, qword [rsp+0x48]; mov  rdi, qword [rsp+0x20]; mov  rcx, r15; mov  rdx, rax; mov  rbp, rax; call jump_strncasecmp_l; 
0xdec25: mov  r14, qword [rsp+0x8]; mov  r13, qword [r14+0x170]; mov  rdi, r13; call jump_strlen; mov  rsi, qword [rsp+0x20]; mov  rcx, r15; mov  rdi, r13; mov  rdx, rax; mov  rbp, rax; call jump_strncasecmp_l; 
0xdec57: mov  rax, qword [rsp+0x8]; mov  r13, qword [rax+0x178]; mov  rdi, r13; call jump_strlen; mov  rsi, qword [rsp+0x48]; mov  rcx, r15; mov  rdi, r13; mov  rdx, rax; mov  rbp, rax; call jump_strncasecmp_l; 
0xdf380: mov  rdi, qword [r12]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xdf3c2: mov  rdi, qword [r12+0x308]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xdf404: mov  rdi, qword [r12+0x3c8]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xdf4a9: mov  rdi, qword [r13]; mov  r14, qword [rsp+0x48]; mov  qword [rsp+0x28], rdi; call jump_strlen; mov  rdi, qword [rsp+0x28]; mov  rcx, r15; mov  rsi, r14; mov  rdx, rax; mov  qword [rsp+0x38], rax; call jump_strncasecmp_l; 
0xdf950: mov  r13, qword [rel data_216f50]; mov  rdi, r13; call jump_strlen; mov  rcx, r15; mov  rsi, r14; mov  rdi, r13; mov  rdx, rax; mov  rbp, rax; call jump_strncasecmp_l; 
0xdf97b: mov  r13, qword [rel data_216f58]; mov  rdi, r13; call jump_strlen; mov  rsi, qword [rsp+0x48]; mov  rcx, r15; mov  rdi, r13; mov  rdx, rax; mov  rbp, rax; call jump_strncasecmp_l; 
0xe02d7: mov  r14, qword [rax+0x20]; mov  rdi, r14; call jump_strlen; mov  rsi, qword [rsp+0x48]; mov  rcx, r15; mov  rdi, r14; mov  rdx, rax; mov  rbp, rax; call jump_strncasecmp_l; 
0x4f2a8: mov  rcx, r14; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r12; call jump_strncasecmp_l; 
0x4f33b: mov  rcx, r14; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r12; call jump_strncasecmp_l; 
0x4f363: lea  rbx, [r12+0x3]; mov  rcx, r14; mov  edx, 0x5; add  r12, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x583c8: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x58464: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x5848c: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x583c8: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x58464: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x5848c: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x49808: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x498a4: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x498cc: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x4c648: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x4c6e4: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x4c70c: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x49808: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x498a4: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x498cc: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x583c8: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x58464: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x5848c: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x4f2a8: mov  rcx, r14; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r12; call jump_strncasecmp_l; 
0x4f33b: mov  rcx, r14; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r12; call jump_strncasecmp_l; 
0x4f363: lea  rbx, [r12+0x3]; mov  rcx, r14; mov  edx, 0x5; add  r12, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x4c648: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x4c6e4: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x4c70c: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x4f2a8: mov  rcx, r14; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r12; call jump_strncasecmp_l; 
0x4f33b: mov  rcx, r14; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r12; call jump_strncasecmp_l; 
0x4f363: lea  rbx, [r12+0x3]; mov  rcx, r14; mov  edx, 0x5; add  r12, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x4c648: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x4c6e4: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x4c70c: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0x49808: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85f4]; mov  rdi, r13; call jump_strncasecmp_l; 
0x498a4: mov  rcx, r12; mov  edx, 0x3; lea  rsi, [rel 0x1d85ea]; mov  rdi, r13; call jump_strncasecmp_l; 
0x498cc: lea  rbx, [r13+0x3]; mov  rcx, r12; mov  edx, 0x5; add  r13, 0x8; mov  rdi, rbx; lea  rsi, [rel 0x1d85ee]  {"inity"}; call jump_strncasecmp_l; 
0xf25fa: mov  rax, qword [rsp+0x50]; mov  rsi, rbp; mov  rdi, qword [rax+r14*8]; call jump_strcat; 
0xc53c0: endbr64 ; push r12; mov  r12, rdi; push rbp; mov  rbp, rsi; sub  rsp, 0x8; call sub_28660; mov  rsi, rbp; lea  rdi, [r12+rax*4]; call jump_wcscpy; 
0x11030e: mov  rsi, qword [rsp+0x38]; mov  rdi, rbp; call jump_strcspn; 
0x3b02d: add  r8, 0x8; lea  rsi, [rel 0x1d852d]; mov  rdi, r8; mov  qword [rbp-0x78], r8; call jump_strcspn; 
0xa9dd3: mov  rbx, rdi; mov  rdi, r12; call jump_strcspn; 
0xa9407: mov  rsi, rbp; mov  rdi, r12; call jump_strcspn; 
0x13076c: pop  rbx; pop  rbp; pop  r12; pop  r13; pop  r14; jmp  jump_strcasecmp; 
0x14b10b: sub  rbx, rax; mov  rsi, r13; lea  rbp, [r12+rbx]; mov  rdi, rbp; call jump_strcasecmp; 
0x14b130: mov  rbp, rbx; mov  rsi, r15; sub  rbp, rax; add  rbp, r12; mov  rdi, rbp; call jump_strcasecmp; 
0x14b160: mov  rbp, rbx; mov  rsi, r15; sub  rbp, rax; add  rbp, r12; mov  rdi, rbp; call jump_strcasecmp; 
0x14b180: mov  rbp, rbx; mov  rsi, r15; sub  rbp, rax; add  rbp, r12; mov  rdi, rbp; call jump_strcasecmp; 
0x158bb7: mov  rax, qword [rsp+0x60]; mov  rdi, r13; mov  rsi, rax; mov  qword [rsp], rax; call jump_strcasecmp; 
0x158c01: mov  rdi, r13; call jump_strcasecmp; 
0x15be04: mov  qword [rsp+0x28], r9; mov  qword [rsp+0x8], rdx; call jump_strcasecmp; 
0x14571a: mov  rax, qword [rsp+0x20]; mov  rsi, r15; mov  qword [rsp+0x80], r9; mov  qword [rsp+0x30], r8; mov  rdi, qword [rax]; mov  dword [rsp+0x90], r10d; mov  dword [rsp+0x8c], edx; call jump_strcasecmp; 
0x145970: mov  rax, qword [rsp+0x20]; mov  rsi, r15; mov  qword [rsp+0x80], r9; mov  qword [rsp+0x30], r8; mov  rdi, qword [rax]; mov  dword [rsp+0x90], r10d; mov  dword [rsp+0x8c], edx; call jump_strcasecmp; 
0x145f54: mov  rdi, qword [rsp+0x50]; mov  rsi, r15; mov  qword [rsp+0x90], r9; mov  dword [rsp+0x8c], r10d; mov  qword [rsp+0x80], r8; call jump_strcasecmp; 
0x1474b7: mov  rsi, r12; mov  rdi, r13; call jump_strcasecmp; 
0x13ef52: mov  rsi, rax; mov  rdi, r14; call jump_strcasecmp; 
0x13ef94: mov  rsi, rax; call jump_strcasecmp; 
0x15b0c8: mov  rax, qword [rel data_218e10]; mov  ecx, dword [rsp+0x1c]; mov  dword [fs:rax], ecx; mov  rsi, qword [rsp+0x10]; mov  rdi, qword [r13]; call jump_strcasecmp; 
0x1595d3: mov  rsi, qword [rbx]; mov  rdi, rbp; call jump_strcasecmp; 
0x159605: mov  rdi, rbp; call jump_strcasecmp; 
0x1499a6: mov  rsi, r13; mov  rdi, r12; call jump_strcasecmp; 
0x1597c8: mov  rax, qword [rsp+0x40]; mov  rdi, r12; mov  rsi, rax; mov  qword [rsp+0x10], rax; call jump_strcasecmp; 
0x15981c: mov  rdi, r12; call jump_strcasecmp; 
0x13dc5d: mov  rdi, qword [rbp-0x4e8]; mov  rsi, r12; call jump_strcasecmp; 
0x13dc94: mov  rsi, qword [rbp-0x4f0]; mov  rdi, rax; mov  qword [rbp-0x4e0], rax; call jump_strcasecmp; 
0x15a107: mov  rsi, qword [rbp]; mov  rdi, rbx; call jump_strcasecmp; 
0x15a135: mov  rdi, rbx; call jump_strcasecmp; 
0x12741b: mov  edx, 0xa; mov  rsi, rbp; call jump_strncmp; 
0x107e93: mov  rdx, r14; mov  rsi, r15; mov  rdi, r12; call jump_strncmp; 
0x107f31: mov  rdx, r13; mov  rsi, r14; call jump_strncmp; 
0x14b319: mov  edx, 0x6; mov  rsi, rbp; mov  rdi, r15; call jump_strncmp; 
0x14b331: mov  edx, 0x8; mov  rsi, r12; mov  rdi, r15; call jump_strncmp; 
0x14b349: mov  edx, 0x9; mov  rsi, r13; mov  rdi, r15; call jump_strncmp; 
0x14b400: mov  edx, 0x6; mov  rsi, r14; mov  rdi, r15; call jump_strncmp; 
0x14b418: mov  edx, 0x5; lea  rsi, [rel 0x1d63a0]  {"edns0"}; mov  rdi, r15; call jump_strncmp; 
0x14b434: mov  edx, 0x15; lea  rsi, [rel 0x1d63c0]  {"single-request-reopen"}; mov  rdi, r15; call jump_strncmp; 
0x14b450: mov  edx, 0xe; lea  rsi, [rel 0x1d63e0]  {"single-request"}; mov  rdi, r15; call jump_strncmp; 
0x14b46c: mov  edx, 0xc; lea  rsi, [rel 0x1d6400]  {"no_tld_query"}; mov  rdi, r15; call jump_strncmp; 
0x14b484: mov  edx, 0xc; lea  rsi, [rel 0x1d6420]  {"no-tld-query"}; mov  rdi, r15; call jump_strncmp; 
0x14b49c: mov  edx, 0x9; lea  rsi, [rel 0x1d6440]  {"no-reload"}; mov  rdi, r15; call jump_strncmp; 
0x14b4b4: mov  edx, 0x6; lea  rsi, [rel 0x1d6460]  {"use-vc"}; mov  rdi, r15; call jump_strncmp; 
0x14b4cc: mov  edx, 0x8; lea  rsi, [rel 0x1d6480]  {"trust-ad"}; mov  rdi, r15; call jump_strncmp; 
0x155680: lea  rdi, [r12+0x218]; mov  rdx, rbx; mov  rsi, r13; call jump_strncmp; 
0x17276c: lea  rsi, [rdi+0x28]; mov  edx, 0x4; lea  rdi, [rel 0x227cc8]; call jump_strncmp; 
0x172790: lea  rsi, [rdi+0x8]; mov  edx, 0x20; lea  rdi, [rel 0x227ca8]; call jump_strncmp; 
0x15beac: mov  byte [rax], 0x0; add  rdx, 0x2; test r12b, r12b; lea  rsi, [rel 0x1dc2f3]  {":include:"}; cmovne  r13, rdx; mov  rdi, rbp; mov  edx, 0x9; call jump_strncmp; 
0x172e62: mov  rax, qword [rsp+0x8]; mov  edx, 0x20; mov  rsi, r15; mov  qword [rsp], rcx; lea  rdi, [rax+0x8]; call jump_strncmp; 
0x1732d3: lea  rsi, [r12+0x28]; mov  edx, 0x4; mov  qword [rsp+0x18], r8; lea  rdi, [rel 0x227cc8]; call jump_strncmp; 
0x1733d0: mov  rsi, qword [rsp+0x8]; mov  edx, 0x20; mov  qword [rsp+0x18], r8; lea  rdi, [rel 0x227ca8]; call jump_strncmp; 
0x172ba9: mov  edx, 0x4; mov  rsi, r15; lea  rdi, [rel 0x227cc8]; call jump_strncmp; 
0x172bd0: mov  edx, 0x20; mov  rsi, r14; mov  rdi, r13; call jump_strncmp; 
0x10db1e: mov  edx, 0x4; mov  rsi, rbp; mov  rdi, r14; call jump_strncmp; 
0x11d550: mov  edx, 0x6; mov  rsi, r13; mov  rdi, rbp; call jump_strncmp; 
0x11d580: mov  edx, 0x6; mov  rsi, r14; mov  rdi, rbp; call jump_strncmp; 
0x131486: lea  rcx, [rel 0x1d6210]  {"dup-args-note"}; mov  edx, 0xd; mov  rdi, r14; mov  rsi, rcx; call jump_strncmp; 
0x1314ac: add  rcx, 0x10; mov  edx, 0xd; mov  rdi, r14; mov  rsi, rcx; call jump_strncmp; 
0x131536: lea  rcx, [rel 0x1d6230]  {"long-opt-col"}; mov  edx, 0xc; mov  rdi, r14; mov  rsi, rcx; call jump_strncmp; 
0x13155c: lea  rcx, [rel 0x1d6270]  {"usage-indent"}; mov  edx, 0xc; mov  rdi, r14; mov  rsi, rcx; call jump_strncmp; 
0x13159a: lea  rcx, [rel 0x1d6240]  {"doc-opt-col"}; mov  edx, 0xb; mov  rdi, r14; mov  rsi, rcx; call jump_strncmp; 
0x1315c0: add  rcx, 0x10; mov  edx, 0xb; mov  rdi, r14; mov  rsi, rcx; call jump_strncmp; 
0x131640: mov  edx, 0x8; lea  rsi, [rel 0x1d6200]  {"dup-args"}; mov  rdi, r14; call jump_strncmp; 
0x131676: lea  rcx, [rel 0x1d6260]  {"header-col"}; mov  edx, 0xa; mov  rdi, r14; mov  rsi, rcx; call jump_strncmp; 
0x1316b2: mov  edx, 0x7; lea  rsi, [rel 0x1d6280]  {"rmargin"}; mov  rdi, r14; call jump_strncmp; 
0x14b739: mov  edx, 0x6; lea  rsi, [rel 0x1dbf8f]  {"domain"}; mov  rdi, r13; call jump_strncmp; 
0x14b76a: mov  edx, 0xa; lea  rsi, [rel 0x1dbf9d]  {"nameserver"}; mov  rdi, r13; call jump_strncmp; 
0x14b797: mov  edx, 0x8; lea  rsi, [rel 0x1dbfa8]  {"sortlist"}; mov  rdi, r13; call jump_strncmp; 
0x14b7c8: mov  edx, 0x7; lea  rsi, [rel 0x1db746]  {"options"}; mov  rdi, r13; call jump_strncmp; 
0x14b840: mov  edx, 0x6; lea  rsi, [rel 0x1dbf96]  {"search"}; mov  rdi, r13; call jump_strncmp; 
0xe6005: mov  rsi, qword [rsp]; mov  rdx, rax; mov  rdi, r13; call jump_strncmp; 
0x44e33: mov  rdx, rbx; mov  rsi, r12; mov  rdi, r14; call jump_strncmp; 
0x52e60: mov  rdx, r13; mov  rsi, rbp; mov  rdi, r15; mov  r12d, r14d; call jump_strncmp; 
0x15b698: mov  r15, qword [rsp+0x28]; mov  rsi, qword [rsp+0x18]; mov  rdx, rax; mov  rdi, r15; call jump_strncmp; 
0x173d88: mov  r12, qword [rsp+0x8]; lea  rsi, [rel 0x1dc64e]  {"/dev/"}; mov  edx, 0x5; mov  rdi, r12; call jump_strncmp; 
0x44c24: lea  rdi, [r12+0x2]; mov  rdx, r14; mov  rsi, r15; call jump_strncmp; 
0x45218: mov  rdx, r13; mov  rsi, r12; mov  rdi, rbx; call jump_strncmp; 
0x3843d: mov  rdx, rbx; mov  rsi, r15; mov  rdi, rax; call jump_strncmp; 
0x3e0c0: mov  rdi, qword [rsp+0x98]; mov  edx, 0xb; lea  rsi, [rel 0x1d8555]  {"LC_MESSAGES"}; call jump_strncmp; 
0xd85f0: endbr64 ; push rbp; mov  rdx, rsi; mov  rbp, rdi; push rbx; mov  rbx, rsi; xor  esi, esi; sub  rsp, 0x8; call jump_wmemchr; 
0xf1167: mov  rdx, qword [rsp+0x8]; mov  esi, dword [rsp+0x5c]; mov  rdi, r14; mov  qword [rsp+0xc0], 0x0; sub  rdx, r14; sar  rdx, 0x2; call jump_wmemchr; 
0xf2099: mov  rdx, qword [rsp+0x8]; mov  esi, 0x2f; mov  rdi, r14; sub  rdx, r14; sar  rdx, 0x2; call jump_wmemchr; 
0x1780b5: mov  rdi, qword [rsp+0x10]; mov  rsi, r14; call jump___stpncpy; 
0x134b19: jmp  jump___stpncpy; 
0xad160: mov  rbx, qword [rbp-0x60]; add  rax, 0x1; mov  rsi, qword [rbp-0x98]; mov  rdi, qword [rbp-0x68]; cmp  rax, rbx; cmovbe  rbx, rax; mov  rdx, rbx; call jump___stpncpy; 
0xd059b: add  rsp, 0xf8; pop  rbx; pop  rbp; pop  r12; pop  r13; pop  r14; pop  r15; jmp  jump_wcscmp; 
0xd05b1: mov  rsi, qword [rsp+0xb8]; mov  rdi, qword [rsp+0xb0]; call jump_wcscmp; 
0xa9980: endbr64 ; xchg rsi, rdi; jmp  jump_memmove; 
0x127508: mov  esi, 0xa; mov  rdi, r13; call jump_strrchr; 
0x1326d8: mov  rax, qword [rel program_invocation_name]; mov  rdi, rbp; mov  qword [rax], rsi; mov  esi, 0x2f; call jump_strrchr; 
0x15cdab: mov  rbp, rax; mov  qword [rax], 0x0; mov  rax, qword [rel data_1e2788]  {0xffffffffffffffff}; mov  rsi, r15; lea  r13, [rbp+0x1028]; lea  rdx, [rbx+0x1]; mov  qword [rbp+0x14], rax  {0xffffffffffffffff}; mov  rdi, r13; call sub_28620; mov  byte [rbp+0x1c], 0x0; mov  esi, 0x2f; mov  rdi, r15; call jump_strrchr; 
0x377e0: mov  rdi, qword [rbx]; mov  esi, 0x2f; call jump_strrchr; 
0x52f39: mov  esi, 0x2f; call jump_strrchr; 
0x125aba: mov  rdi, rbp; mov  esi, 0x2f; call jump_strrchr; 
0x1764be: add  rax, qword [rbx+0x10]; mov  esi, 0x2f; mov  rdi, r12; mov  qword [rbp-0x4f0], rax; call jump_strrchr; 
0xee84e: add  rax, qword [rbx+0x10]; mov  esi, 0x2f; mov  rdi, r12; mov  qword [rbp-0x4f0], rax; call jump_strrchr; 
0x13355c: mov  rdi, rbx; mov  esi, 0x2f; call jump_strrchr; 
0x11de40: mov  esi, 0x2f; mov  rdi, r13; mov  r12d, 0x1; call jump_strrchr; 
0xac050: endbr64 ; push rbx; mov  esi, 0x2f; mov  rbx, rdi; call jump_strrchr; 
0x1187d6: movzx   eax, word [r12+0x42]; mov  rdi, qword [rbx+0x20]; lea  r13, [r12+0x70]; mov  rsi, r13; mov  word [r12+0x40], ax; lea  rdx, [rax+0x1]; call jump_memmove; mov  esi, 0x2f; mov  rdi, r13; call jump_strrchr; 
0x121ed4: push rbx; mov  esi, 0x2f; mov  rbx, rdi; call jump_strrchr; 
0x11033b: mov  rdi, qword [rsp+0x38]; call jump_index; 
0x2bf84: mov  esi, 0x3a; mov  rdi, r12; call jump_index; 
0x2bfab: lea  rcx, [rbx+0x1]; xor  eax, eax; lea  rdi, [r15+0x1]; mov  esi, 0x3a; cmp  r15, rcx; mov  rbx, r15; setne   al; add  r14d, eax; call jump_index; 
0xebdfd: mov  r12, rsi; mov  esi, 0x2f; mov  r15, rdi; mov  r13, rdx; call jump_index; 
0x107fd4: movsx   esi, byte [rbp-0x89]; mov  rdi, qword [rbp-0x88]; call jump_index; 
0x3d6e5: mov  esi, 0xa; mov  rdi, rbx; mov  r12, rbx; call jump_index; 
0x3d7a0: mov  esi, 0xa; mov  rdi, rbx; call jump_index; 
0x108646: lea  r9, [rdx+0x1]; mov  rdi, r13; mov  qword [rsp+0x20], rdx; mov  qword [rbx+0x20], r9; movsx   r14d, byte [rdx]; mov  qword [rsp+0x28], r9; mov  esi, r14d; mov  byte [rsp+0x18], r14b; call jump_index; 
0x1087b3: movsx   esi, al; mov  rdi, r13; mov  dword [rsp+0x20], r9d; mov  qword [rsp+0x18], rcx; call jump_index; 
0x10dd00: mov  rdi, qword [rsp+0x30]; mov  esi, r14d; call jump_index; 
0x10ddc3: movsx   r14d, byte [rbx]; mov  rdi, qword [rsp+0x18]; mov  esi, r14d; mov  ebp, r14d; call jump_index; 
0x11cb45: movsx   ebx, r13b; mov  rdi, r12; mov  esi, ebx; call jump_index; 
0x11d366: mov  esi, 0xa; mov  rdi, rbp; call jump_index; 
0x11d432: mov  qword [rel 0x2212c8], rbp; xor  eax, eax; cmp  byte [rbp], 0x0; mov  esi, 0xa; cmovne  rax, rbp; mov  rdi, rbp; mov  qword [rel 0x2212c8], rax; call jump_index; 
0x11d59a: mov  esi, 0x3d; mov  rdi, rbp; call jump_index; 
0x12fc11: mov  esi, 0xa; call jump_index; 
0x12fc64: mov  esi, 0xa; call jump_index; 
0x12fcb7: mov  esi, 0xa; call jump_index; 
0x12fd0a: mov  esi, 0xa; call jump_index; 
0x12fd5d: mov  esi, 0xa; call jump_index; 
0x12fdaf: mov  esi, 0xa; call jump_index; 
0x12fdf5: mov  esi, 0xa; xor  r12d, r12d; call jump_index; 
0x12fe33: mov  esi, 0xa; xor  r15d, r15d; call jump_index; 
0x12fe69: mov  esi, 0xa; xor  r14d, r14d; call jump_index; 
0x12e448: mov  esi, 0xb; mov  rdi, rax; call jump_index; 
0x154284: mov  esi, 0x3a; mov  rdi, rbp; mov  qword [rsp+0x18], rdx; mov  byte [rsp+0x17], cl; call jump_index; 
0x13fb4c: mov  rdi, qword [rax]; mov  esi, 0x2e; call jump_index; 
0x13fbc8: mov  r10, qword [rbp-0x450]; mov  esi, 0x2e; mov  rdi, r10; mov  qword [rbp-0x490], r10; call jump_index; 
0x13fcd9: mov  rdi, qword [rax]; mov  esi, 0x2e; call jump_index; 
0x13fd6a: mov  rdi, qword [rax]; mov  esi, 0x2e; call jump_index; 
0x1461c7: movd xmm0, eax; movd xmm1, edx; mov  esi, 0x2e; mov  rdi, r12; punpckldq xmm0, xmm1; movq qword [rbx+0x10], xmm0; call jump_index; 
0x14b8ab: mov  esi, 0xa; mov  rdi, r13; call jump_index; 
0x14ba61: mov  esi, 0x25; mov  rdi, r13; call jump_index; 
0x14bda6: mov  esi, 0x2e; mov  rdi, r12; call jump_index; 
0x10a34c: mov  rdi, qword [rbp-0x1c0]; mov  esi, 0x25; mov  qword [rbp-0x198], r8; call jump_index; 
0x10b989: mov  r13, qword [rsp+0x58]; mov  esi, 0x23; mov  rdi, r13; call jump_index; 
0x10be3f: mov  rax, qword [rel data_218e10]; mov  esi, 0x2f; mov  rdi, r14; mov  dword [fs:rax], 0x0; call jump_index; 
0x10bf37: mov  rax, qword [rel data_218e10]; mov  esi, 0x2f; mov  rdi, r14; xor  r13d, r13d; mov  dword [fs:rax], 0x0; call jump_index; 
0x10e876: mov  esi, 0x3d; mov  rdi, r14; call jump_index; 
0x11c897: mov  esi, 0xa; mov  rdi, rbx; lea  r15, [rsp+0x10]; call jump_index; 
0x11ca10: mov  esi, 0xa; mov  rdi, r15; call jump_index; 
0xa9073: movzx   ebp, bl; mov  r13, rsi; mov  esi, ebp; call jump_index; 
0x2c7e7: mov  r13, qword [rsp+0x28]; mov  esi, 0x23; mov  rdi, r13; call jump_index; 
0xb1083: mov  rbx, rdi; movsx   esi, sil; mov  rdi, r12; call jump_index; 
0xabff8: mov  rdi, r14; call jump_strlen; mov  esi, 0x3d; mov  rdi, r14; lea  rbx, [rax+0x1]; call jump_index; 
0x45166: mov  r12, rsi; mov  esi, 0x3d; mov  r13d, edx; call jump_index; 
0x5337c: mov  esi, 0x3a; mov  rdi, r12; call jump_index; 
0x153e30: mov  esi, 0x3a; mov  rdi, rbp; mov  dword [rsp+0x2c], r9d; mov  qword [rsp+0x20], r10; mov  byte [rsp+0x28], cl; call jump_index; 
0x13e2ee: mov  r14, qword [rsp+0x28]; mov  esi, 0x23; mov  rdi, r14; call jump_index; 
0x3bc09: mov  esi, 0x2f; mov  rdi, r15; call jump_index; 
0xe8835: mov  esi, 0xa; mov  rdi, rbx; call jump_index; 
0x12d488: mov  esi, 0xa; mov  rdi, rbx; call jump_index; 
0x40500: endbr64 ; push r15; push r14; push r13; mov  r13, rdi; push r12; mov  r12d, esi; mov  esi, 0x2f; push rbp; call jump_index; 
0x40699: mov  rdi, r14; mov  esi, 0x2f; call jump_index; 
0x44c60: endbr64 ; push rbp; mov  esi, 0x3d; mov  rbp, rsp; push r13; mov  r13, rdi; push r12; push rbx; sub  rsp, 0x28; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x28], rax; xor  eax, eax; call jump_index; 
0x12bfb0: endbr64 ; push r14; push r13; push r12; push rbp; mov  rbp, rsi; mov  esi, 0xa; push rbx; mov  rbx, rdi; sub  rsp, 0x10; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x8], rax; xor  eax, eax; call jump_index; 
0x1683b0: endbr64 ; push r12; mov  r12, rsi; mov  esi, 0x2e; push rbp; push rbx; movsxd  rbx, edx; call jump_index; 
0x1683cd: lea  rbp, [rax+0x1]; mov  esi, 0x40; mov  rdi, rbp; call jump_index; 
0x1762ea: mov  esi, 0x7b; mov  rdi, r12; call jump_index; 
0x176975: mov  rdi, qword [rbp-0x4c0]; mov  esi, 0x5c; call jump_index; 
0x176aaa: mov  rdi, qword [rbp-0x4c0]; mov  esi, 0x2f; call jump_index; 
0x17719f: mov  rdi, qword [rbp-0x4c0]; mov  esi, 0x2f; call jump_index; 
0x1779ea: mov  r14, qword [rbp-0x4c0]; mov  esi, 0x5c; mov  rdi, r14; call jump_index; 
0xee67a: mov  esi, 0x7b; mov  rdi, r12; call jump_index; 
0xeed05: mov  rdi, qword [rbp-0x4c0]; mov  esi, 0x5c; call jump_index; 
0xeee3a: mov  rdi, qword [rbp-0x4c0]; mov  esi, 0x2f; call jump_index; 
0xef52f: mov  rdi, qword [rbp-0x4c0]; mov  esi, 0x2f; call jump_index; 
0xefd7a: mov  r14, qword [rbp-0x4c0]; mov  esi, 0x5c; mov  rdi, r14; call jump_index; 
0x1336bc: mov  rdi, qword [rbp-0x108]; mov  esi, ebx; call jump_index; 
0xeb8ad: mov  rbx, rsi; mov  esi, 0x2f; mov  r13, rdi; mov  r12, rdx; call jump_index; 
0x451d3: mov  esi, 0x3d; call jump_index; 
0x13dc7a: mov  rdi, qword [rbp-0x4e8]; mov  esi, 0x2e; call jump_index; 
0xea060: endbr64 ; push r13; push r12; mov  r12, rsi; mov  esi, 0xa; push rbp; push rbx; mov  rbx, rdi; sub  rsp, 0x18; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x8], rax; xor  eax, eax; call jump_index; 
0x38c83: mov  esi, 0x3b; mov  rdi, r12; movaps  xmmword [rbp-0x190], xmm0; movaps  xmmword [rbp-0x180], xmm0; movaps  xmmword [rbp-0x170], xmm0; movups  xmmword [rbp-0x158], xmm0; movups  xmmword [rbp-0x148], xmm0; movups  xmmword [rbp-0x138], xmm0; call jump_index; 
0x38eb8: mov  esi, 0x3d; mov  rdi, r15; call jump_index; 
0x392b0: lea  rdi, [rbx+0x1]; cdqe ; mov  esi, 0x3b; or   r12d, edx; mov  qword [rbp+rax*8-0x190], rdi; call jump_index; 
0x38000: mov  esi, 0x2e; mov  rdi, r13; call jump_index; 
0x1466a1: mov  esi, 0x2e; mov  rdi, r14; call jump_index; 
0x367e4: mov  esi, 0x3b; mov  rdi, rbx; movaps  xmmword [rsp+0x40], xmm0; movaps  xmmword [rsp+0x50], xmm0; movaps  xmmword [rsp+0x60], xmm0; movups  xmmword [rsp+0x78], xmm0; movups  xmmword [rsp+0x88], xmm0; movups  xmmword [rsp+0x98], xmm0; call jump_index; 
0x36950: mov  esi, 0x3d; mov  rdi, r14; call jump_index; 
0x36d08: lea  rdi, [rax+0x1]; mov  esi, 0x3b; movsxd  rax, edx; mov  qword [rsp+rax*8+0x40], rdi; call jump_index; 
0x11cd7e: mov  esi, 0x2c; call jump_index; 
0x11cec6: mov  esi, 0x2c; call jump_index; 
0x159b88: mov  esi, 0x2e; mov  rdi, r12; call jump_index; 
0x159b9e: lea  rdi, [rax+0x1]; mov  esi, 0x2e; call jump_index; 
0x159bb5: lea  rdi, [rax+0x1]; mov  esi, 0x2e; call jump_index; 
0x3bc09: mov  esi, 0x2f; mov  rdi, r15; call jump_index; 
0x1680ad: mov  esi, 0x2e; mov  rdi, r12; call jump_index; 
0x40800: endbr64 ; push r15; mov  r15, rsi; mov  esi, 0x2f; push r14; push r13; push r12; mov  r12, rdx; push rbp; push rbx; sub  rsp, 0xc8; mov  qword [rsp], rdi; mov  qword [rsp+0x10], rcx; mov  rax, qword [fs:0x28]; mov  qword [rsp+0xb8], rax; xor  eax, eax; call jump_index; 
0x111848: movsx   esi, bpl; lea  rdi, [rel data_1da054]; mov  dword [rsp+0x18], esi; call jump_index; 
0x111989: movsx   esi, bpl; mov  rdi, r12; call jump_index; 
0x1121b0: lea  rdi, [rel data_1da057]  {"\n|&;<>(){}"}; call jump_index; 
0xe5f20: mov  qword [r15], rbp; mov  rdi, rbp; xor  esi, esi; add  r15, 0x8; call jump_wcschr; 
0xe5a62: lea  r14, [rbp+0x20]; mov  dword [rbx+0x40], eax; add  rbx, 0x48; mov  qword [rbx-0x28], r14; mov  rdi, r14; call jump_strlen; lea  r14, [r14+rax+0x1]; mov  qword [rbx-0x20], r14; mov  rdi, r14; call jump_strlen; xor  esi, esi; lea  rdi, [r14+rax+0x1]; sub  rbp, rdi; and  ebp, 0x3; add  rdi, rbp; mov  qword [rbx-0x18], rdi; call jump_wcschr; 
0xe5a62: lea  r14, [rbp+0x20]; mov  dword [rbx+0x40], eax; add  rbx, 0x48; mov  qword [rbx-0x28], r14; mov  rdi, r14; call jump_strlen; lea  r14, [r14+rax+0x1]; mov  qword [rbx-0x20], r14; mov  rdi, r14; call jump_strlen; xor  esi, esi; lea  rdi, [r14+rax+0x1]; sub  rbp, rdi; and  ebp, 0x3; add  rdi, rbp; mov  qword [rbx-0x18], rdi; call jump_wcschr; xor  esi, esi; lea  rdi, [rax+0x4]; mov  qword [rbx-0x10], rdi; call jump_wcschr; 
0x16cdd0: push rbp; sub  eax, edx; mov  rbp, rdi; push rbx; mov  ebx, edx; mov  rdx, rbx; sub  rsp, 0x8; mov  dword [rdi+0x28], eax; mov  rdi, qword [rdi+0x18]; call jump_memcpy; 
0x2cdc4: lea  rdi, [r8+0x10]; mov  rsi, rbx; mov  qword [rsp+0x8], r8; sub  rbp, rbx; call jump_memcpy; 
0x885d7: mov  rdx, rbp; mov  rsi, r14; call jump_memcpy; 
0x12e1f8: mov  rdx, rbp; mov  rsi, r12; call jump_memcpy; 
0x160430: mov  rdi, qword [rbp+0x20]; mov  rbx, qword [rbp+0x28]; mov  rsi, r14; sub  rbx, rdi; cmp  r12d, ebx; cmovbe  ebx, r12d; mov  r13d, ebx; sub  r12d, ebx; mov  rdx, r13; add  r14, r13; call jump_memcpy; 
0x89cb5: add  rdi, qword [rbp]; mov  rdx, rbx; call jump_memcpy; 
0x16ce17: sub  eax, edx; mov  rdi, rsi; mov  ebx, edx; mov  rsi, qword [rbp+0x18]; mov  dword [rbp+0x28], eax; mov  rdx, rbx; call jump_memcpy; 
0x89d71: add  rsi, qword [rbp]; mov  rdx, rbx; call jump_memcpy; 
0xb18d0: endbr64 ; push r13; mov  r13, rsi; mov  rsi, rdx; push r12; push rbp; mov  rbp, rdx; push rbx; mov  rbx, rdi; mov  rdi, r13; sub  rsp, 0x8; call jump_strnlen; mov  rdi, rbx; mov  rsi, r13; mov  r12, rax; mov  rdx, rax; call jump_memcpy; 
0x89969: add  rsi, qword [rbx]; mov  rdx, rbp; call jump_memcpy; 
0xb1880: endbr64 ; push r14; mov  r14, rdx; push r13; mov  r13, rsi; push r12; mov  r12, rdi; push rbp; sub  rsp, 0x8; call jump_strlen; mov  rsi, r14; mov  rdi, r13; lea  rbp, [r12+rax]; call jump_strnlen; mov  rsi, r13; mov  rdi, rbp; mov  byte [rbp+rax], 0x0; mov  rdx, rax; call jump_memcpy; 
0x15ff65: cmp  ebx, eax; mov  rsi, r13; mov  rdi, rbp; mov  qword [rsp+0x8], rcx; cmovle  eax, ebx; movsxd  rdx, eax; mov  r12, rdx; mov  qword [rsp], rdx; call jump_memcpy; 
0x16004b: cmp  ebx, edx; mov  ecx, edx; mov  rsi, r13; mov  rdi, r14; cmovle  ecx, ebx; movsxd  rdx, ecx; mov  dword [rsp+0x8], ecx; mov  qword [rsp], rdx; call jump_memcpy; 
0x2c5fd: lea  rdi, [rsp+0xf]; mov  rsi, r12; mov  qword [rbp-0x80], r10; and  rdi, 0xfffffffffffffff0; mov  qword [rbp-0x68], rcx; mov  byte [rdi+rdx], 0x0; mov  qword [rbp-0x60], r11; mov  qword [rbp-0x78], r8; mov  qword [rbp-0x70], r9; call jump_memcpy; 
0x1138b5: lea  rdi, [r13+0x10]; sub  rdx, 0x10; add  rsi, 0x8; call jump_memcpy; 
0x12e262: mov  rdx, rbx; mov  rsi, r12; call jump_memcpy; 
0x8988a: add  rdi, qword [rbx]; mov  rdx, rbp; call jump_memcpy; 
0xb197c: add  rsp, 0x8; mov  rdx, r12; mov  rsi, rbp; mov  rdi, r13; pop  rbx; pop  rbp; pop  r12; pop  r13; jmp  jump_memcpy; 
0x8b498: mov  rdi, r13; mov  rdx, r12; call jump_memcpy; 
0xfc9de: mov  rsi, qword [r15+0x10]; mov  rdx, r14; lea  r14, [rsp+0x80]; call jump_memcpy; 
0xfae5e: mov  dword [rsp+0x8], r9d; mov  qword [rsp], rcx; call jump_memcpy; 
0xf6dc7: movsxd  r9, r9d; mov  rdi, r8; lea  rsi, [r8+r9*4]; call jump_memcpy; 
0xfe422: mov  rsi, qword [r12+0x20]; mov  rdx, r13; call jump_memcpy; 
0x170e95: mov  eax, dword [rbp-0xd8]; mov  dword [r13+0x8], r12d; mov  rdx, r12; mov  rsi, r14; mov  dword [r13], 0x2; lea  rdi, [r13+0xc]; xor  r14d, r14d; mov  r12d, 0x1; mov  dword [r13+0x4], eax; call jump_memcpy; 
0x3fe23: mov  rdx, rbp; mov  rsi, r13; mov  rdi, rax; shl  rbp, 0x3; call jump_memcpy; 
0x3fe23: mov  rdx, rbp; mov  rsi, r13; mov  rdi, rax; shl  rbp, 0x3; call jump_memcpy; lea  r10, [r15+0x7]; mov  rsi, qword [rsp+0x8]; mov  rdx, rbp; and  r10, 0xfffffffffffffff8; mov  qword [rsp+0x28], rax; add  r10, rax; mov  rdi, r10; call jump_memcpy; 
0x155d30: lea  r12, [r14+0x10]; lea  rdx, [r15-0x10]; mov  rsi, r13; mov  qword [r14], rbp; mov  rdi, r12; mov  qword [r14+0x8], rbx; call jump_memcpy; 
0x1556c3: mov  dword [r12], 0x0; lea  rdi, [r12+0x218]; mov  rdx, rbx; mov  rsi, r13; call jump_memcpy; 
0x16dd7d: mov  rdi, qword [rsp+0x18]; mov  dword [rsp+0x34], r10d; mov  qword [rsp+0x28], rcx; mov  qword [rsp+0x48], r9; mov  qword [rsp+0x40], r11; call jump_memcpy; 
0x171248: mov  rsi, r14; mov  rdi, rsp; mov  qword [rbp-0x48], rcx; mov  r14, r12; call jump_memcpy; 
0x16e3b9: mov  rdi, qword [rsi]; mov  rdx, r14; mov  rsi, r8; mov  qword [rsp+0x48], r9; mov  dword [rsp+0x30], r10d; call jump_memcpy; 
0x16e480: mov  rsi, rcx; mov  rdi, r8; mov  dword [rsp+0x50], r10d; mov  qword [rsp+0x48], rcx; call jump_memcpy; 
0x16ed88: mov  r15, qword [rbp-0x110]; mov  rdx, r8; mov  rsi, r9; mov  rdi, qword [r15]; call jump_memcpy; 
0x16ed88: mov  r15, qword [rbp-0x110]; mov  rdx, r8; mov  rsi, r9; mov  rdi, qword [r15]; call jump_memcpy; mov  rax, qword [r15+0x18]; mov  rdx, qword [rbp-0xd8]; mov  rsi, qword [rbp-0xe8]; mov  rdi, qword [rax]; call jump_memcpy; 
0x16ee42: mov  rdi, qword [rsi]; mov  rsi, qword [rbp-0xe8]; add  rsi, qword [rbp-0xd8]; call jump_memcpy; 
0x16fc9c: add  rbx, 0x1; lea  rax, [rel data_1d846f]; test r15, r15; mov  rdx, r13; mov  rsi, r14; cmove   r15, rax; call jump_mempcpy; mov  rdx, rbx; mov  byte [rax], 0x2f; mov  rsi, r15; lea  rdi, [rax+0x1]; call jump_memcpy; 
0x1701d0: mov  rdx, r9; mov  dword [rbp-0x100], r11d; mov  qword [rbp-0xf8], rcx; mov  qword [rbp-0xf0], r10; mov  dword [rbp-0xe4], r8d; call jump_memcpy; 
0x170281: mov  rdi, qword [rcx]; mov  rdx, r13; mov  rsi, r10; mov  dword [rbp-0xd0], r11d; mov  dword [rbp-0xb8], r8d; call jump_memcpy; 
0x35f9a: lea  rdi, [rax+0x30]; mov  rdx, r15; mov  rsi, r14; call jump_memcpy; 
0x35501: mov  rdx, r14; mov  rsi, r13; mov  rdi, rsp; call jump_mempcpy; mov  rdx, r15; mov  rsi, r12; mov  rdi, rax; call jump_memcpy; 
0x3d992: mov  rax, qword [rbp-0x1e0]; lea  rdi, [r9+r11]; mov  rsi, r12; mov  qword [rbp-0x200], rcx; mov  qword [rbp-0x208], r10; shl  rax, 0x4; mov  qword [rbp-0x1f8], r9; add  r14, rax; call jump_memcpy; 
0x3d992: mov  rax, qword [rbp-0x1e0]; lea  rdi, [r9+r11]; mov  rsi, r12; mov  qword [rbp-0x200], rcx; mov  qword [rbp-0x208], r10; shl  rax, 0x4; mov  qword [rbp-0x1f8], r9; add  r14, rax; call jump_memcpy; mov  rdi, qword [rbp-0x1e8]; mov  r9, qword [rbp-0x1f8]; mov  rsi, r13; mov  qword [r14], rax; mov  rdx, qword [rbp-0x208]; add  rdi, r9; call jump_memcpy; 
0xfb2eb: mov  rdx, r14; mov  r14, qword [rsp+0x18]; mov  rsi, qword [r8+0x8]; mov  qword [rsp+0x40], r8; mov  rdi, r14; mov  qword [rsp+0x20], rsi; call jump_memcpy; 
0xfb5ab: mov  rdx, r10; mov  rsi, rbp; mov  qword [rsp+0x48], r9; mov  dword [rsp+0x40], r8d; call jump_memcpy; 
0xfbe06: mov  rsi, qword [rbp+0x8]; mov  rdx, qword [rsp+0x10]; call jump_memcpy; 
0xfa76e: mov  rsi, qword [rbp+0x8]; mov  rdx, r13; call jump_memcpy; 
0xfa7d7: mov  rsi, qword [rbx+0x8]; mov  rdx, r13; call jump_memcpy; 
0xfa888: sub  r14d, eax; movsxd  rdx, ebx; cdqe ; lea  rdi, [r9+rdx*4]; movsxd  rdx, r14d; lea  rsi, [r10+rax*4]; add  ebx, r14d; shl  rdx, 0x2; call jump_memcpy; 
0xfa8b0: sub  r13d, ecx; movsxd  rax, ebx; movsxd  rcx, ecx; movsxd  rdx, r13d; lea  rdi, [r9+rax*4]; lea  rsi, [r8+rcx*4]; add  ebx, r13d; shl  rdx, 0x2; call jump_memcpy; 
0xfaaa0: mov  rsi, qword [rbx+0x8]; mov  qword [rsp+0x8], rsi; call jump_memcpy; 
0xf50a7: mov  rdi, r8; mov  rdx, r13; add  rdi, qword [r12+0x8]; mov  rsi, r10; mov  qword [rsp], r8; call jump_memcpy; 
0xf516a: mov  rdi, qword [r12+0x8]; mov  rsi, qword [rsp+0x8]; mov  rdx, r15; add  rdi, rbx; call jump_memcpy; 
0xf5265: mov  rdi, qword [r12+0x8]; movsxd  rsi, dword [r12+0x28]; mov  rdx, r15; add  rsi, rbx; add  rdi, rbx; add  rsi, qword [r12]; call jump_memcpy; 
0xf551e: mov  rdi, r8; mov  rdx, r13; add  rdi, qword [r12+0x8]; mov  rsi, rbp; mov  qword [rsp], r8; mov  dword [rsp+0x10], eax; call jump_memcpy; 
0xf575f: mov  rdi, r8; mov  rsi, r10; add  rdi, qword [r12+0x8]; mov  dword [rsp+0x10], ecx; mov  qword [rsp+0x8], r8; mov  qword [rsp], rdx; call jump_memcpy; 
0xf5a0b: mov  rdi, r8; mov  rdx, r13; add  rdi, qword [r12+0x8]; mov  rsi, rbp; mov  dword [rsp+0x10], ecx; mov  qword [rsp], r8; call jump_memcpy; 
0xf6b2f: add  ecx, 0x1; mov  rax, qword [rbp+0x8]; mov  rsi, qword [r12+0x8]; sub  ebx, ecx; movsxd  rcx, ecx; movsxd  rdx, ebx; lea  rdi, [rax+rdx*4]; lea  rdx, [rcx*4]; call jump_memcpy; 
0xf6bae: mov  dword [rbp+0x4], esi; movsxd  rdx, esi; mov  rsi, qword [r12+0x8]; shl  rdx, 0x2; call jump_memcpy; 
0xf6be7: movsxd  rdx, ecx; movsxd  rbx, ebx; lea  rsi, [rdi+rbx*4]; shl  rdx, 0x2; call jump_memcpy; 
0x16f5ee: mov  rsi, r15; mov  dword [rsp+0x28], r10d; mov  dword [rsp+0x18], r9d; mov  qword [rsp+0x8], rcx; mov  qword [rsp+0x20], rax; call jump_memcpy; 
0x16f6b0: mov  rsi, r15; mov  qword [rsp+0x18], r8; mov  dword [rsp+0x8], r9d; call jump_memcpy; 
0xda280: mov  qword [r14+0x8], rbx; lea  r15, [r14+0x10]; mov  rdx, rbx; mov  rsi, r13; mov  qword [r14], 0x0; mov  rdi, r15; call jump_memcpy; 
0xda302: mov  qword [r14+0x8], rbx; lea  r15, [r14+0x10]; mov  rdx, rbx; mov  rsi, r13; mov  qword [r14], 0x0; mov  rdi, r15; call jump_memcpy; 
0xdc5e6: mov  rcx, qword [rsp+0x20]; mov  rsi, r14; mov  rdx, rbp; movsxd  r14, r12d; mov  rdi, rcx; mov  qword [rsp+0x18], rcx; call jump_mempcpy; mov  rdx, r15; mov  rsi, r13; movsxd  r15, ebx; mov  rdi, rax; call jump_memcpy; 
0x158c76: movsxd  rdx, ebx; mov  rdi, r15; call jump_memcpy; 
0x159093: mov  rsi, qword [rsp+0x90]; lea  rdx, [r12*8]; mov  rdi, rbx; call jump_memcpy; 
0x159093: mov  rsi, qword [rsp+0x90]; lea  rdx, [r12*8]; mov  rdi, rbx; call jump_memcpy; mov  qword [rbx+r12*8], 0x0; mov  rsi, qword [rsp+0x130]; mov  rdi, rbp; lea  rdx, [r14*8]; call jump_memcpy; 
0x15cdab: mov  rbp, rax; mov  qword [rax], 0x0; mov  rax, qword [rel data_1e2788]  {0xffffffffffffffff}; mov  rsi, r15; lea  r13, [rbp+0x1028]; lea  rdx, [rbx+0x1]; mov  qword [rbp+0x14], rax  {0xffffffffffffffff}; mov  rdi, r13; call jump_memcpy; 
0x15ce02: lea  rdi, [rbp+0x1c]; mov  rsi, r13; mov  qword [rsp+0x8 {var_40_1}], rdx; call jump_memcpy; 
0x1602b6: cmp  ebp, eax; mov  rsi, r13; mov  rdi, r12; cmovle  eax, ebp; movsxd  rdx, eax; mov  r15, rdx; mov  qword [rsp+0x8], rdx; call jump_memcpy; 
0x172051: mov  rdi, qword [rsp+0x8]; mov  rsi, rbp; call jump_memcpy; 
0x1072e3: mov  rsi, r15; mov  rdi, r14; call jump_mempcpy; mov  rdx, qword [rbp-0x2e8]; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_memcpy; 
0x106b26: mov  rsi, qword [rsp+0x10]; mov  rdx, rbp; mov  rdi, rax; call jump_mempcpy; mov  rdx, r12; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_memcpy; 
0x12f04c: lea  rax, [rdx+rdx*2]; mov  r10, qword [rbp]; mov  rsi, qword [r15]; mov  rdi, r12; shl  rax, 0x4; mov  qword [rsp+0x58], r8; mov  rdx, rax; mov  qword [rsp+0x40], r10; mov  dword [rsp+0x48], ecx; mov  qword [rsp+0x28], rsi; mov  qword [rsp+0x50], rax; call jump_mempcpy; mov  ecx, dword [rsp+0x48]; mov  rsi, qword [rsp+0x40]; mov  rdi, rax; lea  rdx, [rcx+rcx*2]; mov  qword [rsp+0x48], rcx; shl  rdx, 0x4; call jump_memcpy; 
0x12f04c: lea  rax, [rdx+rdx*2]; mov  r10, qword [rbp]; mov  rsi, qword [r15]; mov  rdi, r12; shl  rax, 0x4; mov  qword [rsp+0x58], r8; mov  rdx, rax; mov  qword [rsp+0x40], r10; mov  dword [rsp+0x48], ecx; mov  qword [rsp+0x28], rsi; mov  qword [rsp+0x50], rax; call jump_mempcpy; mov  ecx, dword [rsp+0x48]; mov  rsi, qword [rsp+0x40]; mov  rdi, rax; lea  rdx, [rcx+rcx*2]; mov  qword [rsp+0x48], rcx; shl  rdx, 0x4; call jump_memcpy; mov  r8, qword [rsp+0x58]; mov  rdx, qword [rsp+0x30]; mov  rdi, r14; mov  rsi, r8; mov  qword [rsp+0x40], r8; call jump_memcpy; 
0x12e66d: mov  rdx, r12; mov  rsi, rbp; call jump_memcpy; 
0x12e7d3: mov  rdx, rcx; mov  rsi, r15; mov  qword [rsp+0x20], rcx; call jump_memcpy; 
0x12e82c: mov  rdx, rcx; mov  rsi, rbp; mov  qword [rsp+0x20], rcx; call jump_memcpy; 
0x12eaf2: mov  rsi, r15; mov  qword [rsp+0x18], rdx; call jump_memcpy; 
0x12f89e: mov  rdx, rbp; mov  rsi, r14; call jump_memcpy; 
0x130e68: mov  rdx, r13; mov  rsi, r15; add  r14, 0x30; call jump_memcpy; 
0x131018: mov  rdx, r12; mov  rsi, r13; call jump_memcpy; 
0x131d44: mov  rdx, r13; mov  rsi, r9; call jump_memcpy; 
0x131e66: mov  rdx, r13; mov  rsi, r15; add  r14, 0x30; call jump_memcpy; 
0x13213b: mov  rdx, r15; mov  rsi, r13; call jump_memcpy; 
0x13e619: mov  rax, qword [rbx+0x40]; lea  rdi, [r12+0x8]; mov  rdx, r13; mov  rsi, rbp; mov  qword [r12], rax; call jump_memcpy; 
0x13fc52: lea  rdi, [rsp+0xf]; mov  rsi, r10; mov  rdx, r8; mov  qword [rbp-0x490], r10; and  rdi, 0xfffffffffffffff0; lea  r15, [rbp-0x450]; call jump_memcpy; 
0x140f01: mov  qword [rax], 0x0; mov  rsi, qword [rbp-0xc0]; lea  rdi, [rax+0x20]; mov  rdx, r15; mov  qword [rbp-0xc8], rax; call jump_memcpy; 
0x14154b: mov  esi, 0x11; lea  rdi, [r12+0x44]; mov  qword [rbp-0x78], rdx; mov  word [r12+0x38], si; mov  rsi, r11; call jump_memcpy; 
0x1415ea: mov  qword [r12+0x30], r13; lea  rax, [r13+rdx]; mov  rdi, r13; mov  rsi, r11; mov  qword [rbp-0x78], rax; call jump_memcpy; 
0x14191f: lea  rdi, [r10+0x2]; call jump_memcpy; 
0x141993: lea  rdi, [r12+0x82]; call jump_memcpy; 
0x141aa6: mov  ecx, 0x11; lea  rdi, [r12+0x8c]; mov  rsi, r11; mov  qword [rbp-0x78], rdx; mov  word [r12+0x80], cx; call jump_memcpy; 
0x141c73: lea  rdi, [r12+0x3a]; call jump_memcpy; 
0x144ff8: xor  eax, eax; cmp  r8w, 0x1; mov  rsi, r10; mov  qword [rsp+0x20], rdx; setne   al; add  rdi, 0x14; mov  qword [rsp+0x18], r10; lea  eax, [rax*8+0x2]; mov  dword [rdi-0x4], eax; call jump_memcpy; 
0x14d8c7: lea  rcx, [rsp+0x40]; mov  rsi, r15; mov  qword [rsp+0x38], rdx; mov  rdi, rcx; mov  qword [rsp+0x30], rcx; call jump___stpcpy; mov  rdx, qword [rsp+0x38]; mov  rsi, rbp; mov  byte [rax], 0x2e; lea  rdi, [rax+0x1]; add  rdx, 0x1; call jump_memcpy; 
0xda936: mov  qword [rbp+0x8], r13; lea  r12, [rbp+0x10]; mov  rdx, r13; mov  rsi, r14; mov  qword [rbp], 0x0; mov  rdi, r12; call jump_memcpy; 
0xda990: mov  qword [rbx+0x8], r13; lea  r12, [rbx+0x10]; mov  rdx, r13; mov  rsi, r14; mov  qword [rbx], 0x0; mov  rdi, r12; call jump_memcpy; 
0xe1287: mov  rdx, r14; mov  rsi, r8; mov  rdi, r13; call jump_memcpy; 
0xe13ad: mov  rdx, r15; mov  rdi, r13; call jump_memcpy; 
0xe1669: mov  rdx, r14; mov  rdi, r13; call jump_memcpy; 
0xe1a43: mov  rsi, qword [rsp+0x28]; mov  rdx, r14; mov  rdi, r13; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0xe24a6: mov  rdx, r13; mov  rdi, r15; call jump_memcpy; 
0xe290d: mov  rdx, r13; mov  rdi, r15; call jump_memcpy; 
0x16f9ee: mov  rsi, r11; mov  qword [rsp+0x18], rcx; mov  dword [rsp+0x10], r10d; call jump_memcpy; 
0xec84e: lea  rdi, [rsp+0xf]; mov  rdx, r8; mov  rsi, r12; and  rdi, 0xfffffffffffffff0; call jump_memcpy; 
0xee373: mov  rsi, r15; mov  rdi, r14; call jump_mempcpy; mov  rdx, qword [rbp-0x2e8]; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_memcpy; 
0xedbb6: mov  rsi, qword [rsp+0x10]; mov  rdx, rbp; mov  rdi, rax; call jump_mempcpy; mov  rdx, r12; mov  rsi, r13; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; call jump_memcpy; 
0x1050a9: mov  rsi, qword [r12+0x8]; mov  rdx, r13; mov  rdi, rax; lea  r12, [rsp+0x60]; call jump_memcpy; 
0x1004c1: mov  rax, qword [rsp+0x2e0]; mov  rbx, qword [rsp+0xc0]; mov  rdi, qword [rsp+0x140]; shl  rax, 0x3; mov  rsi, rbx; mov  rdx, rax; mov  qword [rsp+0x20], rdi; mov  qword [rsp+0x30], rax; call jump_memcpy; 
0x1006ca: sub  eax, 0x1; mov  rbp, qword [rsp+0x40]; mov  rdi, rbx; movsxd  r12, eax; mov  dword [r13], eax; shl  r12, 0x5; add  r12, qword [r13+0x8]; mov  rdx, rbp; mov  rsi, qword [r12+0x8]; mov  r15d, dword [r12]; call jump_memcpy; 
0x1006ca: sub  eax, 0x1; mov  rbp, qword [rsp+0x40]; mov  rdi, rbx; movsxd  r12, eax; mov  dword [r13], eax; shl  r12, 0x5; add  r12, qword [r13+0x8]; mov  rdx, rbp; mov  rsi, qword [r12+0x8]; mov  r15d, dword [r12]; call jump_memcpy; mov  rsi, qword [r12+0x8]; mov  rdi, qword [rsp+0x20]; mov  rdx, rbp; add  rsi, rbp; call jump_memcpy; 
0x10093e: mov  rdx, qword [rsp+0x40]; mov  rdi, rbx; call jump_memcpy; 
0x100ad4: mov  rdx, qword [rsp+0x30]; mov  rsi, rbx; call jump_memcpy; 
0x100ad4: mov  rdx, qword [rsp+0x30]; mov  rsi, rbx; call jump_memcpy; mov  rdx, qword [rsp+0x30]; mov  rsi, qword [rsp+0x20]; mov  rdi, rax; add  rdi, rdx; call jump_memcpy; 
0x100b34: mov  rdx, rbp; call jump_memcpy; 
0x100cef: sub  eax, 0x1; mov  r14, qword [rsp+0x30]; mov  rdi, rbx; mov  qword [rsp+0x58], r8; movsxd  r12, eax; mov  dword [r13], eax; shl  r12, 0x5; add  r12, qword [r13+0x8]; mov  rdx, r14; mov  rsi, qword [r12+0x8]; mov  r15d, dword [r12]; call jump_memcpy; 
0x100cef: sub  eax, 0x1; mov  r14, qword [rsp+0x30]; mov  rdi, rbx; mov  qword [rsp+0x58], r8; movsxd  r12, eax; mov  dword [r13], eax; shl  r12, 0x5; add  r12, qword [r13+0x8]; mov  rdx, r14; mov  rsi, qword [r12+0x8]; mov  r15d, dword [r12]; call jump_memcpy; mov  rsi, qword [r12+0x8]; mov  rdi, qword [rsp+0x20]; mov  rdx, r14; add  rsi, r14; call jump_memcpy; 
0x10112d: mov  dword [rdx+0x4], r15d; mov  rdi, qword [rsp+0x20]; mov  rsi, rbx; mov  rdx, qword [rsp+0x40]; call jump_memcpy; 
0x10e94a: lea  rdi, [rsp+0xf]; mov  rsi, r14; lea  rbx, [rbp-0x890]; and  rdi, 0xfffffffffffffff0; lea  r14, [rbp-0x8c8]; lea  r15, [rbp-0x450]; mov  byte [rdi+rdx], 0x0; call jump_memcpy; 
0xa4c23: mov  rdx, qword [r12+0x8]; lea  rsi, [r12+0x10]; mov  rdi, r15; mov  rax, rdx; and  rdx, 0xfffffffffffffff8; shr  rax, 0x1; xor  rax, 0x1; and  eax, 0x1; lea  rdx, [rdx+rax*8-0x10]; call jump_memcpy; 
0x881e3: mov  rdx, rbp; mov  rsi, r14; call jump_memcpy; 
0x8d659: lea  rsi, [r10+rbp]; mov  rdi, r15; mov  qword [rsp+0x10], r8; call jump_memcpy; 
0x8d6b5: call jump_memcpy; 
0x8d6d0: mov  rsi, qword [rsp+0x28]; mov  rdx, rbp; mov  rdi, r15; mov  qword [rsp+0x18], r8; neg  rdx; mov  qword [rsp+0x10], r10; add  rsi, rbp; call jump_mempcpy; mov  rsi, qword [rsp+0x10]; mov  rdx, r12; mov  rdi, rax; call jump_memcpy; 
0x8f879: mov  rdx, qword [rsp+0x28]; mov  rsi, r13; mov  rdi, rax; call jump_memcpy; 
0x5139f: mov  rdx, qword [rsp+0x50]; lea  rdi, [r8+r9]; mov  rsi, r15; mov  qword [rsp+0x40], rcx; mov  qword [rsp+0x20], r9; add  rdx, 0x1; mov  qword [rsp+0x28], r8; call jump_memmove; mov  rcx, qword [rsp+0x40]; mov  rdx, qword [rsp+0x20]; mov  rdi, qword [rsp+0x28]; mov  rsi, rcx; mov  qword [rsp+0x20], rcx; call jump_memcpy; 
0x2ca28: lea  rdi, [r8+0x10]; mov  rsi, r15; mov  qword [rsp+0x10], r8; sub  r13, r15; call jump_memcpy; 
0x3726e: lea  rdi, [rsp+0xf]; mov  rdx, r8; mov  rsi, r14; and  rdi, 0xfffffffffffffff0; call jump_memcpy; 
0x366f4: add  rsp, 0x28; mov  rdx, r12; mov  rsi, rbp; pop  rbx; pop  rbp; pop  r12; pop  r13; pop  r14; pop  r15; jmp  jump_memcpy; 
0x3a5ef: lea  rdi, [rax+0x18]; mov  rsi, rbx; call jump_memcpy; 
0x3a75f: mov  rdx, r15; lea  rdi, [r14+0x18]; mov  rsi, rbx; call jump_memcpy; 
0x3a843: mov  rdx, r15; lea  rdi, [r14+0x18]; mov  rsi, rbx; call jump_memcpy; 
0x3bfd7: mov  rdx, qword [rsp+0x18]; mov  rsi, qword [rsp+0x10]; mov  rdi, rax; call jump_memcpy; 
0x3b3d0: mov  rdx, qword [rbp-0x78]; mov  rsi, r12; mov  rdi, rax; call jump_memcpy; 
0x44432: mov  rdx, qword [rsp+0x20]; mov  rsi, r12; mov  rdi, r15; imul rdx, rbp; call jump_memcpy; 
0x44446: mov  rdx, qword [rsp+0x20]; mov  rax, qword [rsp+0x10]; mov  rdi, qword [rsp+0x18]; imul rdx, r14; mov  rsi, qword [rax+0x20]; add  rsp, 0x48; pop  rbx; pop  rbp; pop  r12; pop  r13; pop  r14; pop  r15; jmp  jump_memcpy; 
0x44ea3: mov  rdi, rcx; mov  rdx, r14; call jump_memcpy; 
0x44fd5: lea  rax, [rsp+0xf]; mov  rsi, r12; mov  rdx, rbx; and  rax, 0xfffffffffffffff0; lea  r12, [rel 0x21aec0]; mov  rdi, rax; mov  r14, rax; call jump_mempcpy; mov  rdx, qword [rbp-0x60]; mov  rsi, qword [rbp-0x58]; mov  byte [rax], 0x3d; lea  rdi, [rax+0x1]; call jump_memcpy; 
0x4504d: mov  rdi, rax; mov  rdx, r13; mov  rsi, r14; call jump_memcpy; 
0x450b5: mov  rdx, rbx; mov  rbx, qword [rbp-0x48]; mov  rsi, r12; lea  r12, [rel 0x21aec0]; mov  rdi, rbx; call jump_mempcpy; mov  rdx, qword [rbp-0x60]; mov  rsi, qword [rbp-0x58]; mov  byte [rax], 0x3d; lea  rdi, [rax+0x1]; call jump_memcpy; 
0x5b174: movsxd  rbx, edx; mov  rsi, r15; mov  dword [rbp-0xd0], ecx; lea  rdx, [r13*8]; lea  rdi, [rdi+rbx*8]; call jump_memcpy; 
0x5b211: mov  rdx, qword [r15+0x8]; mov  rax, qword [r15]; lea  rsi, [rel 0x1ccec0]; mov  qword [rbp-0x68], rdx; lea  rsi, [rsi+rax*8]; shl  rdx, 0x3; call jump_memcpy; 
0x5b2c0: mov  rsi, qword [rbp-0x70]; mov  rdi, qword [rbp-0x80]; mov  qword [rbp-0x78], rdx; shl  rdx, 0x3; call jump_memcpy; 
0x5b980: mov  rax, qword [r15+0x8]; lea  rsi, [rel 0x1ccec0]; add  rdi, 0x8; lea  rdx, [rax+0x1]; mov  rax, qword [r15]; mov  qword [rbp-0x68], rdx; shl  rdx, 0x3; lea  rsi, [rsi+rax*8]; call jump_memcpy; 
0x55341: lea  rdx, [r14*8-0x8]; call jump_memcpy; 
0x55424: test rdx, rdx; lea  r8, [rdx*8]; mov  eax, 0x8; cmovle  r8, rax; mov  rdx, r8; call jump_memcpy; 
0x13f12f: mov  rax, qword [rsp+0x40]; mov  rdx, qword [rsp+0x48]; lea  rdi, [rbx+0x8]; mov  rsi, r14; mov  qword [rbx], rax; call jump_memcpy; 
0x115687: add  rdx, r9; lea  rsi, [rax+r9]; mov  qword [rsp+0x10], rax; lea  rdi, [rax+rdx]; mov  rdx, qword [rsp+0x40]; sub  rdx, r9; call jump_memcpy; 
0x1156b3: mov  rcx, qword [rsp+0x50]; mov  rdx, r12; mov  rsi, r15; sub  rcx, r12; mov  rdi, rcx; call jump_memcpy; 
0xa7dd5: imul rbx, qword [rbp]; mov  rsi, r13; mov  rdi, rax; mov  rdx, rbx; call jump_memcpy; 
0x15ef9e: mov  rdi, qword [rbx+0x38]; mov  edx, dword [rbx+0x40]; call jump_memcpy; 
0x15f013: mov  rdi, qword [rbx+0x50]; mov  edx, dword [rbx+0x58]; call jump_memcpy; 
0x15f170: mov  rsi, qword [rbx+0x38]; mov  rdi, rcx; mov  edx, eax; call jump_memcpy; 
0x15f190: mov  rsi, qword [rbx+0x50]; lea  rdi, [rcx+0x8]; mov  edx, eax; call jump_memcpy; 
0x4ea98: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r15; call jump_memcpy; 
0x4f775: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r12; mov  qword [rsp+0x10], rcx; mov  qword [rsp], r9; call jump_memcpy; 
0x4f7d9: lea  rdi, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r12; mov  qword [rsp+0x20], rcx; mov  dword [rsp+0x10], r10d; call jump_memcpy; 
0x4fffe: mov  rdi, qword [rsp+0x10]; lea  rdx, [rbx*8]; mov  rsi, r12; call jump_memcpy; 
0x50369: lea  rdx, [r9*8]; mov  rsi, r12; call jump_memcpy; 
0xa7fb6: mov  rdx, qword [rbx]; mov  rsi, r12; mov  rdi, rax; movaps  xmmword [rsp], xmm0; imul rdx, rbp; call jump_memcpy; 
0x148e1c: lea  rdx, [rbx+0x1]; mov  rsi, r12; mov  rdi, rbp; call jump_memcpy; 
0xd4a30: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r14; call jump_memcpy; 
0xd5864: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x10], rcx; mov  qword [rsp+0x8], r9; call jump_memcpy; 
0xd60d0: mov  rdi, qword [rsp+0x8]; lea  rdx, [rbp*8]; mov  rsi, r14; call jump_memcpy; 
0xd6303: lea  r10, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], rcx; mov  rdi, r10; mov  qword [rsp+0x8], r9; call jump_memcpy; 
0xd6620: mov  ebx, 0x2; lea  r10, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; sub  rbx, r9; mov  qword [rsp+0x8], r10; lea  rdi, [r10+rbx*8]; call jump_memcpy; 
0x13ecb9: mov  rax, qword [rsp+0x28]; lea  rdi, [r12+0x8]; mov  rsi, r13; mov  qword [r12], rax; call jump_memcpy; 
0xa7ab5: mov  rdx, qword [rsp+0x8]; add  rsp, 0x10; mov  rsi, r12; pop  r12; jmp  jump_memcpy; 
0x57ba8: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r14; call jump_memcpy; 
0x588f4: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x5919e: mov  rdi, qword [rsp]; lea  rdx, [r15*8]; mov  rsi, r14; call jump_memcpy; 
0x593b1: lea  rdx, [r9*8]; lea  rdi, [rsp+0x80]; mov  rsi, r14; mov  qword [rsp+0x28], rcx; mov  qword [rsp+0x18], r11; mov  dword [rsp+0x10], r10d; mov  qword [rsp], r9; call jump_memcpy; 
0x597b6: mov  ebp, 0x2; lea  rax, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; sub  rbp, r9; mov  qword [rsp], rax; lea  rdi, [rax+rbp*8]; call jump_memcpy; 
0x171e20: mov  rdx, r13; mov  rsi, r14; mov  rdi, rbx; call jump_memcpy; 
0x1205c1: mov  rsi, qword [rbp-0x50]; lea  rdi, [rsp+0xf]; mov  rdx, r12; mov  dword [rbp-0x60], ecx; and  rdi, 0xfffffffffffffff0; call jump_memcpy; 
0x1206a3: mov  rsi, qword [rbp-0x50]; lea  rdi, [rsp+0xf]; mov  qword [rbp-0x68], rcx; add  r15d, 0x1; and  rdi, 0xfffffffffffffff0; mov  qword [rbp-0x60], r8; mov  qword [rbp-0x58], rdx; call jump_memcpy; 
0xabdfb: mov  r9, qword [rsp+0x28]; mov  rdx, qword [rsp+0x20]; mov  rsi, r15; lea  rdi, [rax+r9]; call jump_memcpy; 
0xabdfb: mov  r9, qword [rsp+0x28]; mov  rdx, qword [rsp+0x20]; mov  rsi, r15; lea  rdi, [rax+r9]; call jump_memcpy; mov  byte [r14+rbx], 0x3d; mov  rdx, qword [rsp+0x18]; mov  rsi, r13; lea  rdi, [r14+rbx+0x1]; call jump_memcpy; 
0xa7eb0: mov  rdx, r12; mov  rsi, rbx; mov  rdi, rax; call jump_memcpy; 
0x9253f: mov  rdx, r12; mov  rsi, rbp; call jump_memcpy; 
0xa8133: mov  r8, rdx; mov  rdx, rcx; mov  rsi, r8; call jump_memcpy; 
0xa9c70: mov  rdx, r12; mov  rsi, rbp; mov  rdi, r13; call jump_memcpy; 
0x15bab7: mov  qword [rsp+0x8], r9; sub  r15, rbx; mov  qword [rsp], rdx; call jump_memcpy; 
0x57ba8: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r14; call jump_memcpy; 
0x588f4: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x5919e: mov  rdi, qword [rsp]; lea  rdx, [r15*8]; mov  rsi, r14; call jump_memcpy; 
0x593b1: lea  rdx, [r9*8]; lea  rdi, [rsp+0x80]; mov  rsi, r14; mov  qword [rsp+0x28], rcx; mov  qword [rsp+0x18], r11; mov  dword [rsp+0x10], r10d; mov  qword [rsp], r9; call jump_memcpy; 
0x597b6: mov  ebp, 0x2; lea  rax, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; sub  rbp, r9; mov  qword [rsp], rax; lea  rdi, [rax+rbp*8]; call jump_memcpy; 
0x142db0: endbr64 ; push rbp; movsxd  rax, esi; mov  rsi, rdx; mov  edx, ecx; push rbx; add  rdi, rax; mov  rbx, rax; mov  rbp, rdx; sub  rsp, 0x8; call jump_memcpy; 
0x8f384: mov  r12, qword [rsp+0x8]; mov  rdx, r15; mov  rsi, r13; sub  r12, r15; add  r12, rax; mov  rdi, r12; call jump_memcpy; 
0x120e28: imul rax, r13; mov  rdi, qword [rsp+0x8]; mov  rdx, r13; mov  rsi, r15; add  rdi, rax; call jump_memcpy; 
0x106875: mov  rsi, qword [rsp]; movsxd  rdx, ebp; mov  rdi, rax; call jump_mempcpy; mov  rsi, r12; movsxd  rdx, ebx; mov  r12, r14; mov  rdi, rax; call jump_memcpy; 
0x3bd16: mov  rsi, r14; lea  rdi, [rax+0x38]; mov  rdx, r15; add  rbx, 0x1; mov  qword [rbp-0xc0], r10; call jump_mempcpy; mov  rdx, rbx; mov  rsi, r13; mov  r14, rax; mov  rdi, rax; call jump_memcpy; 
0x147091: movd xmm0, dword [rbp-0x480]; movd xmm1, r14d; mov  rax, qword [rbp-0x468]; lea  rcx, [rbx+0x180]; mov  rdx, qword [rbp-0x498]; mov  rsi, r12; mov  rdi, rcx; punpckldq xmm0, xmm1; movq qword [rax+0x10], xmm0; call jump_memcpy; 
0xa8654: mov  byte [rax+r12], 0x0; add  rsp, 0x8; mov  rdx, r12; mov  rsi, rbp; mov  rdi, rax; pop  rbp; pop  r12; jmp  jump_memcpy; 
0x15b740: add  rax, qword [rsp+0x8]; lea  rdx, [rax+0x1]; mov  qword [rbp+0x30], rdx; lea  rdx, [rbx+0x1]; mov  byte [rax], 0x20; mov  rdi, qword [rbp+0x30]; mov  rsi, qword [rsp+0x28]; call jump_memcpy; 
0x15b8ae: mov  rdi, qword [rsp]; mov  rcx, qword [rsp+0x10]; mov  r15, rbx; add  rdi, rax; mov  rax, qword [rsp+0x28]; sub  r15, rcx; mov  qword [rbp+0x30], rdi; mov  rdx, r15; lea  rsi, [rax+rcx+0x1]; call jump_memcpy; 
0x10604f: mov  rsi, rbp; mov  rdi, r13; call jump_memcpy; 
0xa8614: add  rsp, 0x8; mov  rdx, r12; mov  rsi, rbp; mov  rdi, rax; pop  rbp; pop  r12; jmp  jump_memcpy; 
0xcaca0: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r15; call jump_memcpy; 
0xcba46: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, rbp; mov  qword [rsp+0x8], rcx; mov  dword [rsp], r9d; call jump_memcpy; 
0xcbaa6: lea  r11, [rsp+0x78]; lea  rdx, [r15*8]; mov  rsi, rbp; mov  dword [rsp], r10d; mov  rdi, r11; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0xcc104: mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; mov  rsi, rbp; mov  dword [rsp+0x18], r9d; call jump_memcpy; 
0xcc687: lea  rdx, [r15*8]; mov  rsi, rbp; call jump_memcpy; 
0x142a3d: mov  eax, dword [rbp-0x4c]; lea  rdi, [r14+0x8]; mov  edx, r13d; mov  rsi, rbx; mov  dword [r14], eax; call jump_memcpy; 
0x142a3d: mov  eax, dword [rbp-0x4c]; lea  rdi, [r14+0x8]; mov  edx, r13d; mov  rsi, rbx; mov  dword [r14], eax; call jump_memcpy; mov  rax, qword [rbp-0x48]; mov  rsi, qword [rbp-0x58]; mov  rdx, r12; lea  rdi, [r14+0x90]; mov  qword [r14+0x88], rax; call jump_memcpy; 
0xc5598: add  rsp, 0x8; mov  rdx, r12; mov  rsi, rbp; mov  rdi, rax; pop  rbp; pop  r12; jmp  jump_memcpy; 
0x173be1: mov  rax, 0x7374702f7665642f; mov  byte [rbx+0x8], 0x2f; lea  rdi, [rbx+0x9]; mov  qword [rbx], rax; call jump_memcpy; 
0x44d06: lea  rdi, [rsp+0xf]; mov  rsi, r13; and  rdi, 0xfffffffffffffff0; mov  byte [rdi+rdx], 0x0; call jump_memcpy; 
0xe8b98: mov  rdx, r12; mov  rsi, r14; mov  rdi, r13; call jump_memcpy; 
0xe8bc9: add  r12, r13; mov  rsi, rbp; mov  rdi, r12; call jump_memcpy; 
0xe8c28: add  rcx, r13; mov  rsi, r14; mov  rdi, rcx; call jump_memcpy; 
0xe8cc9: mov  r15, qword [rsp+0x10]; mov  rdx, qword [rsp+0x28]; mov  rsi, r15; call jump_memcpy; 
0x48ee0: lea  r12, [rdx-0x1]; lea  rcx, [rel 0x1ccec0]; mov  rdi, r14; lea  rdx, [r12*8]; lea  rsi, [rcx+rax*8+0x8]; call jump_memcpy; 
0x49d65: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x49dd2: lea  r15, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], r11; mov  rdi, r15; mov  qword [rsp+0x18], rcx; mov  dword [rsp], r10d; call jump_memcpy; 
0x4a329: mov  rdi, qword [rsp]; lea  rdx, [r13*8]; mov  rsi, r14; call jump_memcpy; 
0x4ab13: lea  rdx, [r9*8]; mov  rsi, r14; call jump_memcpy; 
0x142490: mov  rsi, qword [rbp-0x50]; mov  eax, dword [r15+0x8]; mov  r13d, dword [r15+0xc]; mov  rdi, qword [rbp-0x58]; mov  dword [rsi], eax; mov  edx, dword [rbx]; lea  rsi, [r15+0x10]; cmp  r13d, edx; cmovbe  rdx, r13; shl  rdx, 0x2; call jump_memcpy; 
0x1348e4: mov  rsi, rbp; mov  rdi, r13; lea  rdx, [rax+0x1]; mov  rbx, rax; call jump_memcpy; 
0x173aef: lea  rdi, [rel 0x227e39]; mov  byte [rel 0x227e38], 0x2f; mov  rax, 0x7374702f7665642f; mov  qword [rel 0x227e30], rax; call jump_memcpy; 
0x106965: mov  rsi, qword [rsp]; movsxd  rdx, ebp; mov  rdi, rax; call jump_mempcpy; mov  rsi, r12; movsxd  rdx, ebx; mov  r12, r14; mov  rdi, rax; call jump_memcpy; 
0xd4a30: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r14; call jump_memcpy; 
0xd5864: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x10], rcx; mov  qword [rsp+0x8], r9; call jump_memcpy; 
0xd60d0: mov  rdi, qword [rsp+0x8]; lea  rdx, [rbp*8]; mov  rsi, r14; call jump_memcpy; 
0xd6303: lea  r10, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], rcx; mov  rdi, r10; mov  qword [rsp+0x8], r9; call jump_memcpy; 
0xd6620: mov  ebx, 0x2; lea  r10, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; sub  rbx, r9; mov  qword [rsp+0x8], r10; lea  rdi, [r10+rbx*8]; call jump_memcpy; 
0x1349ae: pop  rbx; mov  rsi, rbp; mov  rdi, r12; pop  rbp; lea  rdx, [rax+0x1]; pop  r12; jmp  jump_memcpy; 
0x80464: mov  rdi, r14; mov  rdx, rbx; mov  rsi, r13; sub  r15, rbx; call jump_memcpy; 
0x80501: mov  rdx, rbp; mov  rsi, r13; mov  rdi, r14; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0x164edb: mov  rdx, r13; mov  rsi, r14; call jump_memcpy; 
0x4be10: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r14; call jump_memcpy; 
0x4cba5: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x4cc12: lea  r15, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], r11; mov  rdi, r15; mov  qword [rsp+0x18], rcx; mov  dword [rsp], r10d; call jump_memcpy; 
0x4d16a: mov  rdi, qword [rsp]; lea  rdx, [r13*8]; mov  rsi, r14; call jump_memcpy; 
0x4d788: lea  rdx, [r9*8]; mov  rsi, r14; call jump_memcpy; 
0xe8de1: mov  rsi, qword [rsp+0x10]; shl  rbp, 0x3; sub  rbx, r14; mov  rdi, rax; mov  rdx, rbp; sub  rbx, rbp; mov  rsi, qword [rsi+0x18]; sub  rbx, 0x10; call jump_memcpy; 
0xe8e20: add  rcx, r14; mov  rsi, r15; mov  rdi, rcx; call jump_memcpy; 
0xe8ec5: mov  rbx, qword [rsp+0x18]; mov  rdx, qword [rsp+0x28]; mov  rsi, rbx; call jump_memcpy; 
0x159887: mov  qword [rdx], 0x0; cmp  byte [rsp+0x1b], 0x0; mov  rdi, qword [rbp]; cmove   rax, qword [rsp+0x10]; mov  qword [rsp+0x8], r10; movsxd  rdx, dword [rsp+0x54]; mov  qword [rdi+0x8], rax; mov  eax, dword [rsp+0x50]; add  rdi, 0x14; mov  rsi, qword [rcx]; mov  dword [rdi-0x4], eax; call jump_memcpy; 
0x176df0: mov  rdi, qword [rbp-0x4e8]; mov  rdx, r12; sub  rdx, rsi; call jump_mempcpy; mov  rdx, qword [rbp-0x4e0]; mov  rsi, r13; mov  rdi, rax; call jump_memcpy; 
0x177bca: mov  rdi, r8; mov  rsi, r13; mov  qword [rbp-0x508], r8; call jump_mempcpy; mov  rdx, qword [rbp-0x4e0]; mov  rdi, rax; mov  rax, qword [rbp-0x4c0]; lea  rsi, [rax+0x1]; call jump_memcpy; 
0xef180: mov  rdi, qword [rbp-0x4f0]; mov  rdx, r14; sub  rdx, rsi; call jump_mempcpy; mov  rdx, qword [rbp-0x4e0]; mov  rsi, r13; mov  rdi, rax; call jump_memcpy; 
0xeff5a: mov  rdi, r8; mov  rsi, r13; mov  qword [rbp-0x508], r8; call jump_mempcpy; mov  rdx, qword [rbp-0x4e0]; mov  rdi, rax; mov  rax, qword [rbp-0x4c0]; lea  rsi, [rax+0x1]; call jump_memcpy; 
0x48ee0: lea  r12, [rdx-0x1]; lea  rcx, [rel 0x1ccec0]; mov  rdi, r14; lea  rdx, [r12*8]; lea  rsi, [rcx+rax*8+0x8]; call jump_memcpy; 
0x49d65: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x49dd2: lea  r15, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], r11; mov  rdi, r15; mov  qword [rsp+0x18], rcx; mov  dword [rsp], r10d; call jump_memcpy; 
0x4a329: mov  rdi, qword [rsp]; lea  rdx, [r13*8]; mov  rsi, r14; call jump_memcpy; 
0x4ab13: lea  rdx, [r9*8]; mov  rsi, r14; call jump_memcpy; 
0xed265: mov  rdx, rbx; mov  rsi, r12; mov  rdi, rsp; call jump_mempcpy; mov  rsi, r13; mov  rdx, 0x565f5849534f502f; mov  qword [rax], rdx; mov  edx, 0x5f36; lea  rdi, [rax+0xa]; mov  word [rax+0x8], dx; lea  rdx, [r15+0x1]; call jump_memcpy; 
0xab144: mov  rdi, qword [rbx]; mov  rbp, rax; mov  rdx, r13; mov  rsi, r15; add  rdi, rax; call jump_memcpy; 
0xc5b60: endbr64 ; shl  rdx, 0x2; jmp  jump_memcpy; 
0x8021f: add  rdi, r15; mov  rdx, r14; mov  rsi, r8; call jump_memcpy; 
0x142f10: endbr64 ; push rbp; mov  r8, rdi; movsxd  rax, esi; mov  rdi, rdx; push rbx; mov  edx, ecx; lea  rsi, [r8+rax]; mov  rbx, rax; mov  rbp, rdx; sub  rsp, 0x8; call jump_memcpy; 
0xebbd9: lea  rdi, [rcx+0x10]; lea  rsi, [rbx+0x8]; mov  rdx, r10; mov  qword [rbp-0x58], rcx; call jump_memcpy; 
0xebd30: lea  rdi, [r10+0x10]; lea  rsi, [rbx+0x8]; mov  rdx, r11; mov  qword [rbp-0x80], r9; mov  qword [rbp-0x78], r10; call jump_memcpy; 
0x38d14: lea  rdi, [rsp+0xf]; mov  rdx, r8; mov  rsi, r12; xor  r12d, r12d; and  rdi, 0xfffffffffffffff0; call jump_memcpy; 
0xa5b6a: lea  rdx, [r15-0x10]; mov  rsi, rbp; mov  rdi, rax; mov  qword [rsp], rax; call jump_memcpy; 
0xa5c25: mov  rdx, qword [rbp-0x8]; mov  rdi, r8; mov  rsi, rbp; mov  qword [rsp], r8; mov  rax, rdx; and  rdx, 0xfffffffffffffff8; shr  rax, 0x1; xor  rax, 0x1; and  eax, 0x1; lea  rdx, [rdx+rax*8-0x10]; call jump_memcpy; 
0x57ba8: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r14; call jump_memcpy; 
0x588f4: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x5919e: mov  rdi, qword [rsp]; lea  rdx, [r15*8]; mov  rsi, r14; call jump_memcpy; 
0x593b1: lea  rdx, [r9*8]; lea  rdi, [rsp+0x80]; mov  rsi, r14; mov  qword [rsp+0x28], rcx; mov  qword [rsp+0x18], r11; mov  dword [rsp+0x10], r10d; mov  qword [rsp], r9; call jump_memcpy; 
0x597b6: mov  ebp, 0x2; lea  rax, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; sub  rbp, r9; mov  qword [rsp], rax; lea  rdi, [rax+rbp*8]; call jump_memcpy; 
0x16271b: mov  rdx, r12; mov  rsi, r13; call jump_memcpy; 
0x2b68a: lea  rdi, [rax+0x20]; mov  rsi, qword [rbp-0xc0]; mov  rdx, rbx; mov  qword [rax], rdi; call jump_mempcpy; mov  rsi, qword [rbp-0xa8]; mov  rdx, r12; mov  rdi, rax; call jump_memcpy; 
0x384c5: lea  r10, [rsp+0xf]; mov  rdx, rcx; mov  rsi, r13; mov  qword [rbp-0x118], r9; mov  r15, r10; and  r15, 0xfffffffffffffff0; mov  rdi, r15; mov  r13, r15; call jump_mempcpy; mov  rdx, rbx; mov  rsi, r14; mov  rdi, rax; call jump_mempcpy; mov  rdx, qword [rbp-0x118]; mov  rsi, r12; mov  rdi, rax; call jump_memcpy; 
0x3de59: mov  rsi, qword [rsp+0x8]; mov  rdx, r12; mov  rdi, rax; call jump_memcpy; 
0x3ded8: mov  rdx, qword [rsp+0x38]; mov  byte [rax], 0x2f; lea  rdi, [rax+0x1]; mov  rsi, qword [rsp+0x98]; add  rdx, 0x1; call jump_memcpy; 
0x3d039: mov  rax, qword [rsp+0x10]; mov  ebp, ebp; add  r13, 0x8; mov  r14, qword [rax+rbp*8]; mov  rdi, r14; call jump_strlen; mov  rdi, r15; mov  rsi, r14; mov  rdx, rax; mov  rbp, rax; call jump_memcpy; 
0x3d07d: mov  r14d, eax; mov  rsi, rbx; mov  rdi, r15; mov  rdx, r14; add  r15, r14; add  rbx, r14; call jump_memcpy; 
0x4ea98: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r15; call jump_memcpy; 
0x4f775: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r12; mov  qword [rsp+0x10], rcx; mov  qword [rsp], r9; call jump_memcpy; 
0x4f7d9: lea  rdi, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r12; mov  qword [rsp+0x20], rcx; mov  dword [rsp+0x10], r10d; call jump_memcpy; 
0x4fffe: mov  rdi, qword [rsp+0x10]; lea  rdx, [rbx*8]; mov  rsi, r12; call jump_memcpy; 
0x50369: lea  rdx, [r9*8]; mov  rsi, r12; call jump_memcpy; 
0xcd4f0: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r15; call jump_memcpy; 
0xce381: mov  rdi, qword [rsp+0x8]; lea  rdx, [rdx*8]; mov  rsi, r9; mov  qword [rsp], rcx; call jump_memcpy; 
0xce3d8: mov  dword [rsp], esi; lea  rbp, [rsp+0x78]; mov  rsi, qword [rsp+0x8]; lea  rdx, [r14*8]; mov  rdi, rbp; mov  qword [rsp+0x10], rcx; call jump_memcpy; 
0xceaf1: mov  rsi, qword [rsp+0x8]; mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; call jump_memcpy; 
0xcf022: mov  rsi, qword [rsp+0x8]; lea  rdx, [r14*8]; call jump_memcpy; 
0xe6c65: mov  rdx, qword [rsp]; lea  rax, [rbx+0x1]; mov  rsi, rbp; mov  qword [rsp+0x40], rax; call jump_memcpy; 
0x13ff9a: mov  rsi, r13; mov  rdi, rbp; call jump_memcpy; 
0x1405ab: mov  rsi, rdi; mov  rdi, r13; mov  dword [rsp+0x670], r11d; call jump_memcpy; 
0x14067c: mov  rsi, qword [rsp]; mov  rdi, r13; call jump_memcpy; 
0x449c3: mov  rdi, qword [rbp-0x80]; mov  rdx, r14; mov  rsi, rbx; call jump_memcpy; 
0x449e3: mov  rax, r12; xor  edx, edx; sub  rax, qword [rbp-0x70]; mov  rsi, r13; div  r14; mov  qword [r15+rsi*8], rdi; mov  rdx, r14; mov  rsi, r12; mov  r13, rax; call jump_memcpy; 
0x44a13: mov  qword [rdx], r12; mov  rsi, qword [rbp-0x80]; mov  rdx, r14; call jump_memcpy; 
0xe7590: lea  rcx, [rsp+0x10]; mov  esi, r13d; lea  rdx, [rsp+0x8]; mov  rdi, r12; mov  r8, 0xffffffffffffffff; call sub_e7260; movsxd  rdx, dword [rbx]; mov  r13, qword [rsp+0x10]; mov  rdi, rbp; movsxd  r12, eax; cmp  r12d, edx; mov  rsi, r13; cmovle  rdx, r12; shl  rdx, 0x2; call jump_memcpy; 
0x4be10: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r14; call jump_memcpy; 
0x4cba5: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x4cc12: lea  r15, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], r11; mov  rdi, r15; mov  qword [rsp+0x18], rcx; mov  dword [rsp], r10d; call jump_memcpy; 
0x4d16a: mov  rdi, qword [rsp]; lea  rdx, [r13*8]; mov  rsi, r14; call jump_memcpy; 
0x4d788: lea  rdx, [r9*8]; mov  rsi, r14; call jump_memcpy; 
0xcaca0: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r15; call jump_memcpy; 
0xcba46: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, rbp; mov  qword [rsp+0x8], rcx; mov  dword [rsp], r9d; call jump_memcpy; 
0xcbaa6: lea  r11, [rsp+0x78]; lea  rdx, [r15*8]; mov  rsi, rbp; mov  dword [rsp], r10d; mov  rdi, r11; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0xcc104: mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; mov  rsi, rbp; mov  dword [rsp+0x18], r9d; call jump_memcpy; 
0xcc687: lea  rdx, [r15*8]; mov  rsi, rbp; call jump_memcpy; 
0x4ea98: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r15; call jump_memcpy; 
0x4f775: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r12; mov  qword [rsp+0x10], rcx; mov  qword [rsp], r9; call jump_memcpy; 
0x4f7d9: lea  rdi, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r12; mov  qword [rsp+0x20], rcx; mov  dword [rsp+0x10], r10d; call jump_memcpy; 
0x4fffe: mov  rdi, qword [rsp+0x10]; lea  rdx, [rbx*8]; mov  rsi, r12; call jump_memcpy; 
0x50369: lea  rdx, [r9*8]; mov  rsi, r12; call jump_memcpy; 
0x8f6c1: mov  rdx, r13; mov  rsi, r12; mov  rdi, rax; call jump_memcpy; 
0x1427c6: mov  eax, dword [rbp-0x44]; lea  rdi, [r14+0x8]; mov  edx, ebx; mov  rsi, r12; mov  dword [r14], eax; call jump_memcpy; 
0x14288e: mov  rcx, qword [rbp-0x58]; mov  rdi, qword [rbp-0x60]; lea  rsi, [r14+0x90]; mov  eax, dword [r14+0x88]; mov  ebx, dword [r14+0x8c]; mov  dword [rcx], eax; mov  eax, dword [r13]; cmp  ebx, eax; cmovbe  eax, ebx; mov  edx, eax; shl  rdx, 0x7; call jump_memcpy; 
0xc8360: lea  rdi, [rel 0x1ccec0]; lea  rbp, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [rbp*8]; mov  rdi, r14; call jump_memcpy; 
0xc911b: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, rbp; mov  qword [rsp+0x8], rcx; mov  dword [rsp], r9d; call jump_memcpy; 
0xc917b: lea  r14, [rsp+0x78]; lea  rdx, [r15*8]; mov  rsi, rbp; mov  dword [rsp], r10d; mov  rdi, r14; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0xc98a3: mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; mov  rsi, rbp; call jump_memcpy; 
0xc9d59: lea  rdx, [r15*8]; mov  rsi, rbp; call jump_memcpy; 
0xc8360: lea  rdi, [rel 0x1ccec0]; lea  rbp, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [rbp*8]; mov  rdi, r14; call jump_memcpy; 
0xc911b: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, rbp; mov  qword [rsp+0x8], rcx; mov  dword [rsp], r9d; call jump_memcpy; 
0xc917b: lea  r14, [rsp+0x78]; lea  rdx, [r15*8]; mov  rsi, rbp; mov  dword [rsp], r10d; mov  rdi, r14; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0xc98a3: mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; mov  rsi, rbp; call jump_memcpy; 
0xc9d59: lea  rdx, [r15*8]; mov  rsi, rbp; call jump_memcpy; 
0xa7bc5: mov  rdx, r13; mov  rsi, r12; mov  rdi, rax; call jump_memcpy; 
0xc8360: lea  rdi, [rel 0x1ccec0]; lea  rbp, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [rbp*8]; mov  rdi, r14; call jump_memcpy; 
0xc911b: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, rbp; mov  qword [rsp+0x8], rcx; mov  dword [rsp], r9d; call jump_memcpy; 
0xc917b: lea  r14, [rsp+0x78]; lea  rdx, [r15*8]; mov  rsi, rbp; mov  dword [rsp], r10d; mov  rdi, r14; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0xc98a3: mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; mov  rsi, rbp; call jump_memcpy; 
0xc9d59: lea  rdx, [r15*8]; mov  rsi, rbp; call jump_memcpy; 
0x4be10: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r14; call jump_memcpy; 
0x4cba5: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x4cc12: lea  r15, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], r11; mov  rdi, r15; mov  qword [rsp+0x18], rcx; mov  dword [rsp], r10d; call jump_memcpy; 
0x4d16a: mov  rdi, qword [rsp]; lea  rdx, [r13*8]; mov  rsi, r14; call jump_memcpy; 
0x4d788: lea  rdx, [r9*8]; mov  rsi, r14; call jump_memcpy; 
0xcd4f0: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r15; call jump_memcpy; 
0xce381: mov  rdi, qword [rsp+0x8]; lea  rdx, [rdx*8]; mov  rsi, r9; mov  qword [rsp], rcx; call jump_memcpy; 
0xce3d8: mov  dword [rsp], esi; lea  rbp, [rsp+0x78]; mov  rsi, qword [rsp+0x8]; lea  rdx, [r14*8]; mov  rdi, rbp; mov  qword [rsp+0x10], rcx; call jump_memcpy; 
0xceaf1: mov  rsi, qword [rsp+0x8]; mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; call jump_memcpy; 
0xcf022: mov  rsi, qword [rsp+0x8]; lea  rdx, [r14*8]; call jump_memcpy; 
0x48ee0: lea  r12, [rdx-0x1]; lea  rcx, [rel 0x1ccec0]; mov  rdi, r14; lea  rdx, [r12*8]; lea  rsi, [rcx+rax*8+0x8]; call jump_memcpy; 
0x49d65: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x18], rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp], r9; call jump_memcpy; 
0x49dd2: lea  r15, [rsp+0x88]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], r11; mov  rdi, r15; mov  qword [rsp+0x18], rcx; mov  dword [rsp], r10d; call jump_memcpy; 
0x4a329: mov  rdi, qword [rsp]; lea  rdx, [r13*8]; mov  rsi, r14; call jump_memcpy; 
0x4ab13: lea  rdx, [r9*8]; mov  rsi, r14; call jump_memcpy; 
0x1358a9: shl  rdx, 0x2; jmp  jump_memcpy; 
0xe6c65: mov  rdx, qword [rsp]; lea  rax, [rbx+0x1]; mov  rsi, rbp; mov  qword [rsp+0x40], rax; call jump_memcpy; 
0x164775: mov  edx, dword [r15]; mov  rsi, qword [r15+0x8]; lea  rdi, [rax+0x84]; lea  r15, [rsp+0x30]; call jump_memcpy; 
0x16489e: mov  rdx, r9; mov  rsi, r13; mov  rdi, r8; call jump_memcpy; 
0x1425a8: mov  rax, qword [rbp-0x48]; lea  rcx, [rsp+0xf]; lea  rdx, [r15-0x10]; mov  rsi, r14; and  rcx, 0xfffffffffffffff0; mov  dword [rcx], r13d; lea  rdi, [rcx+0x10]; mov  dword [rcx+0x4], ebx; mov  qword [rcx+0x8], rax; mov  qword [rbp-0x48], rcx; call jump_memcpy; 
0x142628: mov  dword [rax], r13d; lea  rdi, [r9+0x10]; lea  rdx, [r15-0x10]; mov  rsi, r14; mov  dword [rax+0x4], ebx; mov  rax, qword [rbp-0x48]; mov  qword [rbp-0x48], r9; mov  qword [r9+0x8], rax; call jump_memcpy; 
0xcd4f0: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r15; call jump_memcpy; 
0xce381: mov  rdi, qword [rsp+0x8]; lea  rdx, [rdx*8]; mov  rsi, r9; mov  qword [rsp], rcx; call jump_memcpy; 
0xce3d8: mov  dword [rsp], esi; lea  rbp, [rsp+0x78]; mov  rsi, qword [rsp+0x8]; lea  rdx, [r14*8]; mov  rdi, rbp; mov  qword [rsp+0x10], rcx; call jump_memcpy; 
0xceaf1: mov  rsi, qword [rsp+0x8]; mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; call jump_memcpy; 
0xcf022: mov  rsi, qword [rsp+0x8]; lea  rdx, [r14*8]; call jump_memcpy; 
0x85292: lea  rdi, [rsp+0x40]; mov  qword [rsp+0x8], rdx; call jump_memcpy; 
0xdd319: mov  r14, qword [rbp-0x180]; mov  rsi, r12; mov  rdx, rbx; mov  rdi, r14; mov  r12, r14; call jump_memcpy; 
0xdd353: lea  rcx, [rsp+0xf]; mov  rsi, r12; mov  rdx, rbx; and  rcx, 0xfffffffffffffff0; mov  rdi, rcx; call jump_memcpy; 
0x3bd16: mov  rsi, r14; lea  rdi, [rax+0x38]; mov  rdx, r15; add  rbx, 0x1; mov  qword [rbp-0xc0], r10; call jump_mempcpy; mov  rdx, rbx; mov  rsi, r13; mov  r14, rax; mov  rdi, rax; call jump_memcpy; 
0xab1be: mov  rdi, qword [rbx]; mov  rbp, rax; mov  rdx, r15; mov  rsi, r13; add  rdi, rax; call jump_memcpy; 
0x40923: mov  rsi, qword [rsp]; mov  rdx, rbx; mov  rdi, r14; add  rbx, 0x1; call jump_memcpy; 
0x40af5: mov  rsi, qword [rsp]; lea  rdi, [r14+rbp]; mov  qword [rsp+0x8], r9; mov  rbp, rbx; call jump_memcpy; 
0x40c4b: lea  rdi, [r14+rbp]; mov  rsi, r12; mov  qword [rsp+0x8], r9; mov  rbp, rbx; call jump_memcpy; 
0xd4a30: lea  rdi, [rel 0x1ccec0]; lea  r13, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r13*8]; mov  rdi, r14; call jump_memcpy; 
0xd5864: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, r14; mov  qword [rsp+0x10], rcx; mov  qword [rsp+0x8], r9; call jump_memcpy; 
0xd60d0: mov  rdi, qword [rsp+0x8]; lea  rdx, [rbp*8]; mov  rsi, r14; call jump_memcpy; 
0xd6303: lea  r10, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; mov  qword [rsp+0x10], rcx; mov  rdi, r10; mov  qword [rsp+0x8], r9; call jump_memcpy; 
0xd6620: mov  ebx, 0x2; lea  r10, [rsp+0x80]; lea  rdx, [r9*8]; mov  rsi, r14; sub  rbx, r9; mov  qword [rsp+0x8], r10; lea  rdi, [r10+rbx*8]; call jump_memcpy; 
0xcaca0: lea  rdi, [rel 0x1ccec0]; lea  r12, [rdx-0x1]; lea  rsi, [rdi+rax*8+0x8]; lea  rdx, [r12*8]; mov  rdi, r15; call jump_memcpy; 
0xcba46: mov  rsi, rdi; lea  rdx, [rdx*8]; mov  rdi, rbp; mov  qword [rsp+0x8], rcx; mov  dword [rsp], r9d; call jump_memcpy; 
0xcbaa6: lea  r11, [rsp+0x78]; lea  rdx, [r15*8]; mov  rsi, rbp; mov  dword [rsp], r10d; mov  rdi, r11; mov  qword [rsp+0x8], rcx; call jump_memcpy; 
0xcc104: mov  rdi, qword [rsp]; lea  rdx, [rbx*8]; mov  rsi, rbp; mov  dword [rsp+0x18], r9d; call jump_memcpy; 
0xcc687: lea  rdx, [r15*8]; mov  rsi, rbp; call jump_memcpy; 
0xd7cd0: endbr64 ; push r12; mov  r12, rdi; mov  rdi, rsi; push rbp; mov  rbp, rsi; sub  rsp, 0x8; call jump_wcslen; 
0xe33ff: mov  rdi, rax; mov  qword [rbp-0x138], rax; call jump_wcslen; 
0xe3508: mov  dword [rbp-0x138], r9d; mov  dword [rbp-0x120], edx; mov  dword [rbp-0x130], r11d; call jump_wcslen; 
0xe3655: mov  dword [rbp-0x140], edx; mov  dword [rbp-0x138], r11d; call jump_wcslen; 
0xe3df6: mov  dword [rbp-0x130], edx; mov  dword [rbp-0x120], r11d; call jump_wcslen; 
0xe3f73: mov  dword [rbp-0x130], edx; mov  dword [rbp-0x120], r11d; call jump_wcslen; 
0xe4087: test r9d, r9d; mov  eax, 0x0; cmove   eax, dword [rbp-0xe8]; mov  rdi, qword [rbp-0x100]; cmovne  r12d, r9d; mov  dword [rbp-0x138], r11d; mov  dword [rbp-0xe8], eax; mov  rax, qword [rbp-0xf0]; mov  edx, dword [rax+0x8]; cmp  edx, 0xb; mov  dword [rbp-0x120], edx; setg al; movzx   eax, al; add  eax, 0x5a; cdqe ; mov  rdi, qword [rdi+rax*8+0x40]; call jump_wcslen; 
0xe42f5: mov  dword [rbp-0x138], r9d; mov  dword [rbp-0x120], edx; mov  dword [rbp-0x130], r11d; call jump_wcslen; 
0xe49af: mov  dword [rbp-0x140], edx; mov  dword [rbp-0x138], r9d; mov  dword [rbp-0x120], r11d; call jump_wcslen; 
0xe4bb2: mov  r8, qword [rax+0x30]; mov  dword [rbp-0x118], r11d; mov  rdi, r8; mov  qword [rbp-0x140], r8; call jump_wcslen; 
0x7c819: mov  rdi, rbp; call jump_wcslen; 
0x7c962: mov  r15, qword [rsp+0x8]; mov  dword [rsp+0x28], r8d; mov  dword [rsp+0x10], r10d; mov  rdi, r15; call jump_wcslen; 
0x79e10: mov  rdi, r10; mov  qword [rbp-0x8c8], r10; call jump_wcslen; 
0x79fc8: mov  rbx, qword [rbp-0x948]; mov  rdi, rbx; call jump_wcslen; 
0x84c9e: mov  rdi, rsi; call jump_wcslen; 
0xc5bf0: endbr64 ; push r12; mov  r12, rdi; mov  rdi, rsi; push rbp; mov  rbp, rsi; push rbx; call jump_wcslen; 
0x821b0: endbr64 ; push r14; push r13; push r12; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rsi; call jump_wcslen; 
0xc5640: endbr64 ; push r14; push r13; mov  r13, rdx; push r12; mov  r12, rdi; push rbp; mov  rbp, rsi; sub  rsp, 0x8; call jump_wcslen; 
0xc53c0: endbr64 ; push r12; mov  r12, rdi; push rbp; mov  rbp, rsi; sub  rsp, 0x8; call jump_wcslen; 
0xc5570: endbr64 ; push r12; push rbp; mov  rbp, rdi; sub  rsp, 0x8; call jump_wcslen; 
0x822e0: endbr64 ; push r14; push r13; mov  r13, rdi; push r12; push rbp; mov  rbp, rsi; push rbx; call jump_wcslen; 
0xc6630: mov  rdi, rdx; mov  qword [rsp], rdx; xor  r14d, r14d; lea  r12, [rsp+0x60]; call jump_wcslen; 
0xf0620: push r15; push r14; mov  r14d, edi; push r13; xor  r13d, r13d; push r12; mov  r12, 0xffffffff3ffff9fe; push rbp; push rbx; mov  rbx, rsi; lea  r15, [rbx+0x4]; sub  rsp, 0xa8; mov  dword [rsp+0x34], edi; mov  rdi, rsi; mov  qword [rsp+0x18], rdx; mov  qword [rsp+0x20], rcx; mov  dword [rsp+0x38], r8d; mov  dword [rsp+0x28], r9d; mov  byte [rsp+0x3f], r8b; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x98], rax; xor  eax, eax; call jump_wcslen; 
0xd08c7: mov  rdi, rsi; call jump_wcslen; 
0x15f814: lea  r12, [rsp+0x10]; xor  esi, esi; mov  edx, 0x2260; mov  rdi, r12; call jump_memset; 
0xb190c: add  rsp, 0x8; mov  rdx, rbp; xor  esi, esi; pop  rbx; sub  rdx, r12; pop  rbp; pop  r12; pop  r13; jmp  jump_memset; 
0x55c6d: lea  rdx, [rdx*8]; xor  esi, esi; call jump_memset; 
0xb196a: sub  rbx, rax; lea  rdi, [r13+rax]; xor  esi, esi; mov  rdx, rbx; call jump_memset; 
0xfcaac: mov  rcx, qword [rsp+0x58]; movsxd  r8, r13d; movsxd  rdx, r14d; xor  esi, esi; shl  r8, 0x3; lea  rdi, [rax+rdx*8]; mov  qword [rcx+0x8], rax; mov  rdx, r8; mov  dword [rcx+0x4], r12d; call jump_memset; 
0xfcc61: mov  edx, ebp; mov  rax, qword [rbx+0x88]; xor  esi, esi; sub  edx, r12d; movsxd  rdx, edx; lea  rdi, [rax+r12*8+0x8]; shl  rdx, 0x3; call jump_memset; 
0xfccd1: movsxd  rsi, dword [rbx+0x94]; movsxd  rdx, dword [rbx+0x98]; mov  qword [rbx+0xa0], rax; mov  dword [rsp+0xc], r8d; shl  rsi, 0x5; shl  rdx, 0x5; mov  dword [rsp+0x8], ecx; lea  rdi, [rax+rsi]; xor  esi, esi; movaps  xmmword [rsp+0x10], xmm0; call jump_memset; 
0x1081cf: mov  rdx, qword [rbp-0xa8]; xor  esi, esi; call jump_memset; 
0x555c6: lea  rdx, [r13*8]; xor  esi, esi; call jump_memset; 
0xf744a: mov  rdi, qword [rbx+0x8]; movsxd  rdx, edx; mov  esi, 0xff; call jump_memset; 
0xf781e: mov  rdi, qword [rbx+0x8]; movsxd  rdx, r10d; mov  esi, 0xff; call jump_memset; 
0xfd369: mov  r8d, r13d; mov  rax, qword [r15+0x88]; xor  esi, esi; mov  dword [rsp+0x28], ecx; sub  r8d, edx; movsxd  r8, r8d; lea  rdi, [rax+rdx*8+0x8]; shl  r8, 0x3; mov  rdx, r8; call jump_memset; 
0xfebb7: mov  rdx, qword [rsp+0x38]; xor  esi, esi; xor  r14d, r14d; call jump_memset; 
0xf4ad1: lea  eax, [rdx-0x2]; lea  rdi, [rcx+r9+0x4]; mov  esi, 0xff; lea  rdx, [rax*4+0x4]; call jump_memset; 
0xf50f6: lea  edx, [r13-0x2]; lea  rdi, [rax+rsi+0x4]; mov  esi, 0xff; lea  rdx, [rdx*4+0x4]; call jump_memset; 
0xf519f: lea  edx, [r15-0x2]; lea  rdi, [rax+rsi+0x4]; mov  esi, 0xff; lea  rdx, [rdx*4+0x4]; call jump_memset; 
0x12da0f: lea  r13, [rbp+r12]; mov  rdx, r14; mov  rsi, rbp; sub  rdx, rbp; mov  rdi, r13; call jump_memmove; add  qword [rbx+0x38], r12; mov  rdi, rbp; mov  rdx, r12; mov  esi, 0x20; mov  rbp, r13; call jump_memset; 
0x131783: lea  rdx, [rsp+0xf]; lea  r14, [rbp-0x60]; xor  esi, esi; and  rdx, 0xfffffffffffffff0; mov  qword [rbp-0xa0], rdx; mov  rdi, rdx; mov  rdx, rax; call jump_memset; 
0x15420b: mov  rdx, r15; xor  esi, esi; call jump_memset; 
0x14135b: lea  rax, [rsp+0xf]; mov  esi, 0xffffffff; and  rax, 0xfffffffffffffff0; mov  rdi, rax; mov  qword [rbp-0x90], rax; call jump_memset; 
0xe125c: mov  rdi, r13; mov  esi, 0x20; mov  r13, r14; call jump_memset; 
0xe1365: mov  rdi, r13; mov  r13, r15; call jump_memset; 
0xe1432: mov  rdi, r13; mov  esi, 0x20; call jump_memset; 
0xe1539: mov  rdi, r13; mov  r13, r15; call jump_memset; 
0xe1627: mov  rdi, r13; call jump_memset; 
0xe1714: mov  esi, 0x20; mov  rdi, r13; call jump_memset; 
0xe1817: mov  rdi, r13; call jump_memset; 
0xe18d0: mov  rdi, r13; mov  esi, 0x20; call jump_memset; 
0xe1a14: mov  rdi, r13; mov  esi, 0x20; mov  r13, r15; call jump_memset; 
0xe1b52: mov  rdi, r13; mov  rdx, r15; mov  esi, 0x30; mov  qword [rsp+0x48], r8; mov  dword [rsp+0x30], r11d; add  r13, r15; call jump_memset; 
0xe1bce: mov  rdi, r13; mov  esi, 0x20; mov  r13, r14; call jump_memset; 
0xe1d80: mov  rdi, r13; call jump_memset; 
0xe1e67: mov  rdi, r13; mov  esi, 0x20; mov  r13, r14; call jump_memset; 
0xe20ff: mov  rdi, r13; mov  esi, 0x20; mov  r13, r14; call jump_memset; 
0xe2283: mov  rdi, r13; mov  esi, 0x20; mov  r13, r14; call jump_memset; 
0xe247f: mov  esi, 0x20; mov  rdi, r13; call jump_memset; 
0xe2615: mov  rdi, r13; mov  esi, 0x30; mov  r13, r14; call jump_memset; 
0xe2644: mov  rdi, r13; mov  esi, 0x20; mov  dword [rsp+0x58], r9d; mov  qword [rsp+0x50], r8; mov  dword [rsp+0x48], r11d; mov  qword [rsp+0x30], rdx; call jump_memset; 
0xe26cf: mov  esi, 0x30; mov  rdi, r13; call jump_memset; 
0xe26e6: mov  rdi, r13; mov  esi, 0x30; call jump_memset; 
0xe2707: mov  rdi, r13; mov  esi, 0x30; mov  r13, r14; call jump_memset; 
0xe28c8: mov  esi, 0x20; mov  rdi, r13; call jump_memset; 
0xe29a2: mov  esi, 0x20; mov  rdi, r13; call jump_memset; 
0xe2a87: mov  esi, 0x20; mov  rdi, r13; call jump_memset; 
0xe2c01: mov  rdi, r13; mov  esi, 0x30; mov  r13, r14; call jump_memset; 
0xe2c45: mov  rdi, r13; mov  esi, 0x30; mov  r13, r15; call jump_memset; 
0xe2c64: mov  rdi, r13; mov  esi, 0x30; mov  r13, r14; call jump_memset; 
0xe2c79: mov  rdi, r13; mov  esi, 0x30; mov  r13, r14; call jump_memset; 
0xe2d3c: mov  rdi, r13; mov  esi, 0x30; call jump_memset; 
0xe2d5c: mov  esi, 0x30; mov  rdi, r13; call jump_memset; 
0xe2dbd: mov  esi, 0x30; mov  rdi, r13; call jump_memset; 
0xe2e1e: mov  esi, 0x30; mov  rdi, r13; call jump_memset; 
0xe2e3f: mov  esi, 0x30; mov  rdi, r13; call jump_memset; 
0xff6fd: movsxd  rdx, ebp; xor  esi, esi; mov  rdi, r15; shl  rdx, 0x3; call jump_memset; 
0xffbf0: mov  edx, ebx; mov  rax, qword [rsp+0x258]; xor  esi, esi; sub  edx, r8d; movsxd  rdx, edx; lea  rdi, [rax+r8*8+0x8]; shl  rdx, 0x3; call jump_memset; 
0xa4136: mov  rdi, r9; xor  sil, 0xff; mov  rdx, rbp; call jump_memset; 
0xa4485: xor  al, 0xff; mov  rdi, r9; mov  rdx, rbp; mov  esi, eax; call jump_memset; 
0xa2f00: lea  rdx, [rbx-0x10]; lea  rdi, [rbp+0x10]; call jump_memset; 
0x78426: mov  rax, qword [rbp-0x450]; mov  rbx, r13; lea  rdx, [r13*4]; shl  rbx, 0x4; add  rbx, rax; mov  qword [rbp-0x8c0], rax; mov  eax, dword [rbp+0x40]; mov  qword [rbp-0x8a8], rbx; add  rbx, rdx; and  eax, 0x2; mov  rdi, rbx; setne   sil; mov  dword [rbp-0x940], eax; movzx   esi, sil; neg  esi; call jump_memset; 
0x8f925: mov  rdx, rbp; lea  rdi, [r15+r14]; xor  esi, esi; sub  rdx, r14; call jump_memset; 
0x8f998: mov  rdx, rbp; lea  rdi, [r15+r14]; xor  esi, esi; xor  r12d, r12d; sub  rdx, r14; call jump_memset; 
0x72ef6: mov  rax, qword [rbp-0x460]; mov  rbx, r13; lea  rdx, [r13*4]; shl  rbx, 0x4; add  rbx, rax; mov  qword [rbp-0x8b0], rax; mov  eax, dword [rbp+0x40]; mov  qword [rbp-0x898], rbx; add  rbx, rdx; and  eax, 0x2; mov  rdi, rbx; setne   sil; mov  dword [rbp-0x93c], eax; movzx   esi, sil; neg  esi; call jump_memset; 
0x525f1: mov  rdx, r12; mov  esi, 0x20; mov  rdi, rbp; mov  qword [rsp+0x20], r9; mov  qword [rsp+0x8], r11; add  r13, r12; call jump_memset; 
0x374e2: mov  r15d, 0x2; mov  esi, 0x2f; sub  r15d, eax; add  r15, 0x1; cmp  eax, 0x2; mov  eax, 0x1; cmovg   r15, rax; mov  rdx, r15; call jump_memset; 
0x375ba: mov  r14d, 0x2; mov  esi, 0x2f; sub  r14d, eax; add  r14, 0x1; cmp  eax, 0x2; mov  eax, 0x1; cmovg   r14, rax; mov  rdx, r14; call jump_memset; 
0x5dab5: mov  rdx, r9; mov  esi, 0x30; mov  dword [rsp+0x58], r10d; sub  rdx, rdi; mov  qword [rsp+0x50], r9; mov  qword [rsp+0x48], rdx; call jump_memset; 
0x5dbf5: mov  rdx, r10; mov  esi, 0x30; mov  qword [rsp+0x58], r11; sub  rdx, rdi; mov  qword [rsp+0x50], r10; mov  qword [rsp+0x48], rdx; call jump_memset; 
0x5e28a: not  rsi; mov  dword [rsp+0x38], r9d; add  r10, rsi; mov  esi, 0x30; mov  qword [rsp+0x10], rdx; mov  rdi, r10; movsd   qword [rsp+0x20], xmm0; call jump_memset; 
0x5e43d: mov  rdx, r11; mov  esi, 0x30; mov  dword [rsp+0x50], r9d; lea  rax, [rsp+0x141]; sub  rdx, rdi; mov  qword [rsp+0x48], r11; mov  qword [rsp+0x38], rdx; mov  qword [rsp+0x20], rax; call jump_memset; 
0x5b1a9: mov  rdi, qword [rbp-0x90]; shl  rdx, 0x3; xor  esi, esi; mov  dword [rbp-0xd0], ecx; call jump_memset; 
0x55060: lea  rdx, [rdx*8]; xor  esi, esi; call jump_memset; 
0x92260: mov  rdx, r12; mov  esi, 0xffffffff; xor  r13d, r13d; call jump_memset; 
0x9229c: sub  r12, rdx; xor  esi, esi; mov  rdi, rax; mov  rdx, r12; call jump_memset; 
0x4ece7: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r12; call jump_memset; 
0xd4c84: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r14; xor  r13d, r13d; mov  qword [rsp+0x10], r9; call jump_memset; 
0xd6606: mov  rdi, r10; lea  rdx, [rbx*8]; xor  esi, esi; call jump_memset; 
0x57dfe: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0x596d3: lea  rdx, [rbp*8]; xor  esi, esi; mov  rdi, r15; call jump_memset; 
0x8c682: mov  r14d, 0x2; mov  esi, 0x2f; sub  r14d, eax; add  r14, 0x1; cmp  eax, 0x2; mov  eax, 0x1; cmovg   r14, rax; mov  rdx, r14; call jump_memset; 
0x153d46: xor  esi, esi; call jump_memset; 
0x57dfe: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0x596d3: lea  rdx, [rbp*8]; xor  esi, esi; mov  rdi, r15; call jump_memset; 
0xcaeea: lea  rdx, [r13*8+0x8]; xor  esi, esi; mov  rdi, rbp; mov  dword [rsp+0x8], r9d; call jump_memset; 
0x116d00: mov  rdx, r15; mov  qword [rsp+0x30], r14; xor  esi, esi; lea  r14, [rax+r15]; mov  qword [rsp+0x10], rax; mov  qword [rsp+0x28], r14; call jump_memset; 
0x4914d: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0xd4c84: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r14; xor  r13d, r13d; mov  qword [rsp+0x10], r9; call jump_memset; 
0xd6606: mov  rdi, r10; lea  rdx, [rbx*8]; xor  esi, esi; call jump_memset; 
0x1366fd: mov  rdx, rsi; xor  esi, esi; call jump_memset; 
0x2a789: mov  qword [rax+0x8], rcx; xor  esi, esi; lea  rdi, [rax+0x10]; mov  rdx, r14; mov  qword [rax], r13; call jump_memset; 
0x177e26: cdqe ; mov  edx, 0x80; sub  rsp, 0x8; xor  esi, esi; sub  rdx, rax; lea  rdi, [r8+rax]; call jump_memset; 
0x108d8a: cdqe ; sub  rsp, 0x8; xor  esi, esi; sub  r8, rax; lea  rdi, [rdx+rax]; mov  rdx, r8; call jump_memset; 
0x9500e: xor  esi, esi; mov  rdi, r15; call jump_memset; 
0x4c057: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0xa6840: add  rsp, 0x18; xor  esi, esi; mov  rdi, rax; pop  rbx; pop  rbp; pop  r12; pop  r13; jmp  jump_memset; 
0x132d4d: lea  rcx, [rcx+rcx*8]; add  r8, rdx; add  r12, rax; shl  rdx, 0x3; lea  r8, [rax+r8*8]; lea  rdi, [rax+rcx*8]; mov  qword [rbp-0xc0], rax; xor  esi, esi; mov  rax, qword [rel data_1e26b8]; mov  qword [rbp-0x100], r8; mov  qword [rbp-0x158], r8; mov  qword [rbp-0xb0], rdi; mov  qword [rbp-0x108], r12; mov  qword [rbp-0xf8], rax; mov  dword [rbp-0xf0], 0x0; mov  qword [rbp-0xe8], 0x0; mov  dword [rbp-0xe0], 0x0; mov  qword [rbp-0xd8], 0x0; mov  dword [rbp-0xd0], 0x0; mov  qword [rbp-0xcc], 0x0; call jump_memset; 
0x4914d: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0xb1800: endbr64 ; sub  rsp, 0x8; mov  rdx, rsi; xor  esi, esi; call jump_memset; 
0x95d80: cdqe ; sub  rsp, 0x8; xor  esi, esi; sub  r8, rax; lea  rdi, [rdx+rax]; mov  rdx, r8; call jump_memset; 
0x95dd0: cdqe ; mov  edx, 0x80; sub  rsp, 0x8; xor  esi, esi; sub  rdx, rax; lea  rdi, [r8+rax]; call jump_memset; 
0x57dfe: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0x596d3: lea  rdx, [rbp*8]; xor  esi, esi; mov  rdi, r15; call jump_memset; 
0x141fc8: lea  eax, [rbx-0x2]; mov  byte [rdi], 0x1; lea  edx, [rbx-0x2]; xor  esi, esi; mov  byte [rdi+0x1], al; movsxd  rdx, edx; add  rdi, 0x2; call jump_memset; 
0x4ece7: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r12; call jump_memset; 
0xcd740: mov  rdi, qword [rsp+0x8]; lea  rdx, [r10*8+0x8]; xor  esi, esi; call jump_memset; 
0x148a46: mov  rdx, r12; mov  rsi, rbp; sub  rdx, rbp; sub  rbx, rdx; mov  rdi, rbx; sub  rbx, rbp; call jump_memmove; mov  rdx, rbx; xor  esi, esi; mov  rdi, rbp; call jump_memset; 
0x116d00: mov  rdx, r15; mov  qword [rsp+0x30], r14; xor  esi, esi; lea  r14, [rax+r15]; mov  qword [rsp+0x10], rax; mov  qword [rsp+0x28], r14; call jump_memset; 
0x116d00: mov  rdx, r15; mov  qword [rsp+0x30], r14; xor  esi, esi; lea  r14, [rax+r15]; mov  qword [rsp+0x10], rax; mov  qword [rsp+0x28], r14; call jump_memset; 
0x4c057: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0x142160: lea  eax, [rbx-0x2]; mov  byte [rdi], 0x1; lea  edx, [rbx-0x2]; add  rdi, 0x2; mov  byte [rdi-0x1], al; movsxd  rdx, edx; xor  esi, esi; call jump_memset; 
0xcaeea: lea  rdx, [r13*8+0x8]; xor  esi, esi; mov  rdi, rbp; mov  dword [rsp+0x8], r9d; call jump_memset; 
0xa8024: sub  rbx, r13; mov  rdi, r13; xor  esi, esi; mov  rdx, rbx; imul rdi, r14; add  rdi, qword [rbp+0x10]; imul rdx, r14; call jump_memset; 
0x4ece7: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r12; call jump_memset; 
0x8f6df: mov  rdx, r15; lea  rdi, [r14+r13]; xor  esi, esi; sub  rdx, r13; call jump_memset; 
0x148cd7: mov  rdx, rbp; mov  rsi, r13; sub  rdx, r13; sub  rbx, rdx; mov  rdi, rbx; sub  rbx, r13; call jump_memmove; mov  rdx, rbx; xor  esi, esi; mov  rdi, r13; call jump_memset; 
0xc8594: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, rbp; mov  dword [rsp+0x20], r9d; call jump_memset; 
0xc8594: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, rbp; mov  dword [rsp+0x20], r9d; call jump_memset; 
0xc8594: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, rbp; mov  dword [rsp+0x20], r9d; call jump_memset; 
0x4c057: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0xcd740: mov  rdi, qword [rsp+0x8]; lea  rdx, [r10*8+0x8]; xor  esi, esi; call jump_memset; 
0x4914d: lea  rdx, [r11*8+0x8]; xor  esi, esi; mov  rdi, r14; mov  qword [rsp+0x10], r9; call jump_memset; 
0xcd740: mov  rdi, qword [rsp+0x8]; lea  rdx, [r10*8+0x8]; xor  esi, esi; call jump_memset; 
0xd4c84: xor  esi, esi; lea  rdx, [r11*8+0x8]; mov  rdi, r14; xor  r13d, r13d; mov  qword [rsp+0x10], r9; call jump_memset; 
0xd6606: mov  rdi, r10; lea  rdx, [rbx*8]; xor  esi, esi; call jump_memset; 
0xcaeea: lea  rdx, [r13*8+0x8]; xor  esi, esi; mov  rdi, rbp; mov  dword [rsp+0x8], r9d; call jump_memset; 
0x3631a: mov  r15d, 0x2; mov  rdi, r14; mov  esi, 0x2f; sub  r15d, eax; add  r15, 0x1; cmp  eax, 0x2; mov  eax, 0x1; cmovg   r15, rax; mov  rdx, r15; add  r14, r15; call jump_memset; 
0x363fa: mov  r14d, 0x2; mov  rdi, rbp; mov  esi, 0x2f; sub  r14d, eax; add  r14, 0x1; cmp  eax, 0x2; mov  eax, 0x1; cmovg   r14, rax; mov  rdx, r14; add  rbp, r14; call jump_memset; 
0x7c462: movsxd  rsi, r11d; mov  rdi, rbp; call jump_wcsnlen; 
0x78271: movsxd  rsi, r13d; mov  rdi, r10; mov  qword [rbp-0x8c8], r10; call jump_wcsnlen; 
0xc5640: endbr64 ; push r14; push r13; mov  r13, rdx; push r12; mov  r12, rdi; push rbp; mov  rbp, rsi; sub  rsp, 0x8; call jump_wcslen; mov  rsi, r13; mov  rdi, rbp; lea  r14, [r12+rax*4]; call jump_wcsnlen; 
0xc5c30: endbr64 ; push r13; mov  r13, rsi; mov  rsi, rdx; push r12; mov  r12, rdi; mov  rdi, r13; push rbp; push rbx; mov  rbx, rdx; sub  rsp, 0x8; call jump_wcsnlen; 
0xc651c: mov  rsi, r14; mov  rdi, rdx; add  r14, r12; mov  qword [rsp], rdx; call jump_wcsnlen; 
0xc6ac8: mov  rbx, qword [rsi]; mov  r13, rdi; mov  r14, rsi; lea  rsi, [rdx-0x1]; mov  r15, rcx; mov  rdi, rbx; call jump_wcsnlen; 
0xc5720: endbr64 ; push r13; mov  r13, rdi; push r12; push rbp; mov  rbp, rsi; mov  rsi, rdx; push rbx; mov  rdi, rbp; mov  rbx, rdx; sub  rsp, 0x8; call jump_wcsnlen; 
0x2cc35: lea  rdi, [r15+rax-0x5]; lea  rsi, [rel 0x1dc172]  {".conf"}; call jump_strcmp; 
0x2cd7f: mov  rsi, qword [r12]; mov  rdi, rbx; call jump_strcmp; 
0x3ab56: call jump_strcmp; 
0x3ab5f: mov  rsi, qword [rbx]; mov  rdi, qword [rbp]; call jump_strcmp; 
0x3ab6f: mov  rsi, qword [rbx+0x10]; mov  rdi, qword [rbp+0x10]; call jump_strcmp; 
0x1272f8: lea  rsi, [rel 0x1e1be0]  {"[always] madvise never\n"}; mov  rdi, r12; call jump_strcmp; 
0x127311: lea  rsi, [rel 0x1e1bc0]  {"always [madvise] never\n"}; mov  rdi, r12; call jump_strcmp; 
0x12732d: lea  rsi, [rel 0x1e1ba0]  {"always madvise [never]\n"}; mov  rdi, r12; call jump_strcmp; 
0x9c5a0: add  rsi, 0x20; add  rdi, 0x20; jmp  jump_strcmp; 
0x35db0: endbr64 ; mov  rsi, qword [rsi]; mov  rdi, qword [rdi]; jmp  jump_strcmp; 
0xf5d96: lea  rsi, [rel 0x1da620]  {"upper"}; mov  rdi, r8; call jump_strcmp; 
0xf5dc5: lea  eax, [rdx+0x1]; mov  dword [r13+0x44], eax; lea  r13, [rdi+rdx*8]; mov  rdi, r12; call wctype; lea  rsi, [rel data_1d9e65]  {"alnum"}; mov  rdi, r12; mov  qword [r13], rax; call jump_strcmp; 
0xf5def: lea  rsi, [rel 0x1d9e6b]  {"cntrl"}; mov  rdi, r12; call jump_strcmp; 
0xf5ea6: mov  rdi, r12; lea  rsi, [rel 0x1d9e5f]  {"lower"}; call jump_strcmp; 
0xf5f00: lea  rsi, [rel 0x1d9e5f]  {"lower"}; mov  rdi, r12; call jump_strcmp; 
0xf5f13: lea  rsi, [rel data_1d947d[0xc]]  {"space"}; mov  rdi, r12; call jump_strcmp; 
0xf5fba: lea  rsi, [rel 0x1d9e59]  {"alpha"}; mov  rdi, r12; call jump_strcmp; 
0xf601a: lea  rsi, [rel 0x1d9e84]  {"digit"}; mov  rdi, r12; call jump_strcmp; 
0xf6141: lea  rsi, [rel 0x1d9e71]  {"print"}; mov  rdi, r12; call jump_strcmp; 
0xf619a: lea  rsi, [rel 0x1da620]  {"upper"}; mov  rdi, r12; call jump_strcmp; 
0xf6269: lea  rsi, [rel 0x1d9e77]  {"blank"}; mov  rdi, r12; call jump_strcmp; 
0xf62f8: lea  rsi, [rel 0x1d9e7d]  {"graph"}; mov  rdi, r12; call jump_strcmp; 
0xf6384: lea  rsi, [rel data_1d8842[5]]  {"punct"}; mov  rdi, r12; call jump_strcmp; 
0xf640e: lea  rsi, [rel 0x1d9e83]  {"xdigit"}; mov  rdi, r12; call jump_strcmp; 
0x17157d: mov  rdi, qword [rbp-0x190]; mov  rsi, r14; call jump_strcmp; 
0x171652: mov  rdi, qword [rbp-0x190]; mov  rsi, r14; call jump_strcmp; 
0x15054a: mov  r14, qword [rbp+0x18]; mov  qword [rsp+0x8], rdi; call jump_strlen; mov  rdi, qword [rsp+0x8]; mov  rsi, qword [r14]; mov  qword [rsp], rax; lea  r13, [rax+0x1]; call jump_strcmp; 
0x15058c: mov  qword [rsp+0x8], rdi; call jump_strlen; mov  rsi, qword [rsp]; mov  rdi, qword [rsp+0x8]; lea  r13, [rsi+rax+0x2]; mov  rsi, qword [r14+0x8]; call jump_strcmp; 
0x1505cc: mov  rdi, r15; call jump_strlen; mov  rsi, qword [r14+0x10]; mov  rdi, r15; lea  r13, [r13+rax+0x1]; call jump_strcmp; 
0x150604: mov  rdi, r15; call jump_strlen; mov  rsi, qword [r14+0x18]; mov  rdi, r15; lea  r13, [r13+rax+0x1]; call jump_strcmp; 
0x150638: mov  rdi, r15; call jump_strlen; mov  rsi, qword [r14+0x20]; mov  rdi, r15; lea  r13, [r13+rax+0x1]; call jump_strcmp; 
0x15066c: mov  rsi, qword [r14+0x28]; call jump_strcmp; 
0x15068c: mov  rsi, qword [r14+0x30]; call jump_strcmp; 
0x2cea0: endbr64 ; push rbp; mov  rbp, rdi; push rbx; mov  rbx, rsi; lea  rsi, [rel 0x1d809b]  {"=INTERNAL->ucs4"}; sub  rsp, 0x8; call jump_strcmp; 
0x2cec4: lea  rsi, [rel 0x1d80ab]  {"=ucs4->INTERNAL"}; mov  rdi, rbp; call jump_strcmp; 
0x2cedb: lea  rsi, [rel 0x1d80c5]  {"=INTERNAL->ucs4le"}; mov  rdi, rbp; call jump_strcmp; 
0x2cef2: lea  rsi, [rel 0x1d80d7]  {"=ucs4le->INTERNAL"}; mov  rdi, rbp; call jump_strcmp; 
0x2cf09: lea  rsi, [rel 0x1d80f9]  {"=INTERNAL->utf8"}; mov  rdi, rbp; call jump_strcmp; 
0x2cf20: lea  rsi, [rel 0x1d8109]  {"=utf8->INTERNAL"}; mov  rdi, rbp; call jump_strcmp; 
0x2cf37: lea  rsi, [rel 0x1d8129]  {"=ucs2->INTERNAL"}; mov  rdi, rbp; call jump_strcmp; 
0x2cf4e: lea  rsi, [rel 0x1d8139]  {"=INTERNAL->ucs2"}; mov  rdi, rbp; call jump_strcmp; 
0x2cf65: lea  rsi, [rel 0x1d815a]  {"=ascii->INTERNAL"}; mov  rdi, rbp; call jump_strcmp; 
0x2cf7c: lea  rsi, [rel 0x1d816b]  {"=INTERNAL->ascii"}; mov  rdi, rbp; call jump_strcmp; 
0x2cf93: lea  rsi, [rel 0x1d8189]  {"=ucs2reverse->INTERNAL"}; mov  rdi, rbp; call jump_strcmp; 
0x2cfaa: lea  rsi, [rel 0x1d81a0]  {"=INTERNAL->ucs2reverse"}; mov  rdi, rbp; call jump_strcmp; 
0x35411: add  rsi, qword [rsp+0x8]; mov  rdi, qword [rsp+0x10]; add  rsi, r14; call jump_strcmp; 
0x2ac20: endbr64 ; push rbp; mov  rbp, rsi; push rbx; mov  rbx, rdi; sub  rsp, 0x8; mov  rsi, qword [rsi]; mov  rdi, qword [rdi]; call jump_strcmp; 
0x2ac3f: mov  rsi, qword [rbp+0x8]; mov  rdi, qword [rbx+0x8]; add  rsp, 0x8; pop  rbx; pop  rbp; jmp  jump_strcmp; 
0x2c296: mov  rsi, qword [rbp]; mov  rdi, r12; call jump_strcmp; 
0x2c2b0: mov  rsi, qword [rbp+0x8]; mov  rdi, r15; call jump_strcmp; 
0x2c2cd: mov  rsi, qword [rbp]; mov  rdi, r12; call jump_strcmp; 
0x1557f5: lea  rbx, [r15+r14]; mov  rdi, rbp; shr  rbx, 0x1; lea  rax, [rbx+rbx*8]; lea  rsi, [rbx+rax*2]; add  rsi, r12; call jump_strcmp; 
0x155200: push rbp; lea  rsi, [rel 0x1d8a75]  {"files"}; mov  rbp, rsp; push r15; push r14; push r13; lea  r13, [rdi+0x218]; push r12; push rbx; sub  rsp, 0x248; mov  qword [rbp-0x268], rdi; mov  rdi, r13; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strcmp; 
0x155248: lea  rsi, [rel 0x1dc1c6]; mov  rdi, r13; call jump_strcmp; 
0x1566e1: lea  rbx, [r14+rbp]; lea  rax, [rel 0x1d69e0]  {"aliases"}; mov  rdi, r13; shr  rbx, 0x1; lea  r15, [rbx*8]; sub  r15, rbx; add  r15, r15; lea  rsi, [r15+rax]; call jump_strcmp; 
0x158d9e: mov  rax, qword [rsp+0x38]; mov  rsi, qword [rsp]; mov  rdi, qword [rax]; call jump_strcmp; 
0x1727c9: mov  rbp, qword [rel data_21a570]; lea  rsi, [rel 0x1dc628]  {"/var/run/utmp"}; mov  rdi, rbp; call jump_strcmp; 
0x1727e7: lea  rsi, [rel 0x1dc636]  {"/var/log/wtmp"}; mov  rdi, rbp; call jump_strcmp; 
0x1727fe: lea  r12, [rel 0x1dc619]  {"/var/run/utmpx"}; mov  rdi, rbp; mov  rsi, r12; call jump_strcmp; 
0x172818: lea  r12, [rel 0x1dc60a]  {"/var/log/wtmpx"}; mov  rdi, rbp; mov  rsi, r12; call jump_strcmp; 
0x172fc6: mov  rbp, qword [rel data_21a570]; lea  rsi, [rel 0x1dc628]  {"/var/run/utmp"}; mov  rdi, rbp; call jump_strcmp; 
0x172fe4: lea  rsi, [rel 0x1dc636]  {"/var/log/wtmp"}; mov  rdi, rbp; call jump_strcmp; 
0x172ffb: lea  r13, [rel 0x1dc619]  {"/var/run/utmpx"}; mov  rdi, rbp; mov  rsi, r13; call jump_strcmp; 
0x173015: lea  r13, [rel 0x1dc60a]  {"/var/log/wtmpx"}; mov  rdi, rbp; mov  rsi, r13; call jump_strcmp; 
0x1216be: mov  rsi, rdx; call jump_strcmp; 
0x131300: mov  rsi, rbx; call jump_strcmp; 
0x131380: mov  rsi, rbx; call jump_strcmp; 
0x132890: mov  rsi, r14; call jump_strcmp; 
0x13bda9: mov  rdi, qword [rsp+0x8]; call jump_strcmp; 
0x13be6e: mov  rdi, qword [rsp+0x18]; mov  rsi, r14; call jump_strcmp; 
0x13bf9d: lea  rdi, [rsi+0x1]; mov  rsi, qword [rsp+0x8]; call jump_strcmp; 
0xdabc3: mov  rsi, r12; mov  rdi, rbp; call jump_strcmp; 
0xdac23: lea  rsi, [rel 0x1d9b22]  {"/etc/localtime"}; mov  rdi, rbp; call jump_strcmp; 
0xdc940: movzx   eax, byte [r15+0x4]; mov  rcx, qword [rsp+0x10]; mov  r14, qword [r12+rax*8]; mov  dword [rcx+0x20], eax; movzx   edi, byte [r15+0x5]; add  rdi, qword [rel 0x220798]; mov  rsi, r14; call jump_strcmp; 
0xde3cd: mov  rsi, qword [r12+0x308]; mov  rdi, qword [r13+0x3c8]; mov  qword [rsp+0x20], rdx; call jump_strcmp; 
0xde4cb: mov  rsi, qword [r12+0x60]; mov  rdi, qword [r13+0x60]; call jump_strcmp; 
0xde53b: mov  rsi, qword [r12]; mov  rdi, qword [r13]; call jump_strcmp; 
0xde5ad: mov  rsi, qword [r12+0x308]; mov  rdi, qword [r13+0x308]; call jump_strcmp; 
0xde68a: mov  rax, qword [rsp+0x8]; mov  rsi, qword [r13]; mov  qword [rsp+0x20], rdx; mov  rdi, qword [rax+rbp*8+0x40]; call jump_strcmp; 
0xde784: mov  rax, qword [rsp+0x8]; mov  rsi, qword [r13+0x38]; mov  rdi, qword [rax+rbp*8+0x78]; call jump_strcmp; 
0xdec89: mov  rax, qword [rsp+0x8]; mov  rsi, qword [rel data_216f58]; add  qword [rsp+0x48], rbp; mov  rdi, qword [rax+0x178]; call jump_strcmp; 
0xdee81: mov  rsi, qword [rel data_216f60]; mov  rdi, rbp; call jump_strcmp; 
0xdf0a6: mov  rsi, qword [rel data_216f70]; mov  rdi, rbp; call jump_strcmp; 
0xdf2a6: mov  rsi, qword [rel data_216f68]; mov  rdi, rbp; call jump_strcmp; 
0xdf9b2: mov  rdi, qword [r14+0x170]; mov  rsi, qword [rel data_216f50]; add  qword [rsp+0x48], rbp; call jump_strcmp; 
0xdff1b: mov  rax, qword [rsp+0x8]; mov  rsi, qword [rel data_216f68]; mov  rdi, qword [rax+0x188]; call jump_strcmp; 
0xe0043: mov  rax, qword [rsp+0x8]; mov  rsi, qword [rel data_216f78]; mov  rdi, qword [rax+0x198]; call jump_strcmp; 
0xe00a0: mov  rax, qword [rsp+0x8]; mov  rsi, qword [rel data_216f70]; mov  rdi, qword [rax+0x190]; call jump_strcmp; 
0xe0100: mov  rax, qword [rsp+0x8]; mov  rsi, qword [rel data_216f60]; mov  rdi, qword [rax+0x180]; call jump_strcmp; 
0xe70dd: mov  rsi, rbp; call jump_strcmp; 
0xec6fc: mov  r15, qword [rbp-0x15c0]; mov  rsi, r14; mov  rdi, r15; call jump_strcmp; 
0xec712: lea  rsi, [rel 0x1d9d12]  {"ext3"}; mov  rdi, r15; call jump_strcmp; 
0xec725: lea  rsi, [rel 0x1d9d17]  {"ext4"}; mov  rdi, r15; call jump_strcmp; 
0xec75f: mov  rdi, qword [rbp-0x15c0]; lea  rsi, [rel 0x1d9d17]  {"ext4"}; call jump_strcmp; 
0x1047e6: mov  rdi, qword [rbx+0xb0]; lea  rsi, [rel data_1d9e8c]  {"UTF-8"}; call jump_strcmp; 
0x10bad9: lea  rsi, [rel 0x1d9f5a]  {"reload"}; mov  rdi, r13; call jump_strcmp; 
0x10baec: lea  rsi, [rel 0x1d9667]; mov  rdi, r14; call jump_strcmp; 
0x10be0a: lea  rsi, [rel 0x1d9f69]  {"precedence"}; mov  rdi, r13; call jump_strcmp; 
0x10bee0: lea  rsi, [rel 0x1d9f54]  {"label"}; mov  rdi, r13; call jump_strcmp; 
0x10bf20: lea  rsi, [rel 0x1d9f61]  {"scopev4"}; mov  rdi, r13; call jump_strcmp; 
0x17806a: lea  r14, [rax+0x13]; mov  rsi, r13; mov  rdi, r14; call jump_strcmp; 
0x17807d: mov  rsi, r15; mov  rdi, r14; call jump_strcmp; 
0x17808c: lea  rsi, [rel 0x1da085]  {"stderr"}; mov  rdi, r14; call jump_strcmp; 
0x69b93: mov  rsi, qword [rbp-0x648]; mov  rdi, qword [rbp-0x6d8]; call jump_strcmp; 
0x2c9d9: mov  rsi, qword [r13]; mov  rdi, r15; call jump_strcmp; 
0x2ac10: endbr64 ; mov  rsi, qword [rsi]; mov  rdi, qword [rdi]; jmp  jump_strcmp; 
0x2bcb8: mov  rsi, r12; mov  rdi, rbp; mov  qword [rsp+0x8], r10; call jump_strcmp; 
0x2bcd6: mov  rdi, r10; mov  rsi, r12; call jump_strcmp; 
0x2bcf3: mov  rsi, r15; mov  rdi, rbp; mov  qword [rsp+0x8], r10; call jump_strcmp; 
0x2bd15: mov  rdi, r10; mov  rsi, r15; call jump_strcmp; 
0x37029: mov  rsi, r14; mov  rdi, r15; call jump_strcmp; 
0x3703c: lea  rsi, [rel 0x1d850f]  {"POSIX"}; mov  rdi, r15; call jump_strcmp; 
0x371cc: lea  r14, [rel 0x1da1d7]; mov  r15, r14; mov  rsi, r14; mov  qword [rbp-0x68], r14; mov  rdi, r15; call jump_strcmp; 
0x3652d: mov  rdi, r13; xor  ebx, ebx; call jump_strcmp; 
0x3659f: call jump_strcmp; 
0x365b5: mov  rbp, qword [r12]; lea  r13, [rel 0x1da1d7]; mov  rsi, r13; mov  rdi, rbp; call jump_strcmp; 
0x365cf: lea  rsi, [rel 0x1d850f]  {"POSIX"}; mov  rdi, rbp; call jump_strcmp; 
0x3a472: lea  rsi, [r14+0x18]; mov  rdi, rbx; call jump_strcmp; 
0x3a49f: mov  rsi, r8; mov  rdi, rbx; mov  qword [rsp], r8; call jump_strcmp; 
0x3a4ba: lea  rdx, [rel _nl_default_dirname]  {"/usr/share/locale"}; mov  rdi, rbx; mov  qword [rsp+0x8], r8; mov  rsi, rdx; mov  qword [rsp], rdx; call jump_strcmp; 
0x3a54f: mov  rsi, rbx; mov  rdi, rbp; call jump_strcmp; 
0x3a5fb: lea  rdx, [rel _nl_default_dirname]  {"/usr/share/locale"}; mov  rdi, r15; mov  rsi, rdx; mov  qword [rsp], rdx; call jump_strcmp; 
0x3a673: lea  rsi, [rbp+0x18]; mov  rdi, rbx; call jump_strcmp; 
0x3a690: lea  rsi, [rbp+0x18]; mov  rdi, rbx; call jump_strcmp; 
0x3acc1: mov  rdi, qword [rbp-0x88]; call jump_strcmp; 
0x3ad83: add  rsi, rax; mov  rdi, r13; call jump_strcmp; 
0x3aed0: sub  r12, 0x1; mov  rax, qword [r13+0x70]; mov  rsi, rbx; lea  rdx, [r12+r12*2]; lea  r15, [rax+rdx*8]; mov  rdi, qword [r15]; call jump_strcmp; 
0x3af58: mov  rdi, qword [r13]; mov  rsi, r15; mov  r12, r13; sub  rbx, 0x1; sub  r13, 0x18; call jump_strcmp; 
0x13ef74: mov  rsi, rax; call jump_strcmp; 
0x13f0a0: lea  rsi, [rbx+0x8]; mov  rdi, r14; call jump_strcmp; 
0x13f0d8: lea  rsi, [rbx+0x8]; mov  rdi, r14; call jump_strcmp; 
0x13f0f4: mov  rdi, qword [rsp+0x38]; mov  rsi, r14; call jump_strcmp; 
0x165130: endbr64 ; push rbp; mov  rbp, rsp; push r15; push r14; mov  r14, rdx; push r13; push r12; mov  r12, rdi; mov  rdi, rcx; push rbx; mov  rbx, rcx; sub  rsp, 0xc8; mov  qword [rbp-0xe8], rsi; lea  rsi, [rel 0x1dc445]  {"unix"}; mov  rax, qword [fs:0x28]; mov  qword [rbp-0x38], rax; xor  eax, eax; call jump_strcmp; 
0x15aa9d: mov  rsi, qword [r13]; mov  rdi, r15; call jump_strcmp; 
0x157b97: mov  rsi, qword [rbp]; mov  rdi, rbx; call jump_strcmp; 
0x157bc5: mov  rdi, rbx; call jump_strcmp; 
0x1224c4: mov  rbx, rsi; lea  rsi, [rel 0x1da1d9]  {"__memcmpeq"}; mov  rbp, rdi; call jump_strcmp; 
0x1224de: lea  rsi, [rel 0x1da629]  {"memchr"}; mov  rdi, rbp; call jump_strcmp; 
0x1224f5: lea  rsi, [rel 0x1daf5b]  {"memcmp"}; mov  rdi, rbp; call jump_strcmp; 
0x12250c: lea  rsi, [rel 0x1da2e3]  {"__memmove_chk"}; mov  rdi, rbp; call jump_strcmp; 
0x122523: lea  rsi, [rel 0x1da387]  {"memmove"}; mov  rdi, rbp; call jump_strcmp; 
0x12253a: lea  rsi, [rel 0x1da49d]  {"memrchr"}; mov  rdi, rbp; call jump_strcmp; 
0x122551: lea  rsi, [rel 0x1da4e5]  {"__memset_chk"}; mov  rdi, rbp; call jump_strcmp; 
0x122568: lea  rsi, [rel 0x1dafd6]  {"memset"}; mov  rdi, rbp; call jump_strcmp; 
0x12257f: lea  rsi, [rel 0x1da626]  {"rawmemchr"}; mov  rdi, rbp; call jump_strcmp; 
0x122596: lea  rsi, [rel 0x1da68d]  {"strlen"}; mov  rdi, rbp; call jump_strcmp; 
0x1225ad: lea  rsi, [rel 0x1da6d0]  {"strnlen"}; mov  rdi, rbp; call jump_strcmp; 
0x1225c4: lea  rsi, [rel 0x1da718]  {"stpncpy"}; mov  rdi, rbp; call jump_strcmp; 
0x1225db: lea  rsi, [rel 0x1da789]  {"stpcpy"}; mov  rdi, rbp; call jump_strcmp; 
0x1225f2: lea  rsi, [rel 0x1da7f3]  {"strcasecmp"}; mov  rdi, rbp; call jump_strcmp; 
0x122609: lea  rsi, [rel 0x1da847]  {"strcasecmp_l"}; mov  rdi, rbp; call jump_strcmp; 
0x122620: lea  rsi, [rel 0x1da8a5]  {"strcat"}; mov  rdi, rbp; call jump_strcmp; 
0x122637: lea  rsi, [rel 0x1da90f]  {"strchr"}; mov  rdi, rbp; call jump_strcmp; 
0x12264e: lea  rsi, [rel 0x1da967]  {"strchrnul"}; mov  rdi, rbp; call jump_strcmp; 
0x122665: lea  rsi, [rel 0x1da9b9]  {"strrchr"}; mov  rdi, rbp; call jump_strcmp; 
0x12267c: lea  rsi, [rel 0x1daa01]  {"strcmp"}; mov  rdi, rbp; call jump_strcmp; 
0x122693: lea  rsi, [rel 0x1daa7a]  {"strcpy"}; mov  rdi, rbp; call jump_strcmp; 
0x1226aa: lea  rsi, [rel 0x1daae4]  {"strcspn"}; mov  rdi, rbp; call jump_strcmp; 
0x1226c1: lea  rsi, [rel 0x1dab0b]  {"strncasecmp"}; mov  rdi, rbp; call jump_strcmp; 
0x1226d8: lea  rsi, [rel 0x1dab64]  {"strncasecmp_l"}; mov  rdi, rbp; call jump_strcmp; 
0x1226ef: lea  rsi, [rel 0x1dabc7]  {"strncat"}; mov  rdi, rbp; call jump_strcmp; 
0x122706: lea  rsi, [rel 0x1dac38]  {"strncpy"}; mov  rdi, rbp; call jump_strcmp; 
0x12271d: lea  rsi, [rel 0x1daca9]  {"strpbrk"}; mov  rdi, rbp; call jump_strcmp; 
0x122734: lea  rsi, [rel 0x1dacd0]  {"strspn"}; mov  rdi, rbp; call jump_strcmp; 
0x12274b: lea  rsi, [rel 0x1dacf4]  {"strstr"}; mov  rdi, rbp; call jump_strcmp; 
0x122762: lea  rsi, [rel 0x1dad21]  {"wcschr"}; mov  rdi, rbp; call jump_strcmp; 
0x12277b: lea  rsi, [rel 0x1dad64]  {"wcsrchr"}; mov  rdi, rbp; call jump_strcmp; 
0x122794: lea  rsi, [rel 0x1dadac]  {"wcscmp"}; mov  rdi, rbp; call jump_strcmp; 
0x1227ad: lea  rsi, [rel 0x1dadef]  {"wcsncmp"}; mov  rdi, rbp; call jump_strcmp; 
0x1227c6: lea  rsi, [rel 0x1dae37]  {"wcscpy"}; mov  rdi, rbp; call jump_strcmp; 
0x1227dd: lea  rsi, [rel 0x1dae5b]  {"wcslen"}; mov  rdi, rbp; call jump_strcmp; 
0x1227f6: lea  rsi, [rel 0x1daeae]  {"wcsnlen"}; mov  rdi, rbp; call jump_strcmp; 
0x12280f: lea  rsi, [rel 0x1da628]  {"wmemchr"}; mov  rdi, rbp; call jump_strcmp; 
0x122826: lea  rsi, [rel 0x1daf5a]  {"wmemcmp"}; mov  rdi, rbp; call jump_strcmp; 
0x12283f: lea  rsi, [rel 0x1dafd5]  {"wmemset"}; mov  rdi, rbp; call jump_strcmp; 
0x122856: lea  rsi, [rel 0x1db060]  {"__memcpy_chk"}; mov  rdi, rbp; call jump_strcmp; 
0x12286d: lea  rsi, [rel 0x1db11b]  {"memcpy"}; mov  rdi, rbp; call jump_strcmp; 
0x122884: lea  rsi, [rel 0x1db243]  {"__mempcpy_chk"}; mov  rdi, rbp; call jump_strcmp; 
0x12289b: lea  rsi, [rel 0x1db2e7]  {"mempcpy"}; mov  rdi, rbp; call jump_strcmp; 
0x1228b2: lea  rsi, [rel 0x1db3fd]  {"strncmp"}; mov  rdi, rbp; call jump_strcmp; 
0x1228cb: lea  rsi, [rel 0x1db465]  {"__wmemset_chk"}; mov  rdi, rbp; call jump_strcmp; 
0x13ec40: lea  rsi, [r12+0x8]; mov  rdi, r13; call jump_strcmp; 
0x13ec70: lea  rsi, [r12+0x8]; mov  rdi, r13; call jump_strcmp; 
0x15a5fd: mov  rsi, qword [r13]; mov  rdi, r15; call jump_strcmp; 
0x3b68b: lea  rsi, [r12+0x18]; mov  rdi, r13; call jump_strcmp; 
0x3b815: lea  rsi, [rel 0x1d850f]  {"POSIX"}; mov  rdi, r15; call jump_strcmp; 
0x11c620: mov  rdi, qword [rax+0x8]; mov  rsi, rbx; call jump_strcmp; 
0x15d03d: mov  rsi, rbx; call jump_strcmp; 
0x15d9ae: mov  rdi, qword [rbx+0x28]; mov  rsi, r12; call jump_strcmp; 
0x173736: call sub_173580; mov  r13, qword [rel data_21a570]; mov  rdi, rbp; mov  rsi, r13; call jump_strcmp; 
0x173754: lea  rbx, [rel 0x1e1320]  {"/var/run/utmp"}; mov  rdi, rbp; mov  rsi, rbx; call jump_strcmp; 
0x158485: mov  rdi, qword [rbx+0x18]; call jump_strcmp; 
0xe8d7f: mov  r14, rsi; mov  rsi, qword [rdi]; mov  rdi, qword [r8]; mov  rbx, rdx; call jump_strcmp; 
0x11c550: mov  rdi, qword [rax]; mov  rsi, rbx; call jump_strcmp; 
0x11de60: mov  rdi, qword [rax]; mov  rsi, rbx; call jump_strcmp; 
0x11d65d: mov  rsi, qword [r12]; mov  rdi, rbx; call jump_strcmp; 
0x15cb87: mov  rsi, qword [rbp]; mov  rdi, rbx; call jump_strcmp; 
0x15cbb5: mov  rdi, rbx; call jump_strcmp; 
0x13dd61: mov  rsi, r12; call jump_strcmp; 
0x13ddc0: mov  rdi, qword [rbx]; mov  rsi, r14; call jump_strcmp; 
0x15c65d: mov  rsi, qword [r13]; mov  rdi, r15; call jump_strcmp; 
0x3dd20: mov  rsi, rbx; mov  rdi, rbp; call jump_strcmp; 
0x3dd2f: mov  rsi, r14; mov  rdi, rbp; call jump_strcmp; 
0x11fbe0: mov  rsi, qword [rbp+0x8]; mov  rdi, rcx; mov  qword [rsp+0x10], r11; mov  qword [rsp+0x8], rcx; call jump_strcmp; 
0x11fc58: mov  rax, qword [rsp+0x30]; mov  rdi, r15; mov  qword [rsp+0x8], r11; mov  rsi, qword [rax+0x8]; call jump_strcmp; 
0x12a756: mov  rsi, rbx; mov  rdi, r12; call jump_strcmp; 
0x3582d: mov  rsi, r12; mov  rdi, rbp; call jump_strcmp; 
0x2b009: mov  rsi, qword [rbx]; mov  rdi, r14; call jump_strcmp; 
0x2b03c: mov  rsi, rax; mov  rdi, r13; call jump_strcmp; 
0x2b0a5: mov  rax, qword [rbp-0x68]; movq xmm0, qword [rbx+0x10]; mov  rdi, r13; mov  rsi, qword [rbp-0x90]; movq xmm1, qword [rax+0x10]; pshufd  xmm0, xmm0, 0xe1; paddd   xmm0, xmm1; pshufd  xmm6, xmm0, 0xe5; movq qword [rbp-0x78], xmm0; movd r14d, xmm6; movd dword [rbp-0x70], xmm0; call jump_strcmp; 
0x2b10d: mov  rsi, qword [r15]; mov  rdi, r13; call jump_strcmp; 
0x2b340: mov  rsi, qword [r15]; mov  rdi, r13; call jump_strcmp; 
0x37fa0: mov  rsi, r12; mov  rdi, r13; call jump_strcmp; 
0x380ff: add  rsi, r12; mov  rdi, r13; mov  qword [rbp-0x128], r8; mov  qword [rbp-0x120], r10; mov  dword [rbp-0x118], r9d; call jump_strcmp; 
0x3e5f8: mov  rdi, qword [rbp]; mov  rsi, rax; mov  qword [rsp], rax; call jump_strcmp; 
0x3df19: mov  rsi, rbp; call jump_strcmp; 
0x2badf: mov  rsi, r12; call jump_strcmp; 
0x15b56d: mov  rsi, qword [r13]; mov  rdi, r15; call jump_strcmp; 
0x1582cf: mov  rdi, qword [rbp+0x18]; mov  rsi, r13; call jump_strcmp; 
0x1582df: mov  rsi, qword [rbp]; mov  rdi, rbx; call jump_strcmp; 
0x15830d: mov  rdi, rbx; call jump_strcmp; 
0x12afee: mov  rsi, rbx; mov  rdi, r12; call jump_strcmp; 
0x36761: movq xmm0, rsi; lea  rbp, [rel 0x21aaa0]; lea  r13, [rel data_21a580]; punpcklqdq xmm0, xmm0; mov  rdi, rbp; lea  r12, [r15+0x10]; movaps  xmmword [rsp], xmm0; call pthread_rwlock_wrlock; mov  rsi, qword [r13+r12*8]; mov  rdi, rbx; call jump_strcmp; 
0x36884: mov  rdx, qword [r13+r15*8+0x80]; mov  qword [rsp+0x20], rdi; mov  rsi, rdx; mov  qword [rsp+0x28], rdx; call jump_strcmp; 
0x11cd56: mov  rdi, qword [r12+0x10]; lea  rsi, [rel 0x1da10f]  {"autofs"}; call jump_strcmp; 
0x173810: endbr64 ; push r13; push r12; mov  r12, rsi; lea  rsi, [rel 0x1dc628]  {"/var/run/utmp"}; push rbp; mov  rbp, rdi; call jump_strcmp; 
0x173833: lea  rsi, [rel 0x1dc636]  {"/var/log/wtmp"}; mov  rdi, rbp; call jump_strcmp; 
0x17384a: lea  r13, [rel 0x1dc619]  {"/var/run/utmpx"}; mov  rdi, rbp; mov  rsi, r13; call jump_strcmp; 
0x173860: lea  r13, [rel 0x1dc60a]  {"/var/log/wtmpx"}; mov  rdi, rbp; mov  rsi, r13; call jump_strcmp; 
0x3b68b: lea  rsi, [r12+0x18]; mov  rdi, r13; call jump_strcmp; 
0x3b815: lea  rsi, [rel 0x1d850f]  {"POSIX"}; mov  rdi, r15; call jump_strcmp; 
0xace89: add  rsp, 0xe8; pop  rbx; pop  rbp; pop  r12; pop  r13; pop  r14; pop  r15; jmp  jump_strcmp; 
0xace9f: mov  rsi, qword [rsp+0x90]; mov  rdi, qword [rsp+0x88]; call jump_strcmp; 
0x156b5d: lea  rbp, [r13+r14]; lea  rax, [rel 0x1d69e0]  {"aliases"}; mov  rdi, r12; shr  rbp, 0x1; lea  rbx, [rbp*8]; sub  rbx, rbp; add  rbx, rbx; lea  rsi, [rbx+rax]; call jump_strcmp; 
0x15859f: lea  rsi, [rel 0x1dc1ef]; mov  rdi, r13; call jump_strpbrk; 
0x15bd40: lea  rsi, [rel 0x1dc1ef]; mov  rdi, r14; mov  qword [rsp+0x8], r9; call jump_strpbrk; 
0x15bf8a: lea  rsi, [rel 0x1dc1ef]; mov  rdi, rax; call jump_strpbrk; 
0x15c020: lea  rsi, [rel 0x1dc1ef]; mov  rdi, rax; call jump_strpbrk; 
0x14ba00: lea  rsi, [rel 0x1d852d]; mov  rdi, r13; call jump_strpbrk; 
0x14ba39: lea  rsi, [rel 0x1d852d]; mov  rdi, r13; call jump_strpbrk; 
0x154599: sub  rsp, 0x8; lea  rsi, [rel 0x1d993d]; call jump_strpbrk; 
0x1545f5: mov  rsi, rbp; call jump_strpbrk; 
0x15464f: lea  rbp, [rel 0x1d993d]; mov  r14, rsi; mov  r13, rdi; mov  rsi, rbp; mov  r12, r13; call jump_strpbrk; 
0x154690: mov  byte [rax], 0x20; lea  rdi, [rax+0x1]; mov  rsi, rbp; call jump_strpbrk; 
0x15c714: lea  rsi, [rel 0x1dc1ef]; mov  rdi, rbp; call jump_strpbrk; 
0x157724: lea  rsi, [rel 0x1dc1ef]; mov  rdi, rbp; call jump_strpbrk; 
0x15ac90: endbr64 ; push r14; push r13; push r12; mov  r12, rsi; lea  rsi, [rel 0x1dc1ef]; push rbp; push rbx; mov  rbx, rdi; sub  rsp, 0x10; mov  rax, qword [fs:0x28]; mov  qword [rsp+0x8], rax; xor  eax, eax; call jump_strpbrk; 
0x159ac7: lea  rsi, [rel 0x1dc1ef]; mov  rdi, r13; call jump_strpbrk; 
0x157dc4: lea  rsi, [rel 0x1dc1ef]; mov  rdi, rbp; call jump_strpbrk; 
0x89ae0: mov  rsi, rbx; mov  rdi, r12; call jump_strnlen; 
0x89e15: mov  rsi, rbx; mov  rdi, r12; call jump_strnlen; 
